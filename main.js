// Generated by purs bundle 0.12.0
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                 
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
    "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
  exports.eqCharImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS["Type.Data.RowList"] = PS["Type.Data.RowList"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Show = function (show) {
      this.show = show;
  }; 
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var RProxy = (function () {
      function RProxy() {

      };
      RProxy.value = new RProxy();
      return RProxy;
  })();
  exports["RProxy"] = RProxy;
})(PS["Type.Data.Row"] = PS["Type.Data.Row"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Eq = function (eq) {
      this.eq = eq;
  };
  var EqRecord = function (eqRecord) {
      this.eqRecord = eqRecord;
  };                                           
  var eqRowNil = new EqRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return true;
          };
      };
  });
  var eqRecord = function (dict) {
      return dict.eqRecord;
  };
  var eqRec = function (dictRowToList) {
      return function (dictEqRecord) {
          return new Eq(eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var eqNumber = new Eq($foreign.eqNumberImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  }; 
  var eqRowCons = function (dictEqRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictEq) {
                  return new EqRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var get = Record_Unsafe.unsafeGet(key);
                              return eq(dictEq)(get(ra))(get(rb)) && tail;
                          };
                      };
                  });
              };
          };
      };
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["EqRecord"] = EqRecord;
  exports["eqRecord"] = eqRecord;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqRec"] = eqRec;
  exports["eqRowNil"] = eqRowNil;
  exports["eqRowCons"] = eqRowCons;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];                 
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var SemiringRecord = function (addRecord, mulRecord, oneRecord, zeroRecord) {
      this.addRecord = addRecord;
      this.mulRecord = mulRecord;
      this.oneRecord = oneRecord;
      this.zeroRecord = zeroRecord;
  };
  var zeroRecord = function (dict) {
      return dict.zeroRecord;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                 
  var semiringRecordNil = new SemiringRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  }, function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  }, function (v) {
      return function (v1) {
          return {};
      };
  }, function (v) {
      return function (v1) {
          return {};
      };
  });
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var oneRecord = function (dict) {
      return dict.oneRecord;
  };
  var one = function (dict) {
      return dict.one;
  };
  var mulRecord = function (dict) {
      return dict.mulRecord;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var addRecord = function (dict) {
      return dict.addRecord;
  };
  var semiringRecord = function (dictRowToList) {
      return function (dictSemiringRecord) {
          return new Semiring(addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value), zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value));
      };
  };
  var add = function (dict) {
      return dict.add;
  };
  var semiringRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemiringRecord) {
              return function (dictSemiring) {
                  return new SemiringRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(add(dictSemiring)(get(ra))(get(rb)))(tail);
                          };
                      };
                  }, function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(mul(dictSemiring)(get(ra))(get(rb)))(tail);
                          };
                      };
                  }, function (v) {
                      return function (v1) {
                          var tail = oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          return insert(one(dictSemiring))(tail);
                      };
                  }, function (v) {
                      return function (v1) {
                          var tail = zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          return insert(zero(dictSemiring))(tail);
                      };
                  });
              };
          };
      };
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["SemiringRecord"] = SemiringRecord;
  exports["addRecord"] = addRecord;
  exports["mulRecord"] = mulRecord;
  exports["oneRecord"] = oneRecord;
  exports["zeroRecord"] = zeroRecord;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
  exports["semiringRecord"] = semiringRecord;
  exports["semiringRecordNil"] = semiringRecordNil;
  exports["semiringRecordCons"] = semiringRecordCons;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var RingRecord = function (SemiringRecord0, subRecord) {
      this.SemiringRecord0 = SemiringRecord0;
      this.subRecord = subRecord;
  };
  var subRecord = function (dict) {
      return dict.subRecord;
  };
  var sub = function (dict) {
      return dict.sub;
  }; 
  var ringRecordNil = new RingRecord(function () {
      return Data_Semiring.semiringRecordNil;
  }, function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  });
  var ringRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictRingRecord) {
              return function (dictRing) {
                  return new RingRecord(function () {
                      return Data_Semiring.semiringRecordCons(dictIsSymbol)(dictCons)(dictRingRecord.SemiringRecord0())(dictRing.Semiring0());
                  }, function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(sub(dictRing)(get(ra))(get(rb)))(tail);
                          };
                      };
                  });
              };
          };
      };
  };
  var ringRecord = function (dictRowToList) {
      return function (dictRingRecord) {
          return new Ring(function () {
              return Data_Semiring.semiringRecord(dictRowToList)(dictRingRecord.SemiringRecord0());
          }, subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var ringNumber = new Ring(function () {
      return Data_Semiring.semiringNumber;
  }, $foreign.numSub);
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["negate"] = negate;
  exports["RingRecord"] = RingRecord;
  exports["subRecord"] = subRecord;
  exports["ringInt"] = ringInt;
  exports["ringNumber"] = ringNumber;
  exports["ringRecord"] = ringRecord;
  exports["ringRecordNil"] = ringRecordNil;
  exports["ringRecordCons"] = ringRecordCons;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $53 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($53) {
                  return x;
              };
              return Data_Ring.negate(dictRing)(x);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["abs"] = abs;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordChar"] = ordChar;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];                 
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];                 
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];                 
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];                 
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 217, column 1 - line 217, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var $__unused = function (dictPartial1) {
              return function ($dollar35) {
                  return $dollar35;
              };
          };
          return $__unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 268, column 1 - line 268, column 46: " + [ v.constructor.name ]);
          })());
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Semigroup_First = PS["Data.Semigroup.First"];
  var Data_Semigroup_Last = PS["Data.Semigroup.Last"];
  var Prelude = PS["Prelude"];                 
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };                        
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($80) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($80)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["newtypeDisj"] = newtypeDisj;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var $$null = function (dictFoldable) {
      return foldr(dictFoldable)(function (v) {
          return function (v1) {
              return false;
          };
      })(true);
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var findMap = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return p(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["any"] = any;
  exports["findMap"] = findMap;
  exports["null"] = $$null;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
    "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
    "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unfoldable1"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldr1 = function (dict) {
      return dict.unfoldr1;
  };
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldr1"] = unfoldr1;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty_Internal = PS["Data.Array.NonEmpty.Internal"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };                                                                                  
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      };
      throw new Error("Failed pattern match at Data.Array line 323, column 1 - line 323, column 45: " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["init"] = init;
  exports["index"] = index;
  exports["elemIndex"] = elemIndex;
  exports["findIndex"] = findIndex;
  exports["zip"] = zip;
  exports["length"] = $foreign.length;
  exports["slice"] = $foreign.slice;
  exports["zipWith"] = $foreign.zipWith;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Enum"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  }; 
  var pred = function (dict) {
      return dict.pred;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var cardinality = function (dict) {
      return dict.cardinality;
  }; 
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["Enum"] = Enum;
  exports["succ"] = succ;
  exports["pred"] = pred;
  exports["BoundedEnum"] = BoundedEnum;
  exports["cardinality"] = cardinality;
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultPred"] = defaultPred;
  exports["enumChar"] = enumChar;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Enum = PS["Data.Enum"];
  var Data_Maybe = PS["Data.Maybe"];                 
  var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
  exports["toCharCode"] = toCharCode;
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
    "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";        

  exports.floor = Math.floor;

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };

  exports.round = Math.round;

  exports.sqrt = Math.sqrt;    

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Math"];
  exports["floor"] = $foreign.floor;
  exports["pow"] = $foreign.pow;
  exports["round"] = $foreign.round;
  exports["sqrt"] = $foreign.sqrt;
  exports["pi"] = $foreign.pi;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];      
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 66, column 1 - line 66, column 29: " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["fromNumber"] = fromNumber;
  exports["floor"] = floor;
  exports["round"] = round;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var NUMCAT_LU = (function () {
      function NUMCAT_LU() {

      };
      NUMCAT_LU.value = new NUMCAT_LU();
      return NUMCAT_LU;
  })();
  var NUMCAT_LL = (function () {
      function NUMCAT_LL() {

      };
      NUMCAT_LL.value = new NUMCAT_LL();
      return NUMCAT_LL;
  })();
  var NUMCAT_LT = (function () {
      function NUMCAT_LT() {

      };
      NUMCAT_LT.value = new NUMCAT_LT();
      return NUMCAT_LT;
  })();
  var NUMCAT_LM = (function () {
      function NUMCAT_LM() {

      };
      NUMCAT_LM.value = new NUMCAT_LM();
      return NUMCAT_LM;
  })();
  var NUMCAT_LO = (function () {
      function NUMCAT_LO() {

      };
      NUMCAT_LO.value = new NUMCAT_LO();
      return NUMCAT_LO;
  })();
  var NUMCAT_MN = (function () {
      function NUMCAT_MN() {

      };
      NUMCAT_MN.value = new NUMCAT_MN();
      return NUMCAT_MN;
  })();
  var NUMCAT_MC = (function () {
      function NUMCAT_MC() {

      };
      NUMCAT_MC.value = new NUMCAT_MC();
      return NUMCAT_MC;
  })();
  var NUMCAT_ME = (function () {
      function NUMCAT_ME() {

      };
      NUMCAT_ME.value = new NUMCAT_ME();
      return NUMCAT_ME;
  })();
  var NUMCAT_ND = (function () {
      function NUMCAT_ND() {

      };
      NUMCAT_ND.value = new NUMCAT_ND();
      return NUMCAT_ND;
  })();
  var NUMCAT_NL = (function () {
      function NUMCAT_NL() {

      };
      NUMCAT_NL.value = new NUMCAT_NL();
      return NUMCAT_NL;
  })();
  var NUMCAT_NO = (function () {
      function NUMCAT_NO() {

      };
      NUMCAT_NO.value = new NUMCAT_NO();
      return NUMCAT_NO;
  })();
  var NUMCAT_PC = (function () {
      function NUMCAT_PC() {

      };
      NUMCAT_PC.value = new NUMCAT_PC();
      return NUMCAT_PC;
  })();
  var NUMCAT_PD = (function () {
      function NUMCAT_PD() {

      };
      NUMCAT_PD.value = new NUMCAT_PD();
      return NUMCAT_PD;
  })();
  var NUMCAT_PS = (function () {
      function NUMCAT_PS() {

      };
      NUMCAT_PS.value = new NUMCAT_PS();
      return NUMCAT_PS;
  })();
  var NUMCAT_PE = (function () {
      function NUMCAT_PE() {

      };
      NUMCAT_PE.value = new NUMCAT_PE();
      return NUMCAT_PE;
  })();
  var NUMCAT_PI = (function () {
      function NUMCAT_PI() {

      };
      NUMCAT_PI.value = new NUMCAT_PI();
      return NUMCAT_PI;
  })();
  var NUMCAT_PF = (function () {
      function NUMCAT_PF() {

      };
      NUMCAT_PF.value = new NUMCAT_PF();
      return NUMCAT_PF;
  })();
  var NUMCAT_PO = (function () {
      function NUMCAT_PO() {

      };
      NUMCAT_PO.value = new NUMCAT_PO();
      return NUMCAT_PO;
  })();
  var NUMCAT_SM = (function () {
      function NUMCAT_SM() {

      };
      NUMCAT_SM.value = new NUMCAT_SM();
      return NUMCAT_SM;
  })();
  var NUMCAT_SC = (function () {
      function NUMCAT_SC() {

      };
      NUMCAT_SC.value = new NUMCAT_SC();
      return NUMCAT_SC;
  })();
  var NUMCAT_SK = (function () {
      function NUMCAT_SK() {

      };
      NUMCAT_SK.value = new NUMCAT_SK();
      return NUMCAT_SK;
  })();
  var NUMCAT_SO = (function () {
      function NUMCAT_SO() {

      };
      NUMCAT_SO.value = new NUMCAT_SO();
      return NUMCAT_SO;
  })();
  var NUMCAT_ZS = (function () {
      function NUMCAT_ZS() {

      };
      NUMCAT_ZS.value = new NUMCAT_ZS();
      return NUMCAT_ZS;
  })();
  var NUMCAT_ZL = (function () {
      function NUMCAT_ZL() {

      };
      NUMCAT_ZL.value = new NUMCAT_ZL();
      return NUMCAT_ZL;
  })();
  var NUMCAT_ZP = (function () {
      function NUMCAT_ZP() {

      };
      NUMCAT_ZP.value = new NUMCAT_ZP();
      return NUMCAT_ZP;
  })();
  var NUMCAT_CC = (function () {
      function NUMCAT_CC() {

      };
      NUMCAT_CC.value = new NUMCAT_CC();
      return NUMCAT_CC;
  })();
  var NUMCAT_CF = (function () {
      function NUMCAT_CF() {

      };
      NUMCAT_CF.value = new NUMCAT_CF();
      return NUMCAT_CF;
  })();
  var NUMCAT_CS = (function () {
      function NUMCAT_CS() {

      };
      NUMCAT_CS.value = new NUMCAT_CS();
      return NUMCAT_CS;
  })();
  var NUMCAT_CO = (function () {
      function NUMCAT_CO() {

      };
      NUMCAT_CO.value = new NUMCAT_CO();
      return NUMCAT_CO;
  })();
  var NUMCAT_CN = (function () {
      function NUMCAT_CN() {

      };
      NUMCAT_CN.value = new NUMCAT_CN();
      return NUMCAT_CN;
  })();              
  var numLat1Blocks = 63;  
  var numBlocks = 2783;    
  var gencatZS = 2;
  var rule1 = {
      category: gencatZS,
      unicodeCat: NUMCAT_ZS.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };  
  var gencatZP = 67108864;
  var rule140 = {
      category: gencatZP,
      unicodeCat: NUMCAT_ZP.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatZL = 33554432;
  var rule139 = {
      category: gencatZL,
      unicodeCat: NUMCAT_ZL.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatSO = 8192;
  var rule13 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule148 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 1,
      updist: 0,
      lowdist: 26,
      titledist: 0
  };
  var rule149 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 1,
      updist: -26 | 0,
      lowdist: 0,
      titledist: -26 | 0
  };
  var gencatSM = 64;
  var rule6 = {
      category: gencatSM,
      unicodeCat: NUMCAT_SM.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatSK = 1024;
  var rule10 = {
      category: gencatSK,
      unicodeCat: NUMCAT_SK.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatSC = 8;
  var rule3 = {
      category: gencatSC,
      unicodeCat: NUMCAT_SC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPS = 16;
  var rule4 = {
      category: gencatPS,
      unicodeCat: NUMCAT_PS.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPO = 4;
  var rule2 = {
      category: gencatPO,
      unicodeCat: NUMCAT_PO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPI = 16384;
  var rule15 = {
      category: gencatPI,
      unicodeCat: NUMCAT_PI.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPF = 131072;
  var rule19 = {
      category: gencatPF,
      unicodeCat: NUMCAT_PF.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPE = 32;
  var rule5 = {
      category: gencatPE,
      unicodeCat: NUMCAT_PE.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPD = 128;
  var rule7 = {
      category: gencatPD,
      unicodeCat: NUMCAT_PD.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPC = 2048;
  var rule11 = {
      category: gencatPC,
      unicodeCat: NUMCAT_PC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatNO = 65536;
  var rule17 = {
      category: gencatNO,
      unicodeCat: NUMCAT_NO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatNL = 16777216;
  var rule116 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule146 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 1,
      updist: 0,
      lowdist: 16,
      titledist: 0
  };
  var rule147 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 1,
      updist: -16 | 0,
      lowdist: 0,
      titledist: -16 | 0
  };
  var gencatND = 256;
  var rule8 = {
      category: gencatND,
      unicodeCat: NUMCAT_ND.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatMN = 2097152;
  var rule84 = {
      category: gencatMN,
      unicodeCat: NUMCAT_MN.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule85 = {
      category: gencatMN,
      unicodeCat: NUMCAT_MN.value,
      possible: 1,
      updist: 84,
      lowdist: 0,
      titledist: 84
  };
  var gencatME = 4194304;
  var rule109 = {
      category: gencatME,
      unicodeCat: NUMCAT_ME.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatMC = 8388608;
  var rule114 = {
      category: gencatMC,
      unicodeCat: NUMCAT_MC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatLU = 512;
  var nullrule = {
      category: gencatLU,
      unicodeCat: NUMCAT_CN.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule105 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -60 | 0,
      titledist: 0
  };
  var rule107 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7 | 0,
      titledist: 0
  };
  var rule108 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 80,
      titledist: 0
  };
  var rule110 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 15,
      titledist: 0
  };
  var rule112 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 48,
      titledist: 0
  };
  var rule115 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 7264,
      titledist: 0
  };
  var rule120 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7615 | 0,
      titledist: 0
  };
  var rule122 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8 | 0,
      titledist: 0
  };
  var rule131 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -74 | 0,
      titledist: 0
  };
  var rule134 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -86 | 0,
      titledist: 0
  };
  var rule135 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -100 | 0,
      titledist: 0
  };
  var rule136 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -112 | 0,
      titledist: 0
  };
  var rule137 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -128 | 0,
      titledist: 0
  };
  var rule138 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -126 | 0,
      titledist: 0
  };
  var rule141 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7517 | 0,
      titledist: 0
  };
  var rule142 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8383 | 0,
      titledist: 0
  };
  var rule143 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8262 | 0,
      titledist: 0
  };
  var rule144 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 28,
      titledist: 0
  };
  var rule150 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10743 | 0,
      titledist: 0
  };
  var rule151 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -3814 | 0,
      titledist: 0
  };
  var rule152 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10727 | 0,
      titledist: 0
  };
  var rule155 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10780 | 0,
      titledist: 0
  };
  var rule156 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10749 | 0,
      titledist: 0
  };
  var rule157 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10783 | 0,
      titledist: 0
  };
  var rule158 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10782 | 0,
      titledist: 0
  };
  var rule159 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10815 | 0,
      titledist: 0
  };
  var rule161 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -35332 | 0,
      titledist: 0
  };
  var rule162 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42280 | 0,
      titledist: 0
  };
  var rule165 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 40,
      titledist: 0
  };
  var rule21 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 1,
      titledist: 0
  };
  var rule23 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -199 | 0,
      titledist: 0
  };
  var rule25 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -121 | 0,
      titledist: 0
  };
  var rule28 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 210,
      titledist: 0
  };
  var rule29 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 206,
      titledist: 0
  };
  var rule30 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 205,
      titledist: 0
  };
  var rule31 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 79,
      titledist: 0
  };
  var rule32 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 202,
      titledist: 0
  };
  var rule33 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 203,
      titledist: 0
  };
  var rule34 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 207,
      titledist: 0
  };
  var rule36 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 211,
      titledist: 0
  };
  var rule37 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 209,
      titledist: 0
  };
  var rule39 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 213,
      titledist: 0
  };
  var rule41 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 214,
      titledist: 0
  };
  var rule42 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 218,
      titledist: 0
  };
  var rule43 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 217,
      titledist: 0
  };
  var rule44 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 219,
      titledist: 0
  };
  var rule47 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 2,
      titledist: 1
  };
  var rule51 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -97 | 0,
      titledist: 0
  };
  var rule52 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -56 | 0,
      titledist: 0
  };
  var rule53 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -130 | 0,
      titledist: 0
  };
  var rule54 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 10795,
      titledist: 0
  };
  var rule55 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -163 | 0,
      titledist: 0
  };
  var rule56 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 10792,
      titledist: 0
  };
  var rule58 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -195 | 0,
      titledist: 0
  };
  var rule59 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 69,
      titledist: 0
  };
  var rule60 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 71,
      titledist: 0
  };
  var rule86 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 38,
      titledist: 0
  };
  var rule87 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 37,
      titledist: 0
  };
  var rule88 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 64,
      titledist: 0
  };
  var rule89 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 63,
      titledist: 0
  };
  var rule9 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 32,
      titledist: 0
  };
  var rule95 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 8,
      titledist: 0
  };
  var rule98 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatLT = 524288;
  var rule129 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: 0,
      lowdist: -8 | 0,
      titledist: 0
  };
  var rule132 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: 0,
      lowdist: -9 | 0,
      titledist: 0
  };
  var rule48 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: -1 | 0,
      lowdist: 1,
      titledist: 0
  };
  var gencatLO = 262144;
  var rule45 = {
      category: gencatLO,
      unicodeCat: NUMCAT_LO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatLM = 1048576;
  var rule83 = {
      category: gencatLM,
      unicodeCat: NUMCAT_LM.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatLL = 4096;
  var rule100 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -54 | 0,
      lowdist: 0,
      titledist: -54 | 0
  };
  var rule101 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -8 | 0,
      lowdist: 0,
      titledist: -8 | 0
  };
  var rule102 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -86 | 0,
      lowdist: 0,
      titledist: -86 | 0
  };
  var rule103 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -80 | 0,
      lowdist: 0,
      titledist: -80 | 0
  };
  var rule104 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 7,
      lowdist: 0,
      titledist: 7
  };
  var rule106 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -96 | 0,
      lowdist: 0,
      titledist: -96 | 0
  };
  var rule111 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -15 | 0,
      lowdist: 0,
      titledist: -15 | 0
  };
  var rule113 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -48 | 0,
      lowdist: 0,
      titledist: -48 | 0
  };
  var rule117 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 35332,
      lowdist: 0,
      titledist: 35332
  };
  var rule118 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 3814,
      lowdist: 0,
      titledist: 3814
  };
  var rule119 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -59 | 0,
      lowdist: 0,
      titledist: -59 | 0
  };
  var rule12 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -32 | 0,
      lowdist: 0,
      titledist: -32 | 0
  };
  var rule121 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 8,
      lowdist: 0,
      titledist: 8
  };
  var rule123 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 74,
      lowdist: 0,
      titledist: 74
  };
  var rule124 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 86,
      lowdist: 0,
      titledist: 86
  };
  var rule125 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 100,
      lowdist: 0,
      titledist: 100
  };
  var rule126 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 128,
      lowdist: 0,
      titledist: 128
  };
  var rule127 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 112,
      lowdist: 0,
      titledist: 112
  };
  var rule128 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 126,
      lowdist: 0,
      titledist: 126
  };
  var rule130 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 9,
      lowdist: 0,
      titledist: 9
  };
  var rule133 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -7205 | 0,
      lowdist: 0,
      titledist: -7205 | 0
  };
  var rule14 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule145 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -28 | 0,
      lowdist: 0,
      titledist: -28 | 0
  };
  var rule153 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -10795 | 0,
      lowdist: 0,
      titledist: -10795 | 0
  };
  var rule154 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -10792 | 0,
      lowdist: 0,
      titledist: -10792 | 0
  };
  var rule160 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -7264 | 0,
      lowdist: 0,
      titledist: -7264 | 0
  };
  var rule166 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -40 | 0,
      lowdist: 0,
      titledist: -40 | 0
  };
  var rule18 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 743,
      lowdist: 0,
      titledist: 743
  };
  var rule20 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 121,
      lowdist: 0,
      titledist: 121
  };
  var rule22 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -1 | 0,
      lowdist: 0,
      titledist: -1 | 0
  };
  var rule24 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -232 | 0,
      lowdist: 0,
      titledist: -232 | 0
  };
  var rule26 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -300 | 0,
      lowdist: 0,
      titledist: -300 | 0
  };
  var rule27 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 195,
      lowdist: 0,
      titledist: 195
  };
  var rule35 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 97,
      lowdist: 0,
      titledist: 97
  };
  var rule38 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 163,
      lowdist: 0,
      titledist: 163
  };
  var rule40 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 130,
      lowdist: 0,
      titledist: 130
  };
  var rule46 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 56,
      lowdist: 0,
      titledist: 56
  };
  var rule49 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -2 | 0,
      lowdist: 0,
      titledist: -1 | 0
  };
  var rule50 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -79 | 0,
      lowdist: 0,
      titledist: -79 | 0
  };
  var rule57 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10815,
      lowdist: 0,
      titledist: 10815
  };
  var rule61 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10783,
      lowdist: 0,
      titledist: 10783
  };
  var rule62 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10780,
      lowdist: 0,
      titledist: 10780
  };
  var rule63 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10782,
      lowdist: 0,
      titledist: 10782
  };
  var rule64 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -210 | 0,
      lowdist: 0,
      titledist: -210 | 0
  };
  var rule65 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -206 | 0,
      lowdist: 0,
      titledist: -206 | 0
  };
  var rule66 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -205 | 0,
      lowdist: 0,
      titledist: -205 | 0
  };
  var rule67 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -202 | 0,
      lowdist: 0,
      titledist: -202 | 0
  };
  var rule68 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -203 | 0,
      lowdist: 0,
      titledist: -203 | 0
  };
  var rule69 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -207 | 0,
      lowdist: 0,
      titledist: -207 | 0
  };
  var rule70 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42280,
      lowdist: 0,
      titledist: 42280
  };
  var rule71 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -209 | 0,
      lowdist: 0,
      titledist: -209 | 0
  };
  var rule72 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -211 | 0,
      lowdist: 0,
      titledist: -211 | 0
  };
  var rule73 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10743,
      lowdist: 0,
      titledist: 10743
  };
  var rule74 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10749,
      lowdist: 0,
      titledist: 10749
  };
  var rule75 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -213 | 0,
      lowdist: 0,
      titledist: -213 | 0
  };
  var rule76 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -214 | 0,
      lowdist: 0,
      titledist: -214 | 0
  };
  var rule77 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10727,
      lowdist: 0,
      titledist: 10727
  };
  var rule78 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -218 | 0,
      lowdist: 0,
      titledist: -218 | 0
  };
  var rule79 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -69 | 0,
      lowdist: 0,
      titledist: -69 | 0
  };
  var rule80 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -217 | 0,
      lowdist: 0,
      titledist: -217 | 0
  };
  var rule81 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -71 | 0,
      lowdist: 0,
      titledist: -71 | 0
  };
  var rule82 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -219 | 0,
      lowdist: 0,
      titledist: -219 | 0
  };
  var rule90 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -38 | 0,
      lowdist: 0,
      titledist: -38 | 0
  };
  var rule91 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -37 | 0,
      lowdist: 0,
      titledist: -37 | 0
  };
  var rule92 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -31 | 0,
      lowdist: 0,
      titledist: -31 | 0
  };
  var rule93 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -64 | 0,
      lowdist: 0,
      titledist: -64 | 0
  };
  var rule94 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -63 | 0,
      lowdist: 0,
      titledist: -63 | 0
  };
  var rule96 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -62 | 0,
      lowdist: 0,
      titledist: -62 | 0
  };
  var rule97 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -57 | 0,
      lowdist: 0,
      titledist: -57 | 0
  };
  var rule99 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -47 | 0,
      lowdist: 0,
      titledist: -47 | 0
  };
  var gencatCS = 134217728;
  var rule163 = {
      category: gencatCS,
      unicodeCat: NUMCAT_CS.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatCO = 268435456;
  var rule164 = {
      category: gencatCO,
      unicodeCat: NUMCAT_CO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatCF = 32768;
  var rule16 = {
      category: gencatCF,
      unicodeCat: NUMCAT_CF.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatCC = 1;
  var rule0 = {
      category: gencatCC,
      unicodeCat: NUMCAT_CC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };  
  var bsearch = function (a) {
      return function (array) {
          return function (size) {
              return function (compare) {
                  var go = function ($copy_i) {
                      return function ($copy_k) {
                          var $tco_var_i = $copy_i;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(i, k) {
                              if (i > k) {
                                  $tco_done = true;
                                  return Data_Maybe.Nothing.value;
                              };
                              if (Data_Boolean.otherwise) {
                                  var j = Data_Int.floor(Data_Int.toNumber(i + k | 0) / 2.0);
                                  var v = compare(a)(array[j]);
                                  if (v instanceof Data_Ordering.EQ) {
                                      $tco_done = true;
                                      return new Data_Maybe.Just(array[j]);
                                  };
                                  if (v instanceof Data_Ordering.GT) {
                                      $tco_var_i = j + 1 | 0;
                                      $copy_k = k;
                                      return;
                                  };
                                  $tco_var_i = i;
                                  $copy_k = j - 1 | 0;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Char.Unicode.Internal line 4783, column 5 - line 4789, column 49: " + [ i.constructor.name, k.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_i, $copy_k);
                          };
                          return $tco_result;
                      };
                  };
                  return go(0)(size);
              };
          };
      };
  };
  var blkCmp = function (v) {
      return function (v1) {
          if (v.start >= v1.start && v.start < (v1.start + v1.length | 0)) {
              return Data_Ordering.EQ.value;
          };
          if (v.start > v1.start) {
              return Data_Ordering.GT.value;
          };
          if (Data_Boolean.otherwise) {
              return Data_Ordering.LT.value;
          };
          throw new Error("Failed pattern match at Data.Char.Unicode.Internal line 4760, column 1 - line 4760, column 45: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var getRule = function (blocks) {
      return function (unichar) {
          return function (size) {
              var key = {
                  start: unichar,
                  length: 1,
                  convRule: nullrule
              };
              var maybeCharBlock = bsearch(key)(blocks)(size)(blkCmp);
              if (maybeCharBlock instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              if (maybeCharBlock instanceof Data_Maybe.Just) {
                  return new Data_Maybe.Just(maybeCharBlock.value0.convRule);
              };
              throw new Error("Failed pattern match at Data.Char.Unicode.Internal line 4773, column 8 - line 4775, column 62: " + [ maybeCharBlock.constructor.name ]);
          };
      };
  };                                       
  var allchars = [ {
      start: 0,
      length: 32,
      convRule: rule0
  }, {
      start: 32,
      length: 1,
      convRule: rule1
  }, {
      start: 33,
      length: 3,
      convRule: rule2
  }, {
      start: 36,
      length: 1,
      convRule: rule3
  }, {
      start: 37,
      length: 3,
      convRule: rule2
  }, {
      start: 40,
      length: 1,
      convRule: rule4
  }, {
      start: 41,
      length: 1,
      convRule: rule5
  }, {
      start: 42,
      length: 1,
      convRule: rule2
  }, {
      start: 43,
      length: 1,
      convRule: rule6
  }, {
      start: 44,
      length: 1,
      convRule: rule2
  }, {
      start: 45,
      length: 1,
      convRule: rule7
  }, {
      start: 46,
      length: 2,
      convRule: rule2
  }, {
      start: 48,
      length: 10,
      convRule: rule8
  }, {
      start: 58,
      length: 2,
      convRule: rule2
  }, {
      start: 60,
      length: 3,
      convRule: rule6
  }, {
      start: 63,
      length: 2,
      convRule: rule2
  }, {
      start: 65,
      length: 26,
      convRule: rule9
  }, {
      start: 91,
      length: 1,
      convRule: rule4
  }, {
      start: 92,
      length: 1,
      convRule: rule2
  }, {
      start: 93,
      length: 1,
      convRule: rule5
  }, {
      start: 94,
      length: 1,
      convRule: rule10
  }, {
      start: 95,
      length: 1,
      convRule: rule11
  }, {
      start: 96,
      length: 1,
      convRule: rule10
  }, {
      start: 97,
      length: 26,
      convRule: rule12
  }, {
      start: 123,
      length: 1,
      convRule: rule4
  }, {
      start: 124,
      length: 1,
      convRule: rule6
  }, {
      start: 125,
      length: 1,
      convRule: rule5
  }, {
      start: 126,
      length: 1,
      convRule: rule6
  }, {
      start: 127,
      length: 33,
      convRule: rule0
  }, {
      start: 160,
      length: 1,
      convRule: rule1
  }, {
      start: 161,
      length: 1,
      convRule: rule2
  }, {
      start: 162,
      length: 4,
      convRule: rule3
  }, {
      start: 166,
      length: 2,
      convRule: rule13
  }, {
      start: 168,
      length: 1,
      convRule: rule10
  }, {
      start: 169,
      length: 1,
      convRule: rule13
  }, {
      start: 170,
      length: 1,
      convRule: rule14
  }, {
      start: 171,
      length: 1,
      convRule: rule15
  }, {
      start: 172,
      length: 1,
      convRule: rule6
  }, {
      start: 173,
      length: 1,
      convRule: rule16
  }, {
      start: 174,
      length: 1,
      convRule: rule13
  }, {
      start: 175,
      length: 1,
      convRule: rule10
  }, {
      start: 176,
      length: 1,
      convRule: rule13
  }, {
      start: 177,
      length: 1,
      convRule: rule6
  }, {
      start: 178,
      length: 2,
      convRule: rule17
  }, {
      start: 180,
      length: 1,
      convRule: rule10
  }, {
      start: 181,
      length: 1,
      convRule: rule18
  }, {
      start: 182,
      length: 1,
      convRule: rule13
  }, {
      start: 183,
      length: 1,
      convRule: rule2
  }, {
      start: 184,
      length: 1,
      convRule: rule10
  }, {
      start: 185,
      length: 1,
      convRule: rule17
  }, {
      start: 186,
      length: 1,
      convRule: rule14
  }, {
      start: 187,
      length: 1,
      convRule: rule19
  }, {
      start: 188,
      length: 3,
      convRule: rule17
  }, {
      start: 191,
      length: 1,
      convRule: rule2
  }, {
      start: 192,
      length: 23,
      convRule: rule9
  }, {
      start: 215,
      length: 1,
      convRule: rule6
  }, {
      start: 216,
      length: 7,
      convRule: rule9
  }, {
      start: 223,
      length: 1,
      convRule: rule14
  }, {
      start: 224,
      length: 23,
      convRule: rule12
  }, {
      start: 247,
      length: 1,
      convRule: rule6
  }, {
      start: 248,
      length: 7,
      convRule: rule12
  }, {
      start: 255,
      length: 1,
      convRule: rule20
  }, {
      start: 256,
      length: 1,
      convRule: rule21
  }, {
      start: 257,
      length: 1,
      convRule: rule22
  }, {
      start: 258,
      length: 1,
      convRule: rule21
  }, {
      start: 259,
      length: 1,
      convRule: rule22
  }, {
      start: 260,
      length: 1,
      convRule: rule21
  }, {
      start: 261,
      length: 1,
      convRule: rule22
  }, {
      start: 262,
      length: 1,
      convRule: rule21
  }, {
      start: 263,
      length: 1,
      convRule: rule22
  }, {
      start: 264,
      length: 1,
      convRule: rule21
  }, {
      start: 265,
      length: 1,
      convRule: rule22
  }, {
      start: 266,
      length: 1,
      convRule: rule21
  }, {
      start: 267,
      length: 1,
      convRule: rule22
  }, {
      start: 268,
      length: 1,
      convRule: rule21
  }, {
      start: 269,
      length: 1,
      convRule: rule22
  }, {
      start: 270,
      length: 1,
      convRule: rule21
  }, {
      start: 271,
      length: 1,
      convRule: rule22
  }, {
      start: 272,
      length: 1,
      convRule: rule21
  }, {
      start: 273,
      length: 1,
      convRule: rule22
  }, {
      start: 274,
      length: 1,
      convRule: rule21
  }, {
      start: 275,
      length: 1,
      convRule: rule22
  }, {
      start: 276,
      length: 1,
      convRule: rule21
  }, {
      start: 277,
      length: 1,
      convRule: rule22
  }, {
      start: 278,
      length: 1,
      convRule: rule21
  }, {
      start: 279,
      length: 1,
      convRule: rule22
  }, {
      start: 280,
      length: 1,
      convRule: rule21
  }, {
      start: 281,
      length: 1,
      convRule: rule22
  }, {
      start: 282,
      length: 1,
      convRule: rule21
  }, {
      start: 283,
      length: 1,
      convRule: rule22
  }, {
      start: 284,
      length: 1,
      convRule: rule21
  }, {
      start: 285,
      length: 1,
      convRule: rule22
  }, {
      start: 286,
      length: 1,
      convRule: rule21
  }, {
      start: 287,
      length: 1,
      convRule: rule22
  }, {
      start: 288,
      length: 1,
      convRule: rule21
  }, {
      start: 289,
      length: 1,
      convRule: rule22
  }, {
      start: 290,
      length: 1,
      convRule: rule21
  }, {
      start: 291,
      length: 1,
      convRule: rule22
  }, {
      start: 292,
      length: 1,
      convRule: rule21
  }, {
      start: 293,
      length: 1,
      convRule: rule22
  }, {
      start: 294,
      length: 1,
      convRule: rule21
  }, {
      start: 295,
      length: 1,
      convRule: rule22
  }, {
      start: 296,
      length: 1,
      convRule: rule21
  }, {
      start: 297,
      length: 1,
      convRule: rule22
  }, {
      start: 298,
      length: 1,
      convRule: rule21
  }, {
      start: 299,
      length: 1,
      convRule: rule22
  }, {
      start: 300,
      length: 1,
      convRule: rule21
  }, {
      start: 301,
      length: 1,
      convRule: rule22
  }, {
      start: 302,
      length: 1,
      convRule: rule21
  }, {
      start: 303,
      length: 1,
      convRule: rule22
  }, {
      start: 304,
      length: 1,
      convRule: rule23
  }, {
      start: 305,
      length: 1,
      convRule: rule24
  }, {
      start: 306,
      length: 1,
      convRule: rule21
  }, {
      start: 307,
      length: 1,
      convRule: rule22
  }, {
      start: 308,
      length: 1,
      convRule: rule21
  }, {
      start: 309,
      length: 1,
      convRule: rule22
  }, {
      start: 310,
      length: 1,
      convRule: rule21
  }, {
      start: 311,
      length: 1,
      convRule: rule22
  }, {
      start: 312,
      length: 1,
      convRule: rule14
  }, {
      start: 313,
      length: 1,
      convRule: rule21
  }, {
      start: 314,
      length: 1,
      convRule: rule22
  }, {
      start: 315,
      length: 1,
      convRule: rule21
  }, {
      start: 316,
      length: 1,
      convRule: rule22
  }, {
      start: 317,
      length: 1,
      convRule: rule21
  }, {
      start: 318,
      length: 1,
      convRule: rule22
  }, {
      start: 319,
      length: 1,
      convRule: rule21
  }, {
      start: 320,
      length: 1,
      convRule: rule22
  }, {
      start: 321,
      length: 1,
      convRule: rule21
  }, {
      start: 322,
      length: 1,
      convRule: rule22
  }, {
      start: 323,
      length: 1,
      convRule: rule21
  }, {
      start: 324,
      length: 1,
      convRule: rule22
  }, {
      start: 325,
      length: 1,
      convRule: rule21
  }, {
      start: 326,
      length: 1,
      convRule: rule22
  }, {
      start: 327,
      length: 1,
      convRule: rule21
  }, {
      start: 328,
      length: 1,
      convRule: rule22
  }, {
      start: 329,
      length: 1,
      convRule: rule14
  }, {
      start: 330,
      length: 1,
      convRule: rule21
  }, {
      start: 331,
      length: 1,
      convRule: rule22
  }, {
      start: 332,
      length: 1,
      convRule: rule21
  }, {
      start: 333,
      length: 1,
      convRule: rule22
  }, {
      start: 334,
      length: 1,
      convRule: rule21
  }, {
      start: 335,
      length: 1,
      convRule: rule22
  }, {
      start: 336,
      length: 1,
      convRule: rule21
  }, {
      start: 337,
      length: 1,
      convRule: rule22
  }, {
      start: 338,
      length: 1,
      convRule: rule21
  }, {
      start: 339,
      length: 1,
      convRule: rule22
  }, {
      start: 340,
      length: 1,
      convRule: rule21
  }, {
      start: 341,
      length: 1,
      convRule: rule22
  }, {
      start: 342,
      length: 1,
      convRule: rule21
  }, {
      start: 343,
      length: 1,
      convRule: rule22
  }, {
      start: 344,
      length: 1,
      convRule: rule21
  }, {
      start: 345,
      length: 1,
      convRule: rule22
  }, {
      start: 346,
      length: 1,
      convRule: rule21
  }, {
      start: 347,
      length: 1,
      convRule: rule22
  }, {
      start: 348,
      length: 1,
      convRule: rule21
  }, {
      start: 349,
      length: 1,
      convRule: rule22
  }, {
      start: 350,
      length: 1,
      convRule: rule21
  }, {
      start: 351,
      length: 1,
      convRule: rule22
  }, {
      start: 352,
      length: 1,
      convRule: rule21
  }, {
      start: 353,
      length: 1,
      convRule: rule22
  }, {
      start: 354,
      length: 1,
      convRule: rule21
  }, {
      start: 355,
      length: 1,
      convRule: rule22
  }, {
      start: 356,
      length: 1,
      convRule: rule21
  }, {
      start: 357,
      length: 1,
      convRule: rule22
  }, {
      start: 358,
      length: 1,
      convRule: rule21
  }, {
      start: 359,
      length: 1,
      convRule: rule22
  }, {
      start: 360,
      length: 1,
      convRule: rule21
  }, {
      start: 361,
      length: 1,
      convRule: rule22
  }, {
      start: 362,
      length: 1,
      convRule: rule21
  }, {
      start: 363,
      length: 1,
      convRule: rule22
  }, {
      start: 364,
      length: 1,
      convRule: rule21
  }, {
      start: 365,
      length: 1,
      convRule: rule22
  }, {
      start: 366,
      length: 1,
      convRule: rule21
  }, {
      start: 367,
      length: 1,
      convRule: rule22
  }, {
      start: 368,
      length: 1,
      convRule: rule21
  }, {
      start: 369,
      length: 1,
      convRule: rule22
  }, {
      start: 370,
      length: 1,
      convRule: rule21
  }, {
      start: 371,
      length: 1,
      convRule: rule22
  }, {
      start: 372,
      length: 1,
      convRule: rule21
  }, {
      start: 373,
      length: 1,
      convRule: rule22
  }, {
      start: 374,
      length: 1,
      convRule: rule21
  }, {
      start: 375,
      length: 1,
      convRule: rule22
  }, {
      start: 376,
      length: 1,
      convRule: rule25
  }, {
      start: 377,
      length: 1,
      convRule: rule21
  }, {
      start: 378,
      length: 1,
      convRule: rule22
  }, {
      start: 379,
      length: 1,
      convRule: rule21
  }, {
      start: 380,
      length: 1,
      convRule: rule22
  }, {
      start: 381,
      length: 1,
      convRule: rule21
  }, {
      start: 382,
      length: 1,
      convRule: rule22
  }, {
      start: 383,
      length: 1,
      convRule: rule26
  }, {
      start: 384,
      length: 1,
      convRule: rule27
  }, {
      start: 385,
      length: 1,
      convRule: rule28
  }, {
      start: 386,
      length: 1,
      convRule: rule21
  }, {
      start: 387,
      length: 1,
      convRule: rule22
  }, {
      start: 388,
      length: 1,
      convRule: rule21
  }, {
      start: 389,
      length: 1,
      convRule: rule22
  }, {
      start: 390,
      length: 1,
      convRule: rule29
  }, {
      start: 391,
      length: 1,
      convRule: rule21
  }, {
      start: 392,
      length: 1,
      convRule: rule22
  }, {
      start: 393,
      length: 2,
      convRule: rule30
  }, {
      start: 395,
      length: 1,
      convRule: rule21
  }, {
      start: 396,
      length: 1,
      convRule: rule22
  }, {
      start: 397,
      length: 1,
      convRule: rule14
  }, {
      start: 398,
      length: 1,
      convRule: rule31
  }, {
      start: 399,
      length: 1,
      convRule: rule32
  }, {
      start: 400,
      length: 1,
      convRule: rule33
  }, {
      start: 401,
      length: 1,
      convRule: rule21
  }, {
      start: 402,
      length: 1,
      convRule: rule22
  }, {
      start: 403,
      length: 1,
      convRule: rule30
  }, {
      start: 404,
      length: 1,
      convRule: rule34
  }, {
      start: 405,
      length: 1,
      convRule: rule35
  }, {
      start: 406,
      length: 1,
      convRule: rule36
  }, {
      start: 407,
      length: 1,
      convRule: rule37
  }, {
      start: 408,
      length: 1,
      convRule: rule21
  }, {
      start: 409,
      length: 1,
      convRule: rule22
  }, {
      start: 410,
      length: 1,
      convRule: rule38
  }, {
      start: 411,
      length: 1,
      convRule: rule14
  }, {
      start: 412,
      length: 1,
      convRule: rule36
  }, {
      start: 413,
      length: 1,
      convRule: rule39
  }, {
      start: 414,
      length: 1,
      convRule: rule40
  }, {
      start: 415,
      length: 1,
      convRule: rule41
  }, {
      start: 416,
      length: 1,
      convRule: rule21
  }, {
      start: 417,
      length: 1,
      convRule: rule22
  }, {
      start: 418,
      length: 1,
      convRule: rule21
  }, {
      start: 419,
      length: 1,
      convRule: rule22
  }, {
      start: 420,
      length: 1,
      convRule: rule21
  }, {
      start: 421,
      length: 1,
      convRule: rule22
  }, {
      start: 422,
      length: 1,
      convRule: rule42
  }, {
      start: 423,
      length: 1,
      convRule: rule21
  }, {
      start: 424,
      length: 1,
      convRule: rule22
  }, {
      start: 425,
      length: 1,
      convRule: rule42
  }, {
      start: 426,
      length: 2,
      convRule: rule14
  }, {
      start: 428,
      length: 1,
      convRule: rule21
  }, {
      start: 429,
      length: 1,
      convRule: rule22
  }, {
      start: 430,
      length: 1,
      convRule: rule42
  }, {
      start: 431,
      length: 1,
      convRule: rule21
  }, {
      start: 432,
      length: 1,
      convRule: rule22
  }, {
      start: 433,
      length: 2,
      convRule: rule43
  }, {
      start: 435,
      length: 1,
      convRule: rule21
  }, {
      start: 436,
      length: 1,
      convRule: rule22
  }, {
      start: 437,
      length: 1,
      convRule: rule21
  }, {
      start: 438,
      length: 1,
      convRule: rule22
  }, {
      start: 439,
      length: 1,
      convRule: rule44
  }, {
      start: 440,
      length: 1,
      convRule: rule21
  }, {
      start: 441,
      length: 1,
      convRule: rule22
  }, {
      start: 442,
      length: 1,
      convRule: rule14
  }, {
      start: 443,
      length: 1,
      convRule: rule45
  }, {
      start: 444,
      length: 1,
      convRule: rule21
  }, {
      start: 445,
      length: 1,
      convRule: rule22
  }, {
      start: 446,
      length: 1,
      convRule: rule14
  }, {
      start: 447,
      length: 1,
      convRule: rule46
  }, {
      start: 448,
      length: 4,
      convRule: rule45
  }, {
      start: 452,
      length: 1,
      convRule: rule47
  }, {
      start: 453,
      length: 1,
      convRule: rule48
  }, {
      start: 454,
      length: 1,
      convRule: rule49
  }, {
      start: 455,
      length: 1,
      convRule: rule47
  }, {
      start: 456,
      length: 1,
      convRule: rule48
  }, {
      start: 457,
      length: 1,
      convRule: rule49
  }, {
      start: 458,
      length: 1,
      convRule: rule47
  }, {
      start: 459,
      length: 1,
      convRule: rule48
  }, {
      start: 460,
      length: 1,
      convRule: rule49
  }, {
      start: 461,
      length: 1,
      convRule: rule21
  }, {
      start: 462,
      length: 1,
      convRule: rule22
  }, {
      start: 463,
      length: 1,
      convRule: rule21
  }, {
      start: 464,
      length: 1,
      convRule: rule22
  }, {
      start: 465,
      length: 1,
      convRule: rule21
  }, {
      start: 466,
      length: 1,
      convRule: rule22
  }, {
      start: 467,
      length: 1,
      convRule: rule21
  }, {
      start: 468,
      length: 1,
      convRule: rule22
  }, {
      start: 469,
      length: 1,
      convRule: rule21
  }, {
      start: 470,
      length: 1,
      convRule: rule22
  }, {
      start: 471,
      length: 1,
      convRule: rule21
  }, {
      start: 472,
      length: 1,
      convRule: rule22
  }, {
      start: 473,
      length: 1,
      convRule: rule21
  }, {
      start: 474,
      length: 1,
      convRule: rule22
  }, {
      start: 475,
      length: 1,
      convRule: rule21
  }, {
      start: 476,
      length: 1,
      convRule: rule22
  }, {
      start: 477,
      length: 1,
      convRule: rule50
  }, {
      start: 478,
      length: 1,
      convRule: rule21
  }, {
      start: 479,
      length: 1,
      convRule: rule22
  }, {
      start: 480,
      length: 1,
      convRule: rule21
  }, {
      start: 481,
      length: 1,
      convRule: rule22
  }, {
      start: 482,
      length: 1,
      convRule: rule21
  }, {
      start: 483,
      length: 1,
      convRule: rule22
  }, {
      start: 484,
      length: 1,
      convRule: rule21
  }, {
      start: 485,
      length: 1,
      convRule: rule22
  }, {
      start: 486,
      length: 1,
      convRule: rule21
  }, {
      start: 487,
      length: 1,
      convRule: rule22
  }, {
      start: 488,
      length: 1,
      convRule: rule21
  }, {
      start: 489,
      length: 1,
      convRule: rule22
  }, {
      start: 490,
      length: 1,
      convRule: rule21
  }, {
      start: 491,
      length: 1,
      convRule: rule22
  }, {
      start: 492,
      length: 1,
      convRule: rule21
  }, {
      start: 493,
      length: 1,
      convRule: rule22
  }, {
      start: 494,
      length: 1,
      convRule: rule21
  }, {
      start: 495,
      length: 1,
      convRule: rule22
  }, {
      start: 496,
      length: 1,
      convRule: rule14
  }, {
      start: 497,
      length: 1,
      convRule: rule47
  }, {
      start: 498,
      length: 1,
      convRule: rule48
  }, {
      start: 499,
      length: 1,
      convRule: rule49
  }, {
      start: 500,
      length: 1,
      convRule: rule21
  }, {
      start: 501,
      length: 1,
      convRule: rule22
  }, {
      start: 502,
      length: 1,
      convRule: rule51
  }, {
      start: 503,
      length: 1,
      convRule: rule52
  }, {
      start: 504,
      length: 1,
      convRule: rule21
  }, {
      start: 505,
      length: 1,
      convRule: rule22
  }, {
      start: 506,
      length: 1,
      convRule: rule21
  }, {
      start: 507,
      length: 1,
      convRule: rule22
  }, {
      start: 508,
      length: 1,
      convRule: rule21
  }, {
      start: 509,
      length: 1,
      convRule: rule22
  }, {
      start: 510,
      length: 1,
      convRule: rule21
  }, {
      start: 511,
      length: 1,
      convRule: rule22
  }, {
      start: 512,
      length: 1,
      convRule: rule21
  }, {
      start: 513,
      length: 1,
      convRule: rule22
  }, {
      start: 514,
      length: 1,
      convRule: rule21
  }, {
      start: 515,
      length: 1,
      convRule: rule22
  }, {
      start: 516,
      length: 1,
      convRule: rule21
  }, {
      start: 517,
      length: 1,
      convRule: rule22
  }, {
      start: 518,
      length: 1,
      convRule: rule21
  }, {
      start: 519,
      length: 1,
      convRule: rule22
  }, {
      start: 520,
      length: 1,
      convRule: rule21
  }, {
      start: 521,
      length: 1,
      convRule: rule22
  }, {
      start: 522,
      length: 1,
      convRule: rule21
  }, {
      start: 523,
      length: 1,
      convRule: rule22
  }, {
      start: 524,
      length: 1,
      convRule: rule21
  }, {
      start: 525,
      length: 1,
      convRule: rule22
  }, {
      start: 526,
      length: 1,
      convRule: rule21
  }, {
      start: 527,
      length: 1,
      convRule: rule22
  }, {
      start: 528,
      length: 1,
      convRule: rule21
  }, {
      start: 529,
      length: 1,
      convRule: rule22
  }, {
      start: 530,
      length: 1,
      convRule: rule21
  }, {
      start: 531,
      length: 1,
      convRule: rule22
  }, {
      start: 532,
      length: 1,
      convRule: rule21
  }, {
      start: 533,
      length: 1,
      convRule: rule22
  }, {
      start: 534,
      length: 1,
      convRule: rule21
  }, {
      start: 535,
      length: 1,
      convRule: rule22
  }, {
      start: 536,
      length: 1,
      convRule: rule21
  }, {
      start: 537,
      length: 1,
      convRule: rule22
  }, {
      start: 538,
      length: 1,
      convRule: rule21
  }, {
      start: 539,
      length: 1,
      convRule: rule22
  }, {
      start: 540,
      length: 1,
      convRule: rule21
  }, {
      start: 541,
      length: 1,
      convRule: rule22
  }, {
      start: 542,
      length: 1,
      convRule: rule21
  }, {
      start: 543,
      length: 1,
      convRule: rule22
  }, {
      start: 544,
      length: 1,
      convRule: rule53
  }, {
      start: 545,
      length: 1,
      convRule: rule14
  }, {
      start: 546,
      length: 1,
      convRule: rule21
  }, {
      start: 547,
      length: 1,
      convRule: rule22
  }, {
      start: 548,
      length: 1,
      convRule: rule21
  }, {
      start: 549,
      length: 1,
      convRule: rule22
  }, {
      start: 550,
      length: 1,
      convRule: rule21
  }, {
      start: 551,
      length: 1,
      convRule: rule22
  }, {
      start: 552,
      length: 1,
      convRule: rule21
  }, {
      start: 553,
      length: 1,
      convRule: rule22
  }, {
      start: 554,
      length: 1,
      convRule: rule21
  }, {
      start: 555,
      length: 1,
      convRule: rule22
  }, {
      start: 556,
      length: 1,
      convRule: rule21
  }, {
      start: 557,
      length: 1,
      convRule: rule22
  }, {
      start: 558,
      length: 1,
      convRule: rule21
  }, {
      start: 559,
      length: 1,
      convRule: rule22
  }, {
      start: 560,
      length: 1,
      convRule: rule21
  }, {
      start: 561,
      length: 1,
      convRule: rule22
  }, {
      start: 562,
      length: 1,
      convRule: rule21
  }, {
      start: 563,
      length: 1,
      convRule: rule22
  }, {
      start: 564,
      length: 6,
      convRule: rule14
  }, {
      start: 570,
      length: 1,
      convRule: rule54
  }, {
      start: 571,
      length: 1,
      convRule: rule21
  }, {
      start: 572,
      length: 1,
      convRule: rule22
  }, {
      start: 573,
      length: 1,
      convRule: rule55
  }, {
      start: 574,
      length: 1,
      convRule: rule56
  }, {
      start: 575,
      length: 2,
      convRule: rule57
  }, {
      start: 577,
      length: 1,
      convRule: rule21
  }, {
      start: 578,
      length: 1,
      convRule: rule22
  }, {
      start: 579,
      length: 1,
      convRule: rule58
  }, {
      start: 580,
      length: 1,
      convRule: rule59
  }, {
      start: 581,
      length: 1,
      convRule: rule60
  }, {
      start: 582,
      length: 1,
      convRule: rule21
  }, {
      start: 583,
      length: 1,
      convRule: rule22
  }, {
      start: 584,
      length: 1,
      convRule: rule21
  }, {
      start: 585,
      length: 1,
      convRule: rule22
  }, {
      start: 586,
      length: 1,
      convRule: rule21
  }, {
      start: 587,
      length: 1,
      convRule: rule22
  }, {
      start: 588,
      length: 1,
      convRule: rule21
  }, {
      start: 589,
      length: 1,
      convRule: rule22
  }, {
      start: 590,
      length: 1,
      convRule: rule21
  }, {
      start: 591,
      length: 1,
      convRule: rule22
  }, {
      start: 592,
      length: 1,
      convRule: rule61
  }, {
      start: 593,
      length: 1,
      convRule: rule62
  }, {
      start: 594,
      length: 1,
      convRule: rule63
  }, {
      start: 595,
      length: 1,
      convRule: rule64
  }, {
      start: 596,
      length: 1,
      convRule: rule65
  }, {
      start: 597,
      length: 1,
      convRule: rule14
  }, {
      start: 598,
      length: 2,
      convRule: rule66
  }, {
      start: 600,
      length: 1,
      convRule: rule14
  }, {
      start: 601,
      length: 1,
      convRule: rule67
  }, {
      start: 602,
      length: 1,
      convRule: rule14
  }, {
      start: 603,
      length: 1,
      convRule: rule68
  }, {
      start: 604,
      length: 4,
      convRule: rule14
  }, {
      start: 608,
      length: 1,
      convRule: rule66
  }, {
      start: 609,
      length: 2,
      convRule: rule14
  }, {
      start: 611,
      length: 1,
      convRule: rule69
  }, {
      start: 612,
      length: 1,
      convRule: rule14
  }, {
      start: 613,
      length: 1,
      convRule: rule70
  }, {
      start: 614,
      length: 2,
      convRule: rule14
  }, {
      start: 616,
      length: 1,
      convRule: rule71
  }, {
      start: 617,
      length: 1,
      convRule: rule72
  }, {
      start: 618,
      length: 1,
      convRule: rule14
  }, {
      start: 619,
      length: 1,
      convRule: rule73
  }, {
      start: 620,
      length: 3,
      convRule: rule14
  }, {
      start: 623,
      length: 1,
      convRule: rule72
  }, {
      start: 624,
      length: 1,
      convRule: rule14
  }, {
      start: 625,
      length: 1,
      convRule: rule74
  }, {
      start: 626,
      length: 1,
      convRule: rule75
  }, {
      start: 627,
      length: 2,
      convRule: rule14
  }, {
      start: 629,
      length: 1,
      convRule: rule76
  }, {
      start: 630,
      length: 7,
      convRule: rule14
  }, {
      start: 637,
      length: 1,
      convRule: rule77
  }, {
      start: 638,
      length: 2,
      convRule: rule14
  }, {
      start: 640,
      length: 1,
      convRule: rule78
  }, {
      start: 641,
      length: 2,
      convRule: rule14
  }, {
      start: 643,
      length: 1,
      convRule: rule78
  }, {
      start: 644,
      length: 4,
      convRule: rule14
  }, {
      start: 648,
      length: 1,
      convRule: rule78
  }, {
      start: 649,
      length: 1,
      convRule: rule79
  }, {
      start: 650,
      length: 2,
      convRule: rule80
  }, {
      start: 652,
      length: 1,
      convRule: rule81
  }, {
      start: 653,
      length: 5,
      convRule: rule14
  }, {
      start: 658,
      length: 1,
      convRule: rule82
  }, {
      start: 659,
      length: 1,
      convRule: rule14
  }, {
      start: 660,
      length: 1,
      convRule: rule45
  }, {
      start: 661,
      length: 27,
      convRule: rule14
  }, {
      start: 688,
      length: 18,
      convRule: rule83
  }, {
      start: 706,
      length: 4,
      convRule: rule10
  }, {
      start: 710,
      length: 12,
      convRule: rule83
  }, {
      start: 722,
      length: 14,
      convRule: rule10
  }, {
      start: 736,
      length: 5,
      convRule: rule83
  }, {
      start: 741,
      length: 7,
      convRule: rule10
  }, {
      start: 748,
      length: 1,
      convRule: rule83
  }, {
      start: 749,
      length: 1,
      convRule: rule10
  }, {
      start: 750,
      length: 1,
      convRule: rule83
  }, {
      start: 751,
      length: 17,
      convRule: rule10
  }, {
      start: 768,
      length: 69,
      convRule: rule84
  }, {
      start: 837,
      length: 1,
      convRule: rule85
  }, {
      start: 838,
      length: 42,
      convRule: rule84
  }, {
      start: 880,
      length: 1,
      convRule: rule21
  }, {
      start: 881,
      length: 1,
      convRule: rule22
  }, {
      start: 882,
      length: 1,
      convRule: rule21
  }, {
      start: 883,
      length: 1,
      convRule: rule22
  }, {
      start: 884,
      length: 1,
      convRule: rule83
  }, {
      start: 885,
      length: 1,
      convRule: rule10
  }, {
      start: 886,
      length: 1,
      convRule: rule21
  }, {
      start: 887,
      length: 1,
      convRule: rule22
  }, {
      start: 890,
      length: 1,
      convRule: rule83
  }, {
      start: 891,
      length: 3,
      convRule: rule40
  }, {
      start: 894,
      length: 1,
      convRule: rule2
  }, {
      start: 900,
      length: 2,
      convRule: rule10
  }, {
      start: 902,
      length: 1,
      convRule: rule86
  }, {
      start: 903,
      length: 1,
      convRule: rule2
  }, {
      start: 904,
      length: 3,
      convRule: rule87
  }, {
      start: 908,
      length: 1,
      convRule: rule88
  }, {
      start: 910,
      length: 2,
      convRule: rule89
  }, {
      start: 912,
      length: 1,
      convRule: rule14
  }, {
      start: 913,
      length: 17,
      convRule: rule9
  }, {
      start: 931,
      length: 9,
      convRule: rule9
  }, {
      start: 940,
      length: 1,
      convRule: rule90
  }, {
      start: 941,
      length: 3,
      convRule: rule91
  }, {
      start: 944,
      length: 1,
      convRule: rule14
  }, {
      start: 945,
      length: 17,
      convRule: rule12
  }, {
      start: 962,
      length: 1,
      convRule: rule92
  }, {
      start: 963,
      length: 9,
      convRule: rule12
  }, {
      start: 972,
      length: 1,
      convRule: rule93
  }, {
      start: 973,
      length: 2,
      convRule: rule94
  }, {
      start: 975,
      length: 1,
      convRule: rule95
  }, {
      start: 976,
      length: 1,
      convRule: rule96
  }, {
      start: 977,
      length: 1,
      convRule: rule97
  }, {
      start: 978,
      length: 3,
      convRule: rule98
  }, {
      start: 981,
      length: 1,
      convRule: rule99
  }, {
      start: 982,
      length: 1,
      convRule: rule100
  }, {
      start: 983,
      length: 1,
      convRule: rule101
  }, {
      start: 984,
      length: 1,
      convRule: rule21
  }, {
      start: 985,
      length: 1,
      convRule: rule22
  }, {
      start: 986,
      length: 1,
      convRule: rule21
  }, {
      start: 987,
      length: 1,
      convRule: rule22
  }, {
      start: 988,
      length: 1,
      convRule: rule21
  }, {
      start: 989,
      length: 1,
      convRule: rule22
  }, {
      start: 990,
      length: 1,
      convRule: rule21
  }, {
      start: 991,
      length: 1,
      convRule: rule22
  }, {
      start: 992,
      length: 1,
      convRule: rule21
  }, {
      start: 993,
      length: 1,
      convRule: rule22
  }, {
      start: 994,
      length: 1,
      convRule: rule21
  }, {
      start: 995,
      length: 1,
      convRule: rule22
  }, {
      start: 996,
      length: 1,
      convRule: rule21
  }, {
      start: 997,
      length: 1,
      convRule: rule22
  }, {
      start: 998,
      length: 1,
      convRule: rule21
  }, {
      start: 999,
      length: 1,
      convRule: rule22
  }, {
      start: 1000,
      length: 1,
      convRule: rule21
  }, {
      start: 1001,
      length: 1,
      convRule: rule22
  }, {
      start: 1002,
      length: 1,
      convRule: rule21
  }, {
      start: 1003,
      length: 1,
      convRule: rule22
  }, {
      start: 1004,
      length: 1,
      convRule: rule21
  }, {
      start: 1005,
      length: 1,
      convRule: rule22
  }, {
      start: 1006,
      length: 1,
      convRule: rule21
  }, {
      start: 1007,
      length: 1,
      convRule: rule22
  }, {
      start: 1008,
      length: 1,
      convRule: rule102
  }, {
      start: 1009,
      length: 1,
      convRule: rule103
  }, {
      start: 1010,
      length: 1,
      convRule: rule104
  }, {
      start: 1011,
      length: 1,
      convRule: rule14
  }, {
      start: 1012,
      length: 1,
      convRule: rule105
  }, {
      start: 1013,
      length: 1,
      convRule: rule106
  }, {
      start: 1014,
      length: 1,
      convRule: rule6
  }, {
      start: 1015,
      length: 1,
      convRule: rule21
  }, {
      start: 1016,
      length: 1,
      convRule: rule22
  }, {
      start: 1017,
      length: 1,
      convRule: rule107
  }, {
      start: 1018,
      length: 1,
      convRule: rule21
  }, {
      start: 1019,
      length: 1,
      convRule: rule22
  }, {
      start: 1020,
      length: 1,
      convRule: rule14
  }, {
      start: 1021,
      length: 3,
      convRule: rule53
  }, {
      start: 1024,
      length: 16,
      convRule: rule108
  }, {
      start: 1040,
      length: 32,
      convRule: rule9
  }, {
      start: 1072,
      length: 32,
      convRule: rule12
  }, {
      start: 1104,
      length: 16,
      convRule: rule103
  }, {
      start: 1120,
      length: 1,
      convRule: rule21
  }, {
      start: 1121,
      length: 1,
      convRule: rule22
  }, {
      start: 1122,
      length: 1,
      convRule: rule21
  }, {
      start: 1123,
      length: 1,
      convRule: rule22
  }, {
      start: 1124,
      length: 1,
      convRule: rule21
  }, {
      start: 1125,
      length: 1,
      convRule: rule22
  }, {
      start: 1126,
      length: 1,
      convRule: rule21
  }, {
      start: 1127,
      length: 1,
      convRule: rule22
  }, {
      start: 1128,
      length: 1,
      convRule: rule21
  }, {
      start: 1129,
      length: 1,
      convRule: rule22
  }, {
      start: 1130,
      length: 1,
      convRule: rule21
  }, {
      start: 1131,
      length: 1,
      convRule: rule22
  }, {
      start: 1132,
      length: 1,
      convRule: rule21
  }, {
      start: 1133,
      length: 1,
      convRule: rule22
  }, {
      start: 1134,
      length: 1,
      convRule: rule21
  }, {
      start: 1135,
      length: 1,
      convRule: rule22
  }, {
      start: 1136,
      length: 1,
      convRule: rule21
  }, {
      start: 1137,
      length: 1,
      convRule: rule22
  }, {
      start: 1138,
      length: 1,
      convRule: rule21
  }, {
      start: 1139,
      length: 1,
      convRule: rule22
  }, {
      start: 1140,
      length: 1,
      convRule: rule21
  }, {
      start: 1141,
      length: 1,
      convRule: rule22
  }, {
      start: 1142,
      length: 1,
      convRule: rule21
  }, {
      start: 1143,
      length: 1,
      convRule: rule22
  }, {
      start: 1144,
      length: 1,
      convRule: rule21
  }, {
      start: 1145,
      length: 1,
      convRule: rule22
  }, {
      start: 1146,
      length: 1,
      convRule: rule21
  }, {
      start: 1147,
      length: 1,
      convRule: rule22
  }, {
      start: 1148,
      length: 1,
      convRule: rule21
  }, {
      start: 1149,
      length: 1,
      convRule: rule22
  }, {
      start: 1150,
      length: 1,
      convRule: rule21
  }, {
      start: 1151,
      length: 1,
      convRule: rule22
  }, {
      start: 1152,
      length: 1,
      convRule: rule21
  }, {
      start: 1153,
      length: 1,
      convRule: rule22
  }, {
      start: 1154,
      length: 1,
      convRule: rule13
  }, {
      start: 1155,
      length: 5,
      convRule: rule84
  }, {
      start: 1160,
      length: 2,
      convRule: rule109
  }, {
      start: 1162,
      length: 1,
      convRule: rule21
  }, {
      start: 1163,
      length: 1,
      convRule: rule22
  }, {
      start: 1164,
      length: 1,
      convRule: rule21
  }, {
      start: 1165,
      length: 1,
      convRule: rule22
  }, {
      start: 1166,
      length: 1,
      convRule: rule21
  }, {
      start: 1167,
      length: 1,
      convRule: rule22
  }, {
      start: 1168,
      length: 1,
      convRule: rule21
  }, {
      start: 1169,
      length: 1,
      convRule: rule22
  }, {
      start: 1170,
      length: 1,
      convRule: rule21
  }, {
      start: 1171,
      length: 1,
      convRule: rule22
  }, {
      start: 1172,
      length: 1,
      convRule: rule21
  }, {
      start: 1173,
      length: 1,
      convRule: rule22
  }, {
      start: 1174,
      length: 1,
      convRule: rule21
  }, {
      start: 1175,
      length: 1,
      convRule: rule22
  }, {
      start: 1176,
      length: 1,
      convRule: rule21
  }, {
      start: 1177,
      length: 1,
      convRule: rule22
  }, {
      start: 1178,
      length: 1,
      convRule: rule21
  }, {
      start: 1179,
      length: 1,
      convRule: rule22
  }, {
      start: 1180,
      length: 1,
      convRule: rule21
  }, {
      start: 1181,
      length: 1,
      convRule: rule22
  }, {
      start: 1182,
      length: 1,
      convRule: rule21
  }, {
      start: 1183,
      length: 1,
      convRule: rule22
  }, {
      start: 1184,
      length: 1,
      convRule: rule21
  }, {
      start: 1185,
      length: 1,
      convRule: rule22
  }, {
      start: 1186,
      length: 1,
      convRule: rule21
  }, {
      start: 1187,
      length: 1,
      convRule: rule22
  }, {
      start: 1188,
      length: 1,
      convRule: rule21
  }, {
      start: 1189,
      length: 1,
      convRule: rule22
  }, {
      start: 1190,
      length: 1,
      convRule: rule21
  }, {
      start: 1191,
      length: 1,
      convRule: rule22
  }, {
      start: 1192,
      length: 1,
      convRule: rule21
  }, {
      start: 1193,
      length: 1,
      convRule: rule22
  }, {
      start: 1194,
      length: 1,
      convRule: rule21
  }, {
      start: 1195,
      length: 1,
      convRule: rule22
  }, {
      start: 1196,
      length: 1,
      convRule: rule21
  }, {
      start: 1197,
      length: 1,
      convRule: rule22
  }, {
      start: 1198,
      length: 1,
      convRule: rule21
  }, {
      start: 1199,
      length: 1,
      convRule: rule22
  }, {
      start: 1200,
      length: 1,
      convRule: rule21
  }, {
      start: 1201,
      length: 1,
      convRule: rule22
  }, {
      start: 1202,
      length: 1,
      convRule: rule21
  }, {
      start: 1203,
      length: 1,
      convRule: rule22
  }, {
      start: 1204,
      length: 1,
      convRule: rule21
  }, {
      start: 1205,
      length: 1,
      convRule: rule22
  }, {
      start: 1206,
      length: 1,
      convRule: rule21
  }, {
      start: 1207,
      length: 1,
      convRule: rule22
  }, {
      start: 1208,
      length: 1,
      convRule: rule21
  }, {
      start: 1209,
      length: 1,
      convRule: rule22
  }, {
      start: 1210,
      length: 1,
      convRule: rule21
  }, {
      start: 1211,
      length: 1,
      convRule: rule22
  }, {
      start: 1212,
      length: 1,
      convRule: rule21
  }, {
      start: 1213,
      length: 1,
      convRule: rule22
  }, {
      start: 1214,
      length: 1,
      convRule: rule21
  }, {
      start: 1215,
      length: 1,
      convRule: rule22
  }, {
      start: 1216,
      length: 1,
      convRule: rule110
  }, {
      start: 1217,
      length: 1,
      convRule: rule21
  }, {
      start: 1218,
      length: 1,
      convRule: rule22
  }, {
      start: 1219,
      length: 1,
      convRule: rule21
  }, {
      start: 1220,
      length: 1,
      convRule: rule22
  }, {
      start: 1221,
      length: 1,
      convRule: rule21
  }, {
      start: 1222,
      length: 1,
      convRule: rule22
  }, {
      start: 1223,
      length: 1,
      convRule: rule21
  }, {
      start: 1224,
      length: 1,
      convRule: rule22
  }, {
      start: 1225,
      length: 1,
      convRule: rule21
  }, {
      start: 1226,
      length: 1,
      convRule: rule22
  }, {
      start: 1227,
      length: 1,
      convRule: rule21
  }, {
      start: 1228,
      length: 1,
      convRule: rule22
  }, {
      start: 1229,
      length: 1,
      convRule: rule21
  }, {
      start: 1230,
      length: 1,
      convRule: rule22
  }, {
      start: 1231,
      length: 1,
      convRule: rule111
  }, {
      start: 1232,
      length: 1,
      convRule: rule21
  }, {
      start: 1233,
      length: 1,
      convRule: rule22
  }, {
      start: 1234,
      length: 1,
      convRule: rule21
  }, {
      start: 1235,
      length: 1,
      convRule: rule22
  }, {
      start: 1236,
      length: 1,
      convRule: rule21
  }, {
      start: 1237,
      length: 1,
      convRule: rule22
  }, {
      start: 1238,
      length: 1,
      convRule: rule21
  }, {
      start: 1239,
      length: 1,
      convRule: rule22
  }, {
      start: 1240,
      length: 1,
      convRule: rule21
  }, {
      start: 1241,
      length: 1,
      convRule: rule22
  }, {
      start: 1242,
      length: 1,
      convRule: rule21
  }, {
      start: 1243,
      length: 1,
      convRule: rule22
  }, {
      start: 1244,
      length: 1,
      convRule: rule21
  }, {
      start: 1245,
      length: 1,
      convRule: rule22
  }, {
      start: 1246,
      length: 1,
      convRule: rule21
  }, {
      start: 1247,
      length: 1,
      convRule: rule22
  }, {
      start: 1248,
      length: 1,
      convRule: rule21
  }, {
      start: 1249,
      length: 1,
      convRule: rule22
  }, {
      start: 1250,
      length: 1,
      convRule: rule21
  }, {
      start: 1251,
      length: 1,
      convRule: rule22
  }, {
      start: 1252,
      length: 1,
      convRule: rule21
  }, {
      start: 1253,
      length: 1,
      convRule: rule22
  }, {
      start: 1254,
      length: 1,
      convRule: rule21
  }, {
      start: 1255,
      length: 1,
      convRule: rule22
  }, {
      start: 1256,
      length: 1,
      convRule: rule21
  }, {
      start: 1257,
      length: 1,
      convRule: rule22
  }, {
      start: 1258,
      length: 1,
      convRule: rule21
  }, {
      start: 1259,
      length: 1,
      convRule: rule22
  }, {
      start: 1260,
      length: 1,
      convRule: rule21
  }, {
      start: 1261,
      length: 1,
      convRule: rule22
  }, {
      start: 1262,
      length: 1,
      convRule: rule21
  }, {
      start: 1263,
      length: 1,
      convRule: rule22
  }, {
      start: 1264,
      length: 1,
      convRule: rule21
  }, {
      start: 1265,
      length: 1,
      convRule: rule22
  }, {
      start: 1266,
      length: 1,
      convRule: rule21
  }, {
      start: 1267,
      length: 1,
      convRule: rule22
  }, {
      start: 1268,
      length: 1,
      convRule: rule21
  }, {
      start: 1269,
      length: 1,
      convRule: rule22
  }, {
      start: 1270,
      length: 1,
      convRule: rule21
  }, {
      start: 1271,
      length: 1,
      convRule: rule22
  }, {
      start: 1272,
      length: 1,
      convRule: rule21
  }, {
      start: 1273,
      length: 1,
      convRule: rule22
  }, {
      start: 1274,
      length: 1,
      convRule: rule21
  }, {
      start: 1275,
      length: 1,
      convRule: rule22
  }, {
      start: 1276,
      length: 1,
      convRule: rule21
  }, {
      start: 1277,
      length: 1,
      convRule: rule22
  }, {
      start: 1278,
      length: 1,
      convRule: rule21
  }, {
      start: 1279,
      length: 1,
      convRule: rule22
  }, {
      start: 1280,
      length: 1,
      convRule: rule21
  }, {
      start: 1281,
      length: 1,
      convRule: rule22
  }, {
      start: 1282,
      length: 1,
      convRule: rule21
  }, {
      start: 1283,
      length: 1,
      convRule: rule22
  }, {
      start: 1284,
      length: 1,
      convRule: rule21
  }, {
      start: 1285,
      length: 1,
      convRule: rule22
  }, {
      start: 1286,
      length: 1,
      convRule: rule21
  }, {
      start: 1287,
      length: 1,
      convRule: rule22
  }, {
      start: 1288,
      length: 1,
      convRule: rule21
  }, {
      start: 1289,
      length: 1,
      convRule: rule22
  }, {
      start: 1290,
      length: 1,
      convRule: rule21
  }, {
      start: 1291,
      length: 1,
      convRule: rule22
  }, {
      start: 1292,
      length: 1,
      convRule: rule21
  }, {
      start: 1293,
      length: 1,
      convRule: rule22
  }, {
      start: 1294,
      length: 1,
      convRule: rule21
  }, {
      start: 1295,
      length: 1,
      convRule: rule22
  }, {
      start: 1296,
      length: 1,
      convRule: rule21
  }, {
      start: 1297,
      length: 1,
      convRule: rule22
  }, {
      start: 1298,
      length: 1,
      convRule: rule21
  }, {
      start: 1299,
      length: 1,
      convRule: rule22
  }, {
      start: 1300,
      length: 1,
      convRule: rule21
  }, {
      start: 1301,
      length: 1,
      convRule: rule22
  }, {
      start: 1302,
      length: 1,
      convRule: rule21
  }, {
      start: 1303,
      length: 1,
      convRule: rule22
  }, {
      start: 1304,
      length: 1,
      convRule: rule21
  }, {
      start: 1305,
      length: 1,
      convRule: rule22
  }, {
      start: 1306,
      length: 1,
      convRule: rule21
  }, {
      start: 1307,
      length: 1,
      convRule: rule22
  }, {
      start: 1308,
      length: 1,
      convRule: rule21
  }, {
      start: 1309,
      length: 1,
      convRule: rule22
  }, {
      start: 1310,
      length: 1,
      convRule: rule21
  }, {
      start: 1311,
      length: 1,
      convRule: rule22
  }, {
      start: 1312,
      length: 1,
      convRule: rule21
  }, {
      start: 1313,
      length: 1,
      convRule: rule22
  }, {
      start: 1314,
      length: 1,
      convRule: rule21
  }, {
      start: 1315,
      length: 1,
      convRule: rule22
  }, {
      start: 1316,
      length: 1,
      convRule: rule21
  }, {
      start: 1317,
      length: 1,
      convRule: rule22
  }, {
      start: 1318,
      length: 1,
      convRule: rule21
  }, {
      start: 1319,
      length: 1,
      convRule: rule22
  }, {
      start: 1329,
      length: 38,
      convRule: rule112
  }, {
      start: 1369,
      length: 1,
      convRule: rule83
  }, {
      start: 1370,
      length: 6,
      convRule: rule2
  }, {
      start: 1377,
      length: 38,
      convRule: rule113
  }, {
      start: 1415,
      length: 1,
      convRule: rule14
  }, {
      start: 1417,
      length: 1,
      convRule: rule2
  }, {
      start: 1418,
      length: 1,
      convRule: rule7
  }, {
      start: 1425,
      length: 45,
      convRule: rule84
  }, {
      start: 1470,
      length: 1,
      convRule: rule7
  }, {
      start: 1471,
      length: 1,
      convRule: rule84
  }, {
      start: 1472,
      length: 1,
      convRule: rule2
  }, {
      start: 1473,
      length: 2,
      convRule: rule84
  }, {
      start: 1475,
      length: 1,
      convRule: rule2
  }, {
      start: 1476,
      length: 2,
      convRule: rule84
  }, {
      start: 1478,
      length: 1,
      convRule: rule2
  }, {
      start: 1479,
      length: 1,
      convRule: rule84
  }, {
      start: 1488,
      length: 27,
      convRule: rule45
  }, {
      start: 1520,
      length: 3,
      convRule: rule45
  }, {
      start: 1523,
      length: 2,
      convRule: rule2
  }, {
      start: 1536,
      length: 4,
      convRule: rule16
  }, {
      start: 1542,
      length: 3,
      convRule: rule6
  }, {
      start: 1545,
      length: 2,
      convRule: rule2
  }, {
      start: 1547,
      length: 1,
      convRule: rule3
  }, {
      start: 1548,
      length: 2,
      convRule: rule2
  }, {
      start: 1550,
      length: 2,
      convRule: rule13
  }, {
      start: 1552,
      length: 11,
      convRule: rule84
  }, {
      start: 1563,
      length: 1,
      convRule: rule2
  }, {
      start: 1566,
      length: 2,
      convRule: rule2
  }, {
      start: 1568,
      length: 32,
      convRule: rule45
  }, {
      start: 1600,
      length: 1,
      convRule: rule83
  }, {
      start: 1601,
      length: 10,
      convRule: rule45
  }, {
      start: 1611,
      length: 21,
      convRule: rule84
  }, {
      start: 1632,
      length: 10,
      convRule: rule8
  }, {
      start: 1642,
      length: 4,
      convRule: rule2
  }, {
      start: 1646,
      length: 2,
      convRule: rule45
  }, {
      start: 1648,
      length: 1,
      convRule: rule84
  }, {
      start: 1649,
      length: 99,
      convRule: rule45
  }, {
      start: 1748,
      length: 1,
      convRule: rule2
  }, {
      start: 1749,
      length: 1,
      convRule: rule45
  }, {
      start: 1750,
      length: 7,
      convRule: rule84
  }, {
      start: 1757,
      length: 1,
      convRule: rule16
  }, {
      start: 1758,
      length: 1,
      convRule: rule13
  }, {
      start: 1759,
      length: 6,
      convRule: rule84
  }, {
      start: 1765,
      length: 2,
      convRule: rule83
  }, {
      start: 1767,
      length: 2,
      convRule: rule84
  }, {
      start: 1769,
      length: 1,
      convRule: rule13
  }, {
      start: 1770,
      length: 4,
      convRule: rule84
  }, {
      start: 1774,
      length: 2,
      convRule: rule45
  }, {
      start: 1776,
      length: 10,
      convRule: rule8
  }, {
      start: 1786,
      length: 3,
      convRule: rule45
  }, {
      start: 1789,
      length: 2,
      convRule: rule13
  }, {
      start: 1791,
      length: 1,
      convRule: rule45
  }, {
      start: 1792,
      length: 14,
      convRule: rule2
  }, {
      start: 1807,
      length: 1,
      convRule: rule16
  }, {
      start: 1808,
      length: 1,
      convRule: rule45
  }, {
      start: 1809,
      length: 1,
      convRule: rule84
  }, {
      start: 1810,
      length: 30,
      convRule: rule45
  }, {
      start: 1840,
      length: 27,
      convRule: rule84
  }, {
      start: 1869,
      length: 89,
      convRule: rule45
  }, {
      start: 1958,
      length: 11,
      convRule: rule84
  }, {
      start: 1969,
      length: 1,
      convRule: rule45
  }, {
      start: 1984,
      length: 10,
      convRule: rule8
  }, {
      start: 1994,
      length: 33,
      convRule: rule45
  }, {
      start: 2027,
      length: 9,
      convRule: rule84
  }, {
      start: 2036,
      length: 2,
      convRule: rule83
  }, {
      start: 2038,
      length: 1,
      convRule: rule13
  }, {
      start: 2039,
      length: 3,
      convRule: rule2
  }, {
      start: 2042,
      length: 1,
      convRule: rule83
  }, {
      start: 2048,
      length: 22,
      convRule: rule45
  }, {
      start: 2070,
      length: 4,
      convRule: rule84
  }, {
      start: 2074,
      length: 1,
      convRule: rule83
  }, {
      start: 2075,
      length: 9,
      convRule: rule84
  }, {
      start: 2084,
      length: 1,
      convRule: rule83
  }, {
      start: 2085,
      length: 3,
      convRule: rule84
  }, {
      start: 2088,
      length: 1,
      convRule: rule83
  }, {
      start: 2089,
      length: 5,
      convRule: rule84
  }, {
      start: 2096,
      length: 15,
      convRule: rule2
  }, {
      start: 2112,
      length: 25,
      convRule: rule45
  }, {
      start: 2137,
      length: 3,
      convRule: rule84
  }, {
      start: 2142,
      length: 1,
      convRule: rule2
  }, {
      start: 2304,
      length: 3,
      convRule: rule84
  }, {
      start: 2307,
      length: 1,
      convRule: rule114
  }, {
      start: 2308,
      length: 54,
      convRule: rule45
  }, {
      start: 2362,
      length: 1,
      convRule: rule84
  }, {
      start: 2363,
      length: 1,
      convRule: rule114
  }, {
      start: 2364,
      length: 1,
      convRule: rule84
  }, {
      start: 2365,
      length: 1,
      convRule: rule45
  }, {
      start: 2366,
      length: 3,
      convRule: rule114
  }, {
      start: 2369,
      length: 8,
      convRule: rule84
  }, {
      start: 2377,
      length: 4,
      convRule: rule114
  }, {
      start: 2381,
      length: 1,
      convRule: rule84
  }, {
      start: 2382,
      length: 2,
      convRule: rule114
  }, {
      start: 2384,
      length: 1,
      convRule: rule45
  }, {
      start: 2385,
      length: 7,
      convRule: rule84
  }, {
      start: 2392,
      length: 10,
      convRule: rule45
  }, {
      start: 2402,
      length: 2,
      convRule: rule84
  }, {
      start: 2404,
      length: 2,
      convRule: rule2
  }, {
      start: 2406,
      length: 10,
      convRule: rule8
  }, {
      start: 2416,
      length: 1,
      convRule: rule2
  }, {
      start: 2417,
      length: 1,
      convRule: rule83
  }, {
      start: 2418,
      length: 6,
      convRule: rule45
  }, {
      start: 2425,
      length: 7,
      convRule: rule45
  }, {
      start: 2433,
      length: 1,
      convRule: rule84
  }, {
      start: 2434,
      length: 2,
      convRule: rule114
  }, {
      start: 2437,
      length: 8,
      convRule: rule45
  }, {
      start: 2447,
      length: 2,
      convRule: rule45
  }, {
      start: 2451,
      length: 22,
      convRule: rule45
  }, {
      start: 2474,
      length: 7,
      convRule: rule45
  }, {
      start: 2482,
      length: 1,
      convRule: rule45
  }, {
      start: 2486,
      length: 4,
      convRule: rule45
  }, {
      start: 2492,
      length: 1,
      convRule: rule84
  }, {
      start: 2493,
      length: 1,
      convRule: rule45
  }, {
      start: 2494,
      length: 3,
      convRule: rule114
  }, {
      start: 2497,
      length: 4,
      convRule: rule84
  }, {
      start: 2503,
      length: 2,
      convRule: rule114
  }, {
      start: 2507,
      length: 2,
      convRule: rule114
  }, {
      start: 2509,
      length: 1,
      convRule: rule84
  }, {
      start: 2510,
      length: 1,
      convRule: rule45
  }, {
      start: 2519,
      length: 1,
      convRule: rule114
  }, {
      start: 2524,
      length: 2,
      convRule: rule45
  }, {
      start: 2527,
      length: 3,
      convRule: rule45
  }, {
      start: 2530,
      length: 2,
      convRule: rule84
  }, {
      start: 2534,
      length: 10,
      convRule: rule8
  }, {
      start: 2544,
      length: 2,
      convRule: rule45
  }, {
      start: 2546,
      length: 2,
      convRule: rule3
  }, {
      start: 2548,
      length: 6,
      convRule: rule17
  }, {
      start: 2554,
      length: 1,
      convRule: rule13
  }, {
      start: 2555,
      length: 1,
      convRule: rule3
  }, {
      start: 2561,
      length: 2,
      convRule: rule84
  }, {
      start: 2563,
      length: 1,
      convRule: rule114
  }, {
      start: 2565,
      length: 6,
      convRule: rule45
  }, {
      start: 2575,
      length: 2,
      convRule: rule45
  }, {
      start: 2579,
      length: 22,
      convRule: rule45
  }, {
      start: 2602,
      length: 7,
      convRule: rule45
  }, {
      start: 2610,
      length: 2,
      convRule: rule45
  }, {
      start: 2613,
      length: 2,
      convRule: rule45
  }, {
      start: 2616,
      length: 2,
      convRule: rule45
  }, {
      start: 2620,
      length: 1,
      convRule: rule84
  }, {
      start: 2622,
      length: 3,
      convRule: rule114
  }, {
      start: 2625,
      length: 2,
      convRule: rule84
  }, {
      start: 2631,
      length: 2,
      convRule: rule84
  }, {
      start: 2635,
      length: 3,
      convRule: rule84
  }, {
      start: 2641,
      length: 1,
      convRule: rule84
  }, {
      start: 2649,
      length: 4,
      convRule: rule45
  }, {
      start: 2654,
      length: 1,
      convRule: rule45
  }, {
      start: 2662,
      length: 10,
      convRule: rule8
  }, {
      start: 2672,
      length: 2,
      convRule: rule84
  }, {
      start: 2674,
      length: 3,
      convRule: rule45
  }, {
      start: 2677,
      length: 1,
      convRule: rule84
  }, {
      start: 2689,
      length: 2,
      convRule: rule84
  }, {
      start: 2691,
      length: 1,
      convRule: rule114
  }, {
      start: 2693,
      length: 9,
      convRule: rule45
  }, {
      start: 2703,
      length: 3,
      convRule: rule45
  }, {
      start: 2707,
      length: 22,
      convRule: rule45
  }, {
      start: 2730,
      length: 7,
      convRule: rule45
  }, {
      start: 2738,
      length: 2,
      convRule: rule45
  }, {
      start: 2741,
      length: 5,
      convRule: rule45
  }, {
      start: 2748,
      length: 1,
      convRule: rule84
  }, {
      start: 2749,
      length: 1,
      convRule: rule45
  }, {
      start: 2750,
      length: 3,
      convRule: rule114
  }, {
      start: 2753,
      length: 5,
      convRule: rule84
  }, {
      start: 2759,
      length: 2,
      convRule: rule84
  }, {
      start: 2761,
      length: 1,
      convRule: rule114
  }, {
      start: 2763,
      length: 2,
      convRule: rule114
  }, {
      start: 2765,
      length: 1,
      convRule: rule84
  }, {
      start: 2768,
      length: 1,
      convRule: rule45
  }, {
      start: 2784,
      length: 2,
      convRule: rule45
  }, {
      start: 2786,
      length: 2,
      convRule: rule84
  }, {
      start: 2790,
      length: 10,
      convRule: rule8
  }, {
      start: 2801,
      length: 1,
      convRule: rule3
  }, {
      start: 2817,
      length: 1,
      convRule: rule84
  }, {
      start: 2818,
      length: 2,
      convRule: rule114
  }, {
      start: 2821,
      length: 8,
      convRule: rule45
  }, {
      start: 2831,
      length: 2,
      convRule: rule45
  }, {
      start: 2835,
      length: 22,
      convRule: rule45
  }, {
      start: 2858,
      length: 7,
      convRule: rule45
  }, {
      start: 2866,
      length: 2,
      convRule: rule45
  }, {
      start: 2869,
      length: 5,
      convRule: rule45
  }, {
      start: 2876,
      length: 1,
      convRule: rule84
  }, {
      start: 2877,
      length: 1,
      convRule: rule45
  }, {
      start: 2878,
      length: 1,
      convRule: rule114
  }, {
      start: 2879,
      length: 1,
      convRule: rule84
  }, {
      start: 2880,
      length: 1,
      convRule: rule114
  }, {
      start: 2881,
      length: 4,
      convRule: rule84
  }, {
      start: 2887,
      length: 2,
      convRule: rule114
  }, {
      start: 2891,
      length: 2,
      convRule: rule114
  }, {
      start: 2893,
      length: 1,
      convRule: rule84
  }, {
      start: 2902,
      length: 1,
      convRule: rule84
  }, {
      start: 2903,
      length: 1,
      convRule: rule114
  }, {
      start: 2908,
      length: 2,
      convRule: rule45
  }, {
      start: 2911,
      length: 3,
      convRule: rule45
  }, {
      start: 2914,
      length: 2,
      convRule: rule84
  }, {
      start: 2918,
      length: 10,
      convRule: rule8
  }, {
      start: 2928,
      length: 1,
      convRule: rule13
  }, {
      start: 2929,
      length: 1,
      convRule: rule45
  }, {
      start: 2930,
      length: 6,
      convRule: rule17
  }, {
      start: 2946,
      length: 1,
      convRule: rule84
  }, {
      start: 2947,
      length: 1,
      convRule: rule45
  }, {
      start: 2949,
      length: 6,
      convRule: rule45
  }, {
      start: 2958,
      length: 3,
      convRule: rule45
  }, {
      start: 2962,
      length: 4,
      convRule: rule45
  }, {
      start: 2969,
      length: 2,
      convRule: rule45
  }, {
      start: 2972,
      length: 1,
      convRule: rule45
  }, {
      start: 2974,
      length: 2,
      convRule: rule45
  }, {
      start: 2979,
      length: 2,
      convRule: rule45
  }, {
      start: 2984,
      length: 3,
      convRule: rule45
  }, {
      start: 2990,
      length: 12,
      convRule: rule45
  }, {
      start: 3006,
      length: 2,
      convRule: rule114
  }, {
      start: 3008,
      length: 1,
      convRule: rule84
  }, {
      start: 3009,
      length: 2,
      convRule: rule114
  }, {
      start: 3014,
      length: 3,
      convRule: rule114
  }, {
      start: 3018,
      length: 3,
      convRule: rule114
  }, {
      start: 3021,
      length: 1,
      convRule: rule84
  }, {
      start: 3024,
      length: 1,
      convRule: rule45
  }, {
      start: 3031,
      length: 1,
      convRule: rule114
  }, {
      start: 3046,
      length: 10,
      convRule: rule8
  }, {
      start: 3056,
      length: 3,
      convRule: rule17
  }, {
      start: 3059,
      length: 6,
      convRule: rule13
  }, {
      start: 3065,
      length: 1,
      convRule: rule3
  }, {
      start: 3066,
      length: 1,
      convRule: rule13
  }, {
      start: 3073,
      length: 3,
      convRule: rule114
  }, {
      start: 3077,
      length: 8,
      convRule: rule45
  }, {
      start: 3086,
      length: 3,
      convRule: rule45
  }, {
      start: 3090,
      length: 23,
      convRule: rule45
  }, {
      start: 3114,
      length: 10,
      convRule: rule45
  }, {
      start: 3125,
      length: 5,
      convRule: rule45
  }, {
      start: 3133,
      length: 1,
      convRule: rule45
  }, {
      start: 3134,
      length: 3,
      convRule: rule84
  }, {
      start: 3137,
      length: 4,
      convRule: rule114
  }, {
      start: 3142,
      length: 3,
      convRule: rule84
  }, {
      start: 3146,
      length: 4,
      convRule: rule84
  }, {
      start: 3157,
      length: 2,
      convRule: rule84
  }, {
      start: 3160,
      length: 2,
      convRule: rule45
  }, {
      start: 3168,
      length: 2,
      convRule: rule45
  }, {
      start: 3170,
      length: 2,
      convRule: rule84
  }, {
      start: 3174,
      length: 10,
      convRule: rule8
  }, {
      start: 3192,
      length: 7,
      convRule: rule17
  }, {
      start: 3199,
      length: 1,
      convRule: rule13
  }, {
      start: 3202,
      length: 2,
      convRule: rule114
  }, {
      start: 3205,
      length: 8,
      convRule: rule45
  }, {
      start: 3214,
      length: 3,
      convRule: rule45
  }, {
      start: 3218,
      length: 23,
      convRule: rule45
  }, {
      start: 3242,
      length: 10,
      convRule: rule45
  }, {
      start: 3253,
      length: 5,
      convRule: rule45
  }, {
      start: 3260,
      length: 1,
      convRule: rule84
  }, {
      start: 3261,
      length: 1,
      convRule: rule45
  }, {
      start: 3262,
      length: 1,
      convRule: rule114
  }, {
      start: 3263,
      length: 1,
      convRule: rule84
  }, {
      start: 3264,
      length: 5,
      convRule: rule114
  }, {
      start: 3270,
      length: 1,
      convRule: rule84
  }, {
      start: 3271,
      length: 2,
      convRule: rule114
  }, {
      start: 3274,
      length: 2,
      convRule: rule114
  }, {
      start: 3276,
      length: 2,
      convRule: rule84
  }, {
      start: 3285,
      length: 2,
      convRule: rule114
  }, {
      start: 3294,
      length: 1,
      convRule: rule45
  }, {
      start: 3296,
      length: 2,
      convRule: rule45
  }, {
      start: 3298,
      length: 2,
      convRule: rule84
  }, {
      start: 3302,
      length: 10,
      convRule: rule8
  }, {
      start: 3313,
      length: 2,
      convRule: rule45
  }, {
      start: 3330,
      length: 2,
      convRule: rule114
  }, {
      start: 3333,
      length: 8,
      convRule: rule45
  }, {
      start: 3342,
      length: 3,
      convRule: rule45
  }, {
      start: 3346,
      length: 41,
      convRule: rule45
  }, {
      start: 3389,
      length: 1,
      convRule: rule45
  }, {
      start: 3390,
      length: 3,
      convRule: rule114
  }, {
      start: 3393,
      length: 4,
      convRule: rule84
  }, {
      start: 3398,
      length: 3,
      convRule: rule114
  }, {
      start: 3402,
      length: 3,
      convRule: rule114
  }, {
      start: 3405,
      length: 1,
      convRule: rule84
  }, {
      start: 3406,
      length: 1,
      convRule: rule45
  }, {
      start: 3415,
      length: 1,
      convRule: rule114
  }, {
      start: 3424,
      length: 2,
      convRule: rule45
  }, {
      start: 3426,
      length: 2,
      convRule: rule84
  }, {
      start: 3430,
      length: 10,
      convRule: rule8
  }, {
      start: 3440,
      length: 6,
      convRule: rule17
  }, {
      start: 3449,
      length: 1,
      convRule: rule13
  }, {
      start: 3450,
      length: 6,
      convRule: rule45
  }, {
      start: 3458,
      length: 2,
      convRule: rule114
  }, {
      start: 3461,
      length: 18,
      convRule: rule45
  }, {
      start: 3482,
      length: 24,
      convRule: rule45
  }, {
      start: 3507,
      length: 9,
      convRule: rule45
  }, {
      start: 3517,
      length: 1,
      convRule: rule45
  }, {
      start: 3520,
      length: 7,
      convRule: rule45
  }, {
      start: 3530,
      length: 1,
      convRule: rule84
  }, {
      start: 3535,
      length: 3,
      convRule: rule114
  }, {
      start: 3538,
      length: 3,
      convRule: rule84
  }, {
      start: 3542,
      length: 1,
      convRule: rule84
  }, {
      start: 3544,
      length: 8,
      convRule: rule114
  }, {
      start: 3570,
      length: 2,
      convRule: rule114
  }, {
      start: 3572,
      length: 1,
      convRule: rule2
  }, {
      start: 3585,
      length: 48,
      convRule: rule45
  }, {
      start: 3633,
      length: 1,
      convRule: rule84
  }, {
      start: 3634,
      length: 2,
      convRule: rule45
  }, {
      start: 3636,
      length: 7,
      convRule: rule84
  }, {
      start: 3647,
      length: 1,
      convRule: rule3
  }, {
      start: 3648,
      length: 6,
      convRule: rule45
  }, {
      start: 3654,
      length: 1,
      convRule: rule83
  }, {
      start: 3655,
      length: 8,
      convRule: rule84
  }, {
      start: 3663,
      length: 1,
      convRule: rule2
  }, {
      start: 3664,
      length: 10,
      convRule: rule8
  }, {
      start: 3674,
      length: 2,
      convRule: rule2
  }, {
      start: 3713,
      length: 2,
      convRule: rule45
  }, {
      start: 3716,
      length: 1,
      convRule: rule45
  }, {
      start: 3719,
      length: 2,
      convRule: rule45
  }, {
      start: 3722,
      length: 1,
      convRule: rule45
  }, {
      start: 3725,
      length: 1,
      convRule: rule45
  }, {
      start: 3732,
      length: 4,
      convRule: rule45
  }, {
      start: 3737,
      length: 7,
      convRule: rule45
  }, {
      start: 3745,
      length: 3,
      convRule: rule45
  }, {
      start: 3749,
      length: 1,
      convRule: rule45
  }, {
      start: 3751,
      length: 1,
      convRule: rule45
  }, {
      start: 3754,
      length: 2,
      convRule: rule45
  }, {
      start: 3757,
      length: 4,
      convRule: rule45
  }, {
      start: 3761,
      length: 1,
      convRule: rule84
  }, {
      start: 3762,
      length: 2,
      convRule: rule45
  }, {
      start: 3764,
      length: 6,
      convRule: rule84
  }, {
      start: 3771,
      length: 2,
      convRule: rule84
  }, {
      start: 3773,
      length: 1,
      convRule: rule45
  }, {
      start: 3776,
      length: 5,
      convRule: rule45
  }, {
      start: 3782,
      length: 1,
      convRule: rule83
  }, {
      start: 3784,
      length: 6,
      convRule: rule84
  }, {
      start: 3792,
      length: 10,
      convRule: rule8
  }, {
      start: 3804,
      length: 2,
      convRule: rule45
  }, {
      start: 3840,
      length: 1,
      convRule: rule45
  }, {
      start: 3841,
      length: 3,
      convRule: rule13
  }, {
      start: 3844,
      length: 15,
      convRule: rule2
  }, {
      start: 3859,
      length: 5,
      convRule: rule13
  }, {
      start: 3864,
      length: 2,
      convRule: rule84
  }, {
      start: 3866,
      length: 6,
      convRule: rule13
  }, {
      start: 3872,
      length: 10,
      convRule: rule8
  }, {
      start: 3882,
      length: 10,
      convRule: rule17
  }, {
      start: 3892,
      length: 1,
      convRule: rule13
  }, {
      start: 3893,
      length: 1,
      convRule: rule84
  }, {
      start: 3894,
      length: 1,
      convRule: rule13
  }, {
      start: 3895,
      length: 1,
      convRule: rule84
  }, {
      start: 3896,
      length: 1,
      convRule: rule13
  }, {
      start: 3897,
      length: 1,
      convRule: rule84
  }, {
      start: 3898,
      length: 1,
      convRule: rule4
  }, {
      start: 3899,
      length: 1,
      convRule: rule5
  }, {
      start: 3900,
      length: 1,
      convRule: rule4
  }, {
      start: 3901,
      length: 1,
      convRule: rule5
  }, {
      start: 3902,
      length: 2,
      convRule: rule114
  }, {
      start: 3904,
      length: 8,
      convRule: rule45
  }, {
      start: 3913,
      length: 36,
      convRule: rule45
  }, {
      start: 3953,
      length: 14,
      convRule: rule84
  }, {
      start: 3967,
      length: 1,
      convRule: rule114
  }, {
      start: 3968,
      length: 5,
      convRule: rule84
  }, {
      start: 3973,
      length: 1,
      convRule: rule2
  }, {
      start: 3974,
      length: 2,
      convRule: rule84
  }, {
      start: 3976,
      length: 5,
      convRule: rule45
  }, {
      start: 3981,
      length: 11,
      convRule: rule84
  }, {
      start: 3993,
      length: 36,
      convRule: rule84
  }, {
      start: 4030,
      length: 8,
      convRule: rule13
  }, {
      start: 4038,
      length: 1,
      convRule: rule84
  }, {
      start: 4039,
      length: 6,
      convRule: rule13
  }, {
      start: 4046,
      length: 2,
      convRule: rule13
  }, {
      start: 4048,
      length: 5,
      convRule: rule2
  }, {
      start: 4053,
      length: 4,
      convRule: rule13
  }, {
      start: 4057,
      length: 2,
      convRule: rule2
  }, {
      start: 4096,
      length: 43,
      convRule: rule45
  }, {
      start: 4139,
      length: 2,
      convRule: rule114
  }, {
      start: 4141,
      length: 4,
      convRule: rule84
  }, {
      start: 4145,
      length: 1,
      convRule: rule114
  }, {
      start: 4146,
      length: 6,
      convRule: rule84
  }, {
      start: 4152,
      length: 1,
      convRule: rule114
  }, {
      start: 4153,
      length: 2,
      convRule: rule84
  }, {
      start: 4155,
      length: 2,
      convRule: rule114
  }, {
      start: 4157,
      length: 2,
      convRule: rule84
  }, {
      start: 4159,
      length: 1,
      convRule: rule45
  }, {
      start: 4160,
      length: 10,
      convRule: rule8
  }, {
      start: 4170,
      length: 6,
      convRule: rule2
  }, {
      start: 4176,
      length: 6,
      convRule: rule45
  }, {
      start: 4182,
      length: 2,
      convRule: rule114
  }, {
      start: 4184,
      length: 2,
      convRule: rule84
  }, {
      start: 4186,
      length: 4,
      convRule: rule45
  }, {
      start: 4190,
      length: 3,
      convRule: rule84
  }, {
      start: 4193,
      length: 1,
      convRule: rule45
  }, {
      start: 4194,
      length: 3,
      convRule: rule114
  }, {
      start: 4197,
      length: 2,
      convRule: rule45
  }, {
      start: 4199,
      length: 7,
      convRule: rule114
  }, {
      start: 4206,
      length: 3,
      convRule: rule45
  }, {
      start: 4209,
      length: 4,
      convRule: rule84
  }, {
      start: 4213,
      length: 13,
      convRule: rule45
  }, {
      start: 4226,
      length: 1,
      convRule: rule84
  }, {
      start: 4227,
      length: 2,
      convRule: rule114
  }, {
      start: 4229,
      length: 2,
      convRule: rule84
  }, {
      start: 4231,
      length: 6,
      convRule: rule114
  }, {
      start: 4237,
      length: 1,
      convRule: rule84
  }, {
      start: 4238,
      length: 1,
      convRule: rule45
  }, {
      start: 4239,
      length: 1,
      convRule: rule114
  }, {
      start: 4240,
      length: 10,
      convRule: rule8
  }, {
      start: 4250,
      length: 3,
      convRule: rule114
  }, {
      start: 4253,
      length: 1,
      convRule: rule84
  }, {
      start: 4254,
      length: 2,
      convRule: rule13
  }, {
      start: 4256,
      length: 38,
      convRule: rule115
  }, {
      start: 4304,
      length: 43,
      convRule: rule45
  }, {
      start: 4347,
      length: 1,
      convRule: rule2
  }, {
      start: 4348,
      length: 1,
      convRule: rule83
  }, {
      start: 4352,
      length: 329,
      convRule: rule45
  }, {
      start: 4682,
      length: 4,
      convRule: rule45
  }, {
      start: 4688,
      length: 7,
      convRule: rule45
  }, {
      start: 4696,
      length: 1,
      convRule: rule45
  }, {
      start: 4698,
      length: 4,
      convRule: rule45
  }, {
      start: 4704,
      length: 41,
      convRule: rule45
  }, {
      start: 4746,
      length: 4,
      convRule: rule45
  }, {
      start: 4752,
      length: 33,
      convRule: rule45
  }, {
      start: 4786,
      length: 4,
      convRule: rule45
  }, {
      start: 4792,
      length: 7,
      convRule: rule45
  }, {
      start: 4800,
      length: 1,
      convRule: rule45
  }, {
      start: 4802,
      length: 4,
      convRule: rule45
  }, {
      start: 4808,
      length: 15,
      convRule: rule45
  }, {
      start: 4824,
      length: 57,
      convRule: rule45
  }, {
      start: 4882,
      length: 4,
      convRule: rule45
  }, {
      start: 4888,
      length: 67,
      convRule: rule45
  }, {
      start: 4957,
      length: 3,
      convRule: rule84
  }, {
      start: 4960,
      length: 1,
      convRule: rule13
  }, {
      start: 4961,
      length: 8,
      convRule: rule2
  }, {
      start: 4969,
      length: 20,
      convRule: rule17
  }, {
      start: 4992,
      length: 16,
      convRule: rule45
  }, {
      start: 5008,
      length: 10,
      convRule: rule13
  }, {
      start: 5024,
      length: 85,
      convRule: rule45
  }, {
      start: 5120,
      length: 1,
      convRule: rule7
  }, {
      start: 5121,
      length: 620,
      convRule: rule45
  }, {
      start: 5741,
      length: 2,
      convRule: rule2
  }, {
      start: 5743,
      length: 17,
      convRule: rule45
  }, {
      start: 5760,
      length: 1,
      convRule: rule1
  }, {
      start: 5761,
      length: 26,
      convRule: rule45
  }, {
      start: 5787,
      length: 1,
      convRule: rule4
  }, {
      start: 5788,
      length: 1,
      convRule: rule5
  }, {
      start: 5792,
      length: 75,
      convRule: rule45
  }, {
      start: 5867,
      length: 3,
      convRule: rule2
  }, {
      start: 5870,
      length: 3,
      convRule: rule116
  }, {
      start: 5888,
      length: 13,
      convRule: rule45
  }, {
      start: 5902,
      length: 4,
      convRule: rule45
  }, {
      start: 5906,
      length: 3,
      convRule: rule84
  }, {
      start: 5920,
      length: 18,
      convRule: rule45
  }, {
      start: 5938,
      length: 3,
      convRule: rule84
  }, {
      start: 5941,
      length: 2,
      convRule: rule2
  }, {
      start: 5952,
      length: 18,
      convRule: rule45
  }, {
      start: 5970,
      length: 2,
      convRule: rule84
  }, {
      start: 5984,
      length: 13,
      convRule: rule45
  }, {
      start: 5998,
      length: 3,
      convRule: rule45
  }, {
      start: 6002,
      length: 2,
      convRule: rule84
  }, {
      start: 6016,
      length: 52,
      convRule: rule45
  }, {
      start: 6068,
      length: 2,
      convRule: rule16
  }, {
      start: 6070,
      length: 1,
      convRule: rule114
  }, {
      start: 6071,
      length: 7,
      convRule: rule84
  }, {
      start: 6078,
      length: 8,
      convRule: rule114
  }, {
      start: 6086,
      length: 1,
      convRule: rule84
  }, {
      start: 6087,
      length: 2,
      convRule: rule114
  }, {
      start: 6089,
      length: 11,
      convRule: rule84
  }, {
      start: 6100,
      length: 3,
      convRule: rule2
  }, {
      start: 6103,
      length: 1,
      convRule: rule83
  }, {
      start: 6104,
      length: 3,
      convRule: rule2
  }, {
      start: 6107,
      length: 1,
      convRule: rule3
  }, {
      start: 6108,
      length: 1,
      convRule: rule45
  }, {
      start: 6109,
      length: 1,
      convRule: rule84
  }, {
      start: 6112,
      length: 10,
      convRule: rule8
  }, {
      start: 6128,
      length: 10,
      convRule: rule17
  }, {
      start: 6144,
      length: 6,
      convRule: rule2
  }, {
      start: 6150,
      length: 1,
      convRule: rule7
  }, {
      start: 6151,
      length: 4,
      convRule: rule2
  }, {
      start: 6155,
      length: 3,
      convRule: rule84
  }, {
      start: 6158,
      length: 1,
      convRule: rule1
  }, {
      start: 6160,
      length: 10,
      convRule: rule8
  }, {
      start: 6176,
      length: 35,
      convRule: rule45
  }, {
      start: 6211,
      length: 1,
      convRule: rule83
  }, {
      start: 6212,
      length: 52,
      convRule: rule45
  }, {
      start: 6272,
      length: 41,
      convRule: rule45
  }, {
      start: 6313,
      length: 1,
      convRule: rule84
  }, {
      start: 6314,
      length: 1,
      convRule: rule45
  }, {
      start: 6320,
      length: 70,
      convRule: rule45
  }, {
      start: 6400,
      length: 29,
      convRule: rule45
  }, {
      start: 6432,
      length: 3,
      convRule: rule84
  }, {
      start: 6435,
      length: 4,
      convRule: rule114
  }, {
      start: 6439,
      length: 2,
      convRule: rule84
  }, {
      start: 6441,
      length: 3,
      convRule: rule114
  }, {
      start: 6448,
      length: 2,
      convRule: rule114
  }, {
      start: 6450,
      length: 1,
      convRule: rule84
  }, {
      start: 6451,
      length: 6,
      convRule: rule114
  }, {
      start: 6457,
      length: 3,
      convRule: rule84
  }, {
      start: 6464,
      length: 1,
      convRule: rule13
  }, {
      start: 6468,
      length: 2,
      convRule: rule2
  }, {
      start: 6470,
      length: 10,
      convRule: rule8
  }, {
      start: 6480,
      length: 30,
      convRule: rule45
  }, {
      start: 6512,
      length: 5,
      convRule: rule45
  }, {
      start: 6528,
      length: 44,
      convRule: rule45
  }, {
      start: 6576,
      length: 17,
      convRule: rule114
  }, {
      start: 6593,
      length: 7,
      convRule: rule45
  }, {
      start: 6600,
      length: 2,
      convRule: rule114
  }, {
      start: 6608,
      length: 10,
      convRule: rule8
  }, {
      start: 6618,
      length: 1,
      convRule: rule17
  }, {
      start: 6622,
      length: 34,
      convRule: rule13
  }, {
      start: 6656,
      length: 23,
      convRule: rule45
  }, {
      start: 6679,
      length: 2,
      convRule: rule84
  }, {
      start: 6681,
      length: 3,
      convRule: rule114
  }, {
      start: 6686,
      length: 2,
      convRule: rule2
  }, {
      start: 6688,
      length: 53,
      convRule: rule45
  }, {
      start: 6741,
      length: 1,
      convRule: rule114
  }, {
      start: 6742,
      length: 1,
      convRule: rule84
  }, {
      start: 6743,
      length: 1,
      convRule: rule114
  }, {
      start: 6744,
      length: 7,
      convRule: rule84
  }, {
      start: 6752,
      length: 1,
      convRule: rule84
  }, {
      start: 6753,
      length: 1,
      convRule: rule114
  }, {
      start: 6754,
      length: 1,
      convRule: rule84
  }, {
      start: 6755,
      length: 2,
      convRule: rule114
  }, {
      start: 6757,
      length: 8,
      convRule: rule84
  }, {
      start: 6765,
      length: 6,
      convRule: rule114
  }, {
      start: 6771,
      length: 10,
      convRule: rule84
  }, {
      start: 6783,
      length: 1,
      convRule: rule84
  }, {
      start: 6784,
      length: 10,
      convRule: rule8
  }, {
      start: 6800,
      length: 10,
      convRule: rule8
  }, {
      start: 6816,
      length: 7,
      convRule: rule2
  }, {
      start: 6823,
      length: 1,
      convRule: rule83
  }, {
      start: 6824,
      length: 6,
      convRule: rule2
  }, {
      start: 6912,
      length: 4,
      convRule: rule84
  }, {
      start: 6916,
      length: 1,
      convRule: rule114
  }, {
      start: 6917,
      length: 47,
      convRule: rule45
  }, {
      start: 6964,
      length: 1,
      convRule: rule84
  }, {
      start: 6965,
      length: 1,
      convRule: rule114
  }, {
      start: 6966,
      length: 5,
      convRule: rule84
  }, {
      start: 6971,
      length: 1,
      convRule: rule114
  }, {
      start: 6972,
      length: 1,
      convRule: rule84
  }, {
      start: 6973,
      length: 5,
      convRule: rule114
  }, {
      start: 6978,
      length: 1,
      convRule: rule84
  }, {
      start: 6979,
      length: 2,
      convRule: rule114
  }, {
      start: 6981,
      length: 7,
      convRule: rule45
  }, {
      start: 6992,
      length: 10,
      convRule: rule8
  }, {
      start: 7002,
      length: 7,
      convRule: rule2
  }, {
      start: 7009,
      length: 10,
      convRule: rule13
  }, {
      start: 7019,
      length: 9,
      convRule: rule84
  }, {
      start: 7028,
      length: 9,
      convRule: rule13
  }, {
      start: 7040,
      length: 2,
      convRule: rule84
  }, {
      start: 7042,
      length: 1,
      convRule: rule114
  }, {
      start: 7043,
      length: 30,
      convRule: rule45
  }, {
      start: 7073,
      length: 1,
      convRule: rule114
  }, {
      start: 7074,
      length: 4,
      convRule: rule84
  }, {
      start: 7078,
      length: 2,
      convRule: rule114
  }, {
      start: 7080,
      length: 2,
      convRule: rule84
  }, {
      start: 7082,
      length: 1,
      convRule: rule114
  }, {
      start: 7086,
      length: 2,
      convRule: rule45
  }, {
      start: 7088,
      length: 10,
      convRule: rule8
  }, {
      start: 7104,
      length: 38,
      convRule: rule45
  }, {
      start: 7142,
      length: 1,
      convRule: rule84
  }, {
      start: 7143,
      length: 1,
      convRule: rule114
  }, {
      start: 7144,
      length: 2,
      convRule: rule84
  }, {
      start: 7146,
      length: 3,
      convRule: rule114
  }, {
      start: 7149,
      length: 1,
      convRule: rule84
  }, {
      start: 7150,
      length: 1,
      convRule: rule114
  }, {
      start: 7151,
      length: 3,
      convRule: rule84
  }, {
      start: 7154,
      length: 2,
      convRule: rule114
  }, {
      start: 7164,
      length: 4,
      convRule: rule2
  }, {
      start: 7168,
      length: 36,
      convRule: rule45
  }, {
      start: 7204,
      length: 8,
      convRule: rule114
  }, {
      start: 7212,
      length: 8,
      convRule: rule84
  }, {
      start: 7220,
      length: 2,
      convRule: rule114
  }, {
      start: 7222,
      length: 2,
      convRule: rule84
  }, {
      start: 7227,
      length: 5,
      convRule: rule2
  }, {
      start: 7232,
      length: 10,
      convRule: rule8
  }, {
      start: 7245,
      length: 3,
      convRule: rule45
  }, {
      start: 7248,
      length: 10,
      convRule: rule8
  }, {
      start: 7258,
      length: 30,
      convRule: rule45
  }, {
      start: 7288,
      length: 6,
      convRule: rule83
  }, {
      start: 7294,
      length: 2,
      convRule: rule2
  }, {
      start: 7376,
      length: 3,
      convRule: rule84
  }, {
      start: 7379,
      length: 1,
      convRule: rule2
  }, {
      start: 7380,
      length: 13,
      convRule: rule84
  }, {
      start: 7393,
      length: 1,
      convRule: rule114
  }, {
      start: 7394,
      length: 7,
      convRule: rule84
  }, {
      start: 7401,
      length: 4,
      convRule: rule45
  }, {
      start: 7405,
      length: 1,
      convRule: rule84
  }, {
      start: 7406,
      length: 4,
      convRule: rule45
  }, {
      start: 7410,
      length: 1,
      convRule: rule114
  }, {
      start: 7424,
      length: 44,
      convRule: rule14
  }, {
      start: 7468,
      length: 54,
      convRule: rule83
  }, {
      start: 7522,
      length: 22,
      convRule: rule14
  }, {
      start: 7544,
      length: 1,
      convRule: rule83
  }, {
      start: 7545,
      length: 1,
      convRule: rule117
  }, {
      start: 7546,
      length: 3,
      convRule: rule14
  }, {
      start: 7549,
      length: 1,
      convRule: rule118
  }, {
      start: 7550,
      length: 29,
      convRule: rule14
  }, {
      start: 7579,
      length: 37,
      convRule: rule83
  }, {
      start: 7616,
      length: 39,
      convRule: rule84
  }, {
      start: 7676,
      length: 4,
      convRule: rule84
  }, {
      start: 7680,
      length: 1,
      convRule: rule21
  }, {
      start: 7681,
      length: 1,
      convRule: rule22
  }, {
      start: 7682,
      length: 1,
      convRule: rule21
  }, {
      start: 7683,
      length: 1,
      convRule: rule22
  }, {
      start: 7684,
      length: 1,
      convRule: rule21
  }, {
      start: 7685,
      length: 1,
      convRule: rule22
  }, {
      start: 7686,
      length: 1,
      convRule: rule21
  }, {
      start: 7687,
      length: 1,
      convRule: rule22
  }, {
      start: 7688,
      length: 1,
      convRule: rule21
  }, {
      start: 7689,
      length: 1,
      convRule: rule22
  }, {
      start: 7690,
      length: 1,
      convRule: rule21
  }, {
      start: 7691,
      length: 1,
      convRule: rule22
  }, {
      start: 7692,
      length: 1,
      convRule: rule21
  }, {
      start: 7693,
      length: 1,
      convRule: rule22
  }, {
      start: 7694,
      length: 1,
      convRule: rule21
  }, {
      start: 7695,
      length: 1,
      convRule: rule22
  }, {
      start: 7696,
      length: 1,
      convRule: rule21
  }, {
      start: 7697,
      length: 1,
      convRule: rule22
  }, {
      start: 7698,
      length: 1,
      convRule: rule21
  }, {
      start: 7699,
      length: 1,
      convRule: rule22
  }, {
      start: 7700,
      length: 1,
      convRule: rule21
  }, {
      start: 7701,
      length: 1,
      convRule: rule22
  }, {
      start: 7702,
      length: 1,
      convRule: rule21
  }, {
      start: 7703,
      length: 1,
      convRule: rule22
  }, {
      start: 7704,
      length: 1,
      convRule: rule21
  }, {
      start: 7705,
      length: 1,
      convRule: rule22
  }, {
      start: 7706,
      length: 1,
      convRule: rule21
  }, {
      start: 7707,
      length: 1,
      convRule: rule22
  }, {
      start: 7708,
      length: 1,
      convRule: rule21
  }, {
      start: 7709,
      length: 1,
      convRule: rule22
  }, {
      start: 7710,
      length: 1,
      convRule: rule21
  }, {
      start: 7711,
      length: 1,
      convRule: rule22
  }, {
      start: 7712,
      length: 1,
      convRule: rule21
  }, {
      start: 7713,
      length: 1,
      convRule: rule22
  }, {
      start: 7714,
      length: 1,
      convRule: rule21
  }, {
      start: 7715,
      length: 1,
      convRule: rule22
  }, {
      start: 7716,
      length: 1,
      convRule: rule21
  }, {
      start: 7717,
      length: 1,
      convRule: rule22
  }, {
      start: 7718,
      length: 1,
      convRule: rule21
  }, {
      start: 7719,
      length: 1,
      convRule: rule22
  }, {
      start: 7720,
      length: 1,
      convRule: rule21
  }, {
      start: 7721,
      length: 1,
      convRule: rule22
  }, {
      start: 7722,
      length: 1,
      convRule: rule21
  }, {
      start: 7723,
      length: 1,
      convRule: rule22
  }, {
      start: 7724,
      length: 1,
      convRule: rule21
  }, {
      start: 7725,
      length: 1,
      convRule: rule22
  }, {
      start: 7726,
      length: 1,
      convRule: rule21
  }, {
      start: 7727,
      length: 1,
      convRule: rule22
  }, {
      start: 7728,
      length: 1,
      convRule: rule21
  }, {
      start: 7729,
      length: 1,
      convRule: rule22
  }, {
      start: 7730,
      length: 1,
      convRule: rule21
  }, {
      start: 7731,
      length: 1,
      convRule: rule22
  }, {
      start: 7732,
      length: 1,
      convRule: rule21
  }, {
      start: 7733,
      length: 1,
      convRule: rule22
  }, {
      start: 7734,
      length: 1,
      convRule: rule21
  }, {
      start: 7735,
      length: 1,
      convRule: rule22
  }, {
      start: 7736,
      length: 1,
      convRule: rule21
  }, {
      start: 7737,
      length: 1,
      convRule: rule22
  }, {
      start: 7738,
      length: 1,
      convRule: rule21
  }, {
      start: 7739,
      length: 1,
      convRule: rule22
  }, {
      start: 7740,
      length: 1,
      convRule: rule21
  }, {
      start: 7741,
      length: 1,
      convRule: rule22
  }, {
      start: 7742,
      length: 1,
      convRule: rule21
  }, {
      start: 7743,
      length: 1,
      convRule: rule22
  }, {
      start: 7744,
      length: 1,
      convRule: rule21
  }, {
      start: 7745,
      length: 1,
      convRule: rule22
  }, {
      start: 7746,
      length: 1,
      convRule: rule21
  }, {
      start: 7747,
      length: 1,
      convRule: rule22
  }, {
      start: 7748,
      length: 1,
      convRule: rule21
  }, {
      start: 7749,
      length: 1,
      convRule: rule22
  }, {
      start: 7750,
      length: 1,
      convRule: rule21
  }, {
      start: 7751,
      length: 1,
      convRule: rule22
  }, {
      start: 7752,
      length: 1,
      convRule: rule21
  }, {
      start: 7753,
      length: 1,
      convRule: rule22
  }, {
      start: 7754,
      length: 1,
      convRule: rule21
  }, {
      start: 7755,
      length: 1,
      convRule: rule22
  }, {
      start: 7756,
      length: 1,
      convRule: rule21
  }, {
      start: 7757,
      length: 1,
      convRule: rule22
  }, {
      start: 7758,
      length: 1,
      convRule: rule21
  }, {
      start: 7759,
      length: 1,
      convRule: rule22
  }, {
      start: 7760,
      length: 1,
      convRule: rule21
  }, {
      start: 7761,
      length: 1,
      convRule: rule22
  }, {
      start: 7762,
      length: 1,
      convRule: rule21
  }, {
      start: 7763,
      length: 1,
      convRule: rule22
  }, {
      start: 7764,
      length: 1,
      convRule: rule21
  }, {
      start: 7765,
      length: 1,
      convRule: rule22
  }, {
      start: 7766,
      length: 1,
      convRule: rule21
  }, {
      start: 7767,
      length: 1,
      convRule: rule22
  }, {
      start: 7768,
      length: 1,
      convRule: rule21
  }, {
      start: 7769,
      length: 1,
      convRule: rule22
  }, {
      start: 7770,
      length: 1,
      convRule: rule21
  }, {
      start: 7771,
      length: 1,
      convRule: rule22
  }, {
      start: 7772,
      length: 1,
      convRule: rule21
  }, {
      start: 7773,
      length: 1,
      convRule: rule22
  }, {
      start: 7774,
      length: 1,
      convRule: rule21
  }, {
      start: 7775,
      length: 1,
      convRule: rule22
  }, {
      start: 7776,
      length: 1,
      convRule: rule21
  }, {
      start: 7777,
      length: 1,
      convRule: rule22
  }, {
      start: 7778,
      length: 1,
      convRule: rule21
  }, {
      start: 7779,
      length: 1,
      convRule: rule22
  }, {
      start: 7780,
      length: 1,
      convRule: rule21
  }, {
      start: 7781,
      length: 1,
      convRule: rule22
  }, {
      start: 7782,
      length: 1,
      convRule: rule21
  }, {
      start: 7783,
      length: 1,
      convRule: rule22
  }, {
      start: 7784,
      length: 1,
      convRule: rule21
  }, {
      start: 7785,
      length: 1,
      convRule: rule22
  }, {
      start: 7786,
      length: 1,
      convRule: rule21
  }, {
      start: 7787,
      length: 1,
      convRule: rule22
  }, {
      start: 7788,
      length: 1,
      convRule: rule21
  }, {
      start: 7789,
      length: 1,
      convRule: rule22
  }, {
      start: 7790,
      length: 1,
      convRule: rule21
  }, {
      start: 7791,
      length: 1,
      convRule: rule22
  }, {
      start: 7792,
      length: 1,
      convRule: rule21
  }, {
      start: 7793,
      length: 1,
      convRule: rule22
  }, {
      start: 7794,
      length: 1,
      convRule: rule21
  }, {
      start: 7795,
      length: 1,
      convRule: rule22
  }, {
      start: 7796,
      length: 1,
      convRule: rule21
  }, {
      start: 7797,
      length: 1,
      convRule: rule22
  }, {
      start: 7798,
      length: 1,
      convRule: rule21
  }, {
      start: 7799,
      length: 1,
      convRule: rule22
  }, {
      start: 7800,
      length: 1,
      convRule: rule21
  }, {
      start: 7801,
      length: 1,
      convRule: rule22
  }, {
      start: 7802,
      length: 1,
      convRule: rule21
  }, {
      start: 7803,
      length: 1,
      convRule: rule22
  }, {
      start: 7804,
      length: 1,
      convRule: rule21
  }, {
      start: 7805,
      length: 1,
      convRule: rule22
  }, {
      start: 7806,
      length: 1,
      convRule: rule21
  }, {
      start: 7807,
      length: 1,
      convRule: rule22
  }, {
      start: 7808,
      length: 1,
      convRule: rule21
  }, {
      start: 7809,
      length: 1,
      convRule: rule22
  }, {
      start: 7810,
      length: 1,
      convRule: rule21
  }, {
      start: 7811,
      length: 1,
      convRule: rule22
  }, {
      start: 7812,
      length: 1,
      convRule: rule21
  }, {
      start: 7813,
      length: 1,
      convRule: rule22
  }, {
      start: 7814,
      length: 1,
      convRule: rule21
  }, {
      start: 7815,
      length: 1,
      convRule: rule22
  }, {
      start: 7816,
      length: 1,
      convRule: rule21
  }, {
      start: 7817,
      length: 1,
      convRule: rule22
  }, {
      start: 7818,
      length: 1,
      convRule: rule21
  }, {
      start: 7819,
      length: 1,
      convRule: rule22
  }, {
      start: 7820,
      length: 1,
      convRule: rule21
  }, {
      start: 7821,
      length: 1,
      convRule: rule22
  }, {
      start: 7822,
      length: 1,
      convRule: rule21
  }, {
      start: 7823,
      length: 1,
      convRule: rule22
  }, {
      start: 7824,
      length: 1,
      convRule: rule21
  }, {
      start: 7825,
      length: 1,
      convRule: rule22
  }, {
      start: 7826,
      length: 1,
      convRule: rule21
  }, {
      start: 7827,
      length: 1,
      convRule: rule22
  }, {
      start: 7828,
      length: 1,
      convRule: rule21
  }, {
      start: 7829,
      length: 1,
      convRule: rule22
  }, {
      start: 7830,
      length: 5,
      convRule: rule14
  }, {
      start: 7835,
      length: 1,
      convRule: rule119
  }, {
      start: 7836,
      length: 2,
      convRule: rule14
  }, {
      start: 7838,
      length: 1,
      convRule: rule120
  }, {
      start: 7839,
      length: 1,
      convRule: rule14
  }, {
      start: 7840,
      length: 1,
      convRule: rule21
  }, {
      start: 7841,
      length: 1,
      convRule: rule22
  }, {
      start: 7842,
      length: 1,
      convRule: rule21
  }, {
      start: 7843,
      length: 1,
      convRule: rule22
  }, {
      start: 7844,
      length: 1,
      convRule: rule21
  }, {
      start: 7845,
      length: 1,
      convRule: rule22
  }, {
      start: 7846,
      length: 1,
      convRule: rule21
  }, {
      start: 7847,
      length: 1,
      convRule: rule22
  }, {
      start: 7848,
      length: 1,
      convRule: rule21
  }, {
      start: 7849,
      length: 1,
      convRule: rule22
  }, {
      start: 7850,
      length: 1,
      convRule: rule21
  }, {
      start: 7851,
      length: 1,
      convRule: rule22
  }, {
      start: 7852,
      length: 1,
      convRule: rule21
  }, {
      start: 7853,
      length: 1,
      convRule: rule22
  }, {
      start: 7854,
      length: 1,
      convRule: rule21
  }, {
      start: 7855,
      length: 1,
      convRule: rule22
  }, {
      start: 7856,
      length: 1,
      convRule: rule21
  }, {
      start: 7857,
      length: 1,
      convRule: rule22
  }, {
      start: 7858,
      length: 1,
      convRule: rule21
  }, {
      start: 7859,
      length: 1,
      convRule: rule22
  }, {
      start: 7860,
      length: 1,
      convRule: rule21
  }, {
      start: 7861,
      length: 1,
      convRule: rule22
  }, {
      start: 7862,
      length: 1,
      convRule: rule21
  }, {
      start: 7863,
      length: 1,
      convRule: rule22
  }, {
      start: 7864,
      length: 1,
      convRule: rule21
  }, {
      start: 7865,
      length: 1,
      convRule: rule22
  }, {
      start: 7866,
      length: 1,
      convRule: rule21
  }, {
      start: 7867,
      length: 1,
      convRule: rule22
  }, {
      start: 7868,
      length: 1,
      convRule: rule21
  }, {
      start: 7869,
      length: 1,
      convRule: rule22
  }, {
      start: 7870,
      length: 1,
      convRule: rule21
  }, {
      start: 7871,
      length: 1,
      convRule: rule22
  }, {
      start: 7872,
      length: 1,
      convRule: rule21
  }, {
      start: 7873,
      length: 1,
      convRule: rule22
  }, {
      start: 7874,
      length: 1,
      convRule: rule21
  }, {
      start: 7875,
      length: 1,
      convRule: rule22
  }, {
      start: 7876,
      length: 1,
      convRule: rule21
  }, {
      start: 7877,
      length: 1,
      convRule: rule22
  }, {
      start: 7878,
      length: 1,
      convRule: rule21
  }, {
      start: 7879,
      length: 1,
      convRule: rule22
  }, {
      start: 7880,
      length: 1,
      convRule: rule21
  }, {
      start: 7881,
      length: 1,
      convRule: rule22
  }, {
      start: 7882,
      length: 1,
      convRule: rule21
  }, {
      start: 7883,
      length: 1,
      convRule: rule22
  }, {
      start: 7884,
      length: 1,
      convRule: rule21
  }, {
      start: 7885,
      length: 1,
      convRule: rule22
  }, {
      start: 7886,
      length: 1,
      convRule: rule21
  }, {
      start: 7887,
      length: 1,
      convRule: rule22
  }, {
      start: 7888,
      length: 1,
      convRule: rule21
  }, {
      start: 7889,
      length: 1,
      convRule: rule22
  }, {
      start: 7890,
      length: 1,
      convRule: rule21
  }, {
      start: 7891,
      length: 1,
      convRule: rule22
  }, {
      start: 7892,
      length: 1,
      convRule: rule21
  }, {
      start: 7893,
      length: 1,
      convRule: rule22
  }, {
      start: 7894,
      length: 1,
      convRule: rule21
  }, {
      start: 7895,
      length: 1,
      convRule: rule22
  }, {
      start: 7896,
      length: 1,
      convRule: rule21
  }, {
      start: 7897,
      length: 1,
      convRule: rule22
  }, {
      start: 7898,
      length: 1,
      convRule: rule21
  }, {
      start: 7899,
      length: 1,
      convRule: rule22
  }, {
      start: 7900,
      length: 1,
      convRule: rule21
  }, {
      start: 7901,
      length: 1,
      convRule: rule22
  }, {
      start: 7902,
      length: 1,
      convRule: rule21
  }, {
      start: 7903,
      length: 1,
      convRule: rule22
  }, {
      start: 7904,
      length: 1,
      convRule: rule21
  }, {
      start: 7905,
      length: 1,
      convRule: rule22
  }, {
      start: 7906,
      length: 1,
      convRule: rule21
  }, {
      start: 7907,
      length: 1,
      convRule: rule22
  }, {
      start: 7908,
      length: 1,
      convRule: rule21
  }, {
      start: 7909,
      length: 1,
      convRule: rule22
  }, {
      start: 7910,
      length: 1,
      convRule: rule21
  }, {
      start: 7911,
      length: 1,
      convRule: rule22
  }, {
      start: 7912,
      length: 1,
      convRule: rule21
  }, {
      start: 7913,
      length: 1,
      convRule: rule22
  }, {
      start: 7914,
      length: 1,
      convRule: rule21
  }, {
      start: 7915,
      length: 1,
      convRule: rule22
  }, {
      start: 7916,
      length: 1,
      convRule: rule21
  }, {
      start: 7917,
      length: 1,
      convRule: rule22
  }, {
      start: 7918,
      length: 1,
      convRule: rule21
  }, {
      start: 7919,
      length: 1,
      convRule: rule22
  }, {
      start: 7920,
      length: 1,
      convRule: rule21
  }, {
      start: 7921,
      length: 1,
      convRule: rule22
  }, {
      start: 7922,
      length: 1,
      convRule: rule21
  }, {
      start: 7923,
      length: 1,
      convRule: rule22
  }, {
      start: 7924,
      length: 1,
      convRule: rule21
  }, {
      start: 7925,
      length: 1,
      convRule: rule22
  }, {
      start: 7926,
      length: 1,
      convRule: rule21
  }, {
      start: 7927,
      length: 1,
      convRule: rule22
  }, {
      start: 7928,
      length: 1,
      convRule: rule21
  }, {
      start: 7929,
      length: 1,
      convRule: rule22
  }, {
      start: 7930,
      length: 1,
      convRule: rule21
  }, {
      start: 7931,
      length: 1,
      convRule: rule22
  }, {
      start: 7932,
      length: 1,
      convRule: rule21
  }, {
      start: 7933,
      length: 1,
      convRule: rule22
  }, {
      start: 7934,
      length: 1,
      convRule: rule21
  }, {
      start: 7935,
      length: 1,
      convRule: rule22
  }, {
      start: 7936,
      length: 8,
      convRule: rule121
  }, {
      start: 7944,
      length: 8,
      convRule: rule122
  }, {
      start: 7952,
      length: 6,
      convRule: rule121
  }, {
      start: 7960,
      length: 6,
      convRule: rule122
  }, {
      start: 7968,
      length: 8,
      convRule: rule121
  }, {
      start: 7976,
      length: 8,
      convRule: rule122
  }, {
      start: 7984,
      length: 8,
      convRule: rule121
  }, {
      start: 7992,
      length: 8,
      convRule: rule122
  }, {
      start: 8000,
      length: 6,
      convRule: rule121
  }, {
      start: 8008,
      length: 6,
      convRule: rule122
  }, {
      start: 8016,
      length: 1,
      convRule: rule14
  }, {
      start: 8017,
      length: 1,
      convRule: rule121
  }, {
      start: 8018,
      length: 1,
      convRule: rule14
  }, {
      start: 8019,
      length: 1,
      convRule: rule121
  }, {
      start: 8020,
      length: 1,
      convRule: rule14
  }, {
      start: 8021,
      length: 1,
      convRule: rule121
  }, {
      start: 8022,
      length: 1,
      convRule: rule14
  }, {
      start: 8023,
      length: 1,
      convRule: rule121
  }, {
      start: 8025,
      length: 1,
      convRule: rule122
  }, {
      start: 8027,
      length: 1,
      convRule: rule122
  }, {
      start: 8029,
      length: 1,
      convRule: rule122
  }, {
      start: 8031,
      length: 1,
      convRule: rule122
  }, {
      start: 8032,
      length: 8,
      convRule: rule121
  }, {
      start: 8040,
      length: 8,
      convRule: rule122
  }, {
      start: 8048,
      length: 2,
      convRule: rule123
  }, {
      start: 8050,
      length: 4,
      convRule: rule124
  }, {
      start: 8054,
      length: 2,
      convRule: rule125
  }, {
      start: 8056,
      length: 2,
      convRule: rule126
  }, {
      start: 8058,
      length: 2,
      convRule: rule127
  }, {
      start: 8060,
      length: 2,
      convRule: rule128
  }, {
      start: 8064,
      length: 8,
      convRule: rule121
  }, {
      start: 8072,
      length: 8,
      convRule: rule129
  }, {
      start: 8080,
      length: 8,
      convRule: rule121
  }, {
      start: 8088,
      length: 8,
      convRule: rule129
  }, {
      start: 8096,
      length: 8,
      convRule: rule121
  }, {
      start: 8104,
      length: 8,
      convRule: rule129
  }, {
      start: 8112,
      length: 2,
      convRule: rule121
  }, {
      start: 8114,
      length: 1,
      convRule: rule14
  }, {
      start: 8115,
      length: 1,
      convRule: rule130
  }, {
      start: 8116,
      length: 1,
      convRule: rule14
  }, {
      start: 8118,
      length: 2,
      convRule: rule14
  }, {
      start: 8120,
      length: 2,
      convRule: rule122
  }, {
      start: 8122,
      length: 2,
      convRule: rule131
  }, {
      start: 8124,
      length: 1,
      convRule: rule132
  }, {
      start: 8125,
      length: 1,
      convRule: rule10
  }, {
      start: 8126,
      length: 1,
      convRule: rule133
  }, {
      start: 8127,
      length: 3,
      convRule: rule10
  }, {
      start: 8130,
      length: 1,
      convRule: rule14
  }, {
      start: 8131,
      length: 1,
      convRule: rule130
  }, {
      start: 8132,
      length: 1,
      convRule: rule14
  }, {
      start: 8134,
      length: 2,
      convRule: rule14
  }, {
      start: 8136,
      length: 4,
      convRule: rule134
  }, {
      start: 8140,
      length: 1,
      convRule: rule132
  }, {
      start: 8141,
      length: 3,
      convRule: rule10
  }, {
      start: 8144,
      length: 2,
      convRule: rule121
  }, {
      start: 8146,
      length: 2,
      convRule: rule14
  }, {
      start: 8150,
      length: 2,
      convRule: rule14
  }, {
      start: 8152,
      length: 2,
      convRule: rule122
  }, {
      start: 8154,
      length: 2,
      convRule: rule135
  }, {
      start: 8157,
      length: 3,
      convRule: rule10
  }, {
      start: 8160,
      length: 2,
      convRule: rule121
  }, {
      start: 8162,
      length: 3,
      convRule: rule14
  }, {
      start: 8165,
      length: 1,
      convRule: rule104
  }, {
      start: 8166,
      length: 2,
      convRule: rule14
  }, {
      start: 8168,
      length: 2,
      convRule: rule122
  }, {
      start: 8170,
      length: 2,
      convRule: rule136
  }, {
      start: 8172,
      length: 1,
      convRule: rule107
  }, {
      start: 8173,
      length: 3,
      convRule: rule10
  }, {
      start: 8178,
      length: 1,
      convRule: rule14
  }, {
      start: 8179,
      length: 1,
      convRule: rule130
  }, {
      start: 8180,
      length: 1,
      convRule: rule14
  }, {
      start: 8182,
      length: 2,
      convRule: rule14
  }, {
      start: 8184,
      length: 2,
      convRule: rule137
  }, {
      start: 8186,
      length: 2,
      convRule: rule138
  }, {
      start: 8188,
      length: 1,
      convRule: rule132
  }, {
      start: 8189,
      length: 2,
      convRule: rule10
  }, {
      start: 8192,
      length: 11,
      convRule: rule1
  }, {
      start: 8203,
      length: 5,
      convRule: rule16
  }, {
      start: 8208,
      length: 6,
      convRule: rule7
  }, {
      start: 8214,
      length: 2,
      convRule: rule2
  }, {
      start: 8216,
      length: 1,
      convRule: rule15
  }, {
      start: 8217,
      length: 1,
      convRule: rule19
  }, {
      start: 8218,
      length: 1,
      convRule: rule4
  }, {
      start: 8219,
      length: 2,
      convRule: rule15
  }, {
      start: 8221,
      length: 1,
      convRule: rule19
  }, {
      start: 8222,
      length: 1,
      convRule: rule4
  }, {
      start: 8223,
      length: 1,
      convRule: rule15
  }, {
      start: 8224,
      length: 8,
      convRule: rule2
  }, {
      start: 8232,
      length: 1,
      convRule: rule139
  }, {
      start: 8233,
      length: 1,
      convRule: rule140
  }, {
      start: 8234,
      length: 5,
      convRule: rule16
  }, {
      start: 8239,
      length: 1,
      convRule: rule1
  }, {
      start: 8240,
      length: 9,
      convRule: rule2
  }, {
      start: 8249,
      length: 1,
      convRule: rule15
  }, {
      start: 8250,
      length: 1,
      convRule: rule19
  }, {
      start: 8251,
      length: 4,
      convRule: rule2
  }, {
      start: 8255,
      length: 2,
      convRule: rule11
  }, {
      start: 8257,
      length: 3,
      convRule: rule2
  }, {
      start: 8260,
      length: 1,
      convRule: rule6
  }, {
      start: 8261,
      length: 1,
      convRule: rule4
  }, {
      start: 8262,
      length: 1,
      convRule: rule5
  }, {
      start: 8263,
      length: 11,
      convRule: rule2
  }, {
      start: 8274,
      length: 1,
      convRule: rule6
  }, {
      start: 8275,
      length: 1,
      convRule: rule2
  }, {
      start: 8276,
      length: 1,
      convRule: rule11
  }, {
      start: 8277,
      length: 10,
      convRule: rule2
  }, {
      start: 8287,
      length: 1,
      convRule: rule1
  }, {
      start: 8288,
      length: 5,
      convRule: rule16
  }, {
      start: 8298,
      length: 6,
      convRule: rule16
  }, {
      start: 8304,
      length: 1,
      convRule: rule17
  }, {
      start: 8305,
      length: 1,
      convRule: rule83
  }, {
      start: 8308,
      length: 6,
      convRule: rule17
  }, {
      start: 8314,
      length: 3,
      convRule: rule6
  }, {
      start: 8317,
      length: 1,
      convRule: rule4
  }, {
      start: 8318,
      length: 1,
      convRule: rule5
  }, {
      start: 8319,
      length: 1,
      convRule: rule83
  }, {
      start: 8320,
      length: 10,
      convRule: rule17
  }, {
      start: 8330,
      length: 3,
      convRule: rule6
  }, {
      start: 8333,
      length: 1,
      convRule: rule4
  }, {
      start: 8334,
      length: 1,
      convRule: rule5
  }, {
      start: 8336,
      length: 13,
      convRule: rule83
  }, {
      start: 8352,
      length: 26,
      convRule: rule3
  }, {
      start: 8400,
      length: 13,
      convRule: rule84
  }, {
      start: 8413,
      length: 4,
      convRule: rule109
  }, {
      start: 8417,
      length: 1,
      convRule: rule84
  }, {
      start: 8418,
      length: 3,
      convRule: rule109
  }, {
      start: 8421,
      length: 12,
      convRule: rule84
  }, {
      start: 8448,
      length: 2,
      convRule: rule13
  }, {
      start: 8450,
      length: 1,
      convRule: rule98
  }, {
      start: 8451,
      length: 4,
      convRule: rule13
  }, {
      start: 8455,
      length: 1,
      convRule: rule98
  }, {
      start: 8456,
      length: 2,
      convRule: rule13
  }, {
      start: 8458,
      length: 1,
      convRule: rule14
  }, {
      start: 8459,
      length: 3,
      convRule: rule98
  }, {
      start: 8462,
      length: 2,
      convRule: rule14
  }, {
      start: 8464,
      length: 3,
      convRule: rule98
  }, {
      start: 8467,
      length: 1,
      convRule: rule14
  }, {
      start: 8468,
      length: 1,
      convRule: rule13
  }, {
      start: 8469,
      length: 1,
      convRule: rule98
  }, {
      start: 8470,
      length: 2,
      convRule: rule13
  }, {
      start: 8472,
      length: 1,
      convRule: rule6
  }, {
      start: 8473,
      length: 5,
      convRule: rule98
  }, {
      start: 8478,
      length: 6,
      convRule: rule13
  }, {
      start: 8484,
      length: 1,
      convRule: rule98
  }, {
      start: 8485,
      length: 1,
      convRule: rule13
  }, {
      start: 8486,
      length: 1,
      convRule: rule141
  }, {
      start: 8487,
      length: 1,
      convRule: rule13
  }, {
      start: 8488,
      length: 1,
      convRule: rule98
  }, {
      start: 8489,
      length: 1,
      convRule: rule13
  }, {
      start: 8490,
      length: 1,
      convRule: rule142
  }, {
      start: 8491,
      length: 1,
      convRule: rule143
  }, {
      start: 8492,
      length: 2,
      convRule: rule98
  }, {
      start: 8494,
      length: 1,
      convRule: rule13
  }, {
      start: 8495,
      length: 1,
      convRule: rule14
  }, {
      start: 8496,
      length: 2,
      convRule: rule98
  }, {
      start: 8498,
      length: 1,
      convRule: rule144
  }, {
      start: 8499,
      length: 1,
      convRule: rule98
  }, {
      start: 8500,
      length: 1,
      convRule: rule14
  }, {
      start: 8501,
      length: 4,
      convRule: rule45
  }, {
      start: 8505,
      length: 1,
      convRule: rule14
  }, {
      start: 8506,
      length: 2,
      convRule: rule13
  }, {
      start: 8508,
      length: 2,
      convRule: rule14
  }, {
      start: 8510,
      length: 2,
      convRule: rule98
  }, {
      start: 8512,
      length: 5,
      convRule: rule6
  }, {
      start: 8517,
      length: 1,
      convRule: rule98
  }, {
      start: 8518,
      length: 4,
      convRule: rule14
  }, {
      start: 8522,
      length: 1,
      convRule: rule13
  }, {
      start: 8523,
      length: 1,
      convRule: rule6
  }, {
      start: 8524,
      length: 2,
      convRule: rule13
  }, {
      start: 8526,
      length: 1,
      convRule: rule145
  }, {
      start: 8527,
      length: 1,
      convRule: rule13
  }, {
      start: 8528,
      length: 16,
      convRule: rule17
  }, {
      start: 8544,
      length: 16,
      convRule: rule146
  }, {
      start: 8560,
      length: 16,
      convRule: rule147
  }, {
      start: 8576,
      length: 3,
      convRule: rule116
  }, {
      start: 8579,
      length: 1,
      convRule: rule21
  }, {
      start: 8580,
      length: 1,
      convRule: rule22
  }, {
      start: 8581,
      length: 4,
      convRule: rule116
  }, {
      start: 8585,
      length: 1,
      convRule: rule17
  }, {
      start: 8592,
      length: 5,
      convRule: rule6
  }, {
      start: 8597,
      length: 5,
      convRule: rule13
  }, {
      start: 8602,
      length: 2,
      convRule: rule6
  }, {
      start: 8604,
      length: 4,
      convRule: rule13
  }, {
      start: 8608,
      length: 1,
      convRule: rule6
  }, {
      start: 8609,
      length: 2,
      convRule: rule13
  }, {
      start: 8611,
      length: 1,
      convRule: rule6
  }, {
      start: 8612,
      length: 2,
      convRule: rule13
  }, {
      start: 8614,
      length: 1,
      convRule: rule6
  }, {
      start: 8615,
      length: 7,
      convRule: rule13
  }, {
      start: 8622,
      length: 1,
      convRule: rule6
  }, {
      start: 8623,
      length: 31,
      convRule: rule13
  }, {
      start: 8654,
      length: 2,
      convRule: rule6
  }, {
      start: 8656,
      length: 2,
      convRule: rule13
  }, {
      start: 8658,
      length: 1,
      convRule: rule6
  }, {
      start: 8659,
      length: 1,
      convRule: rule13
  }, {
      start: 8660,
      length: 1,
      convRule: rule6
  }, {
      start: 8661,
      length: 31,
      convRule: rule13
  }, {
      start: 8692,
      length: 268,
      convRule: rule6
  }, {
      start: 8960,
      length: 8,
      convRule: rule13
  }, {
      start: 8968,
      length: 4,
      convRule: rule6
  }, {
      start: 8972,
      length: 20,
      convRule: rule13
  }, {
      start: 8992,
      length: 2,
      convRule: rule6
  }, {
      start: 8994,
      length: 7,
      convRule: rule13
  }, {
      start: 9001,
      length: 1,
      convRule: rule4
  }, {
      start: 9002,
      length: 1,
      convRule: rule5
  }, {
      start: 9003,
      length: 81,
      convRule: rule13
  }, {
      start: 9084,
      length: 1,
      convRule: rule6
  }, {
      start: 9085,
      length: 30,
      convRule: rule13
  }, {
      start: 9115,
      length: 25,
      convRule: rule6
  }, {
      start: 9140,
      length: 40,
      convRule: rule13
  }, {
      start: 9180,
      length: 6,
      convRule: rule6
  }, {
      start: 9186,
      length: 18,
      convRule: rule13
  }, {
      start: 9216,
      length: 39,
      convRule: rule13
  }, {
      start: 9280,
      length: 11,
      convRule: rule13
  }, {
      start: 9312,
      length: 60,
      convRule: rule17
  }, {
      start: 9372,
      length: 26,
      convRule: rule13
  }, {
      start: 9398,
      length: 26,
      convRule: rule148
  }, {
      start: 9424,
      length: 26,
      convRule: rule149
  }, {
      start: 9450,
      length: 22,
      convRule: rule17
  }, {
      start: 9472,
      length: 183,
      convRule: rule13
  }, {
      start: 9655,
      length: 1,
      convRule: rule6
  }, {
      start: 9656,
      length: 9,
      convRule: rule13
  }, {
      start: 9665,
      length: 1,
      convRule: rule6
  }, {
      start: 9666,
      length: 54,
      convRule: rule13
  }, {
      start: 9720,
      length: 8,
      convRule: rule6
  }, {
      start: 9728,
      length: 111,
      convRule: rule13
  }, {
      start: 9839,
      length: 1,
      convRule: rule6
  }, {
      start: 9840,
      length: 144,
      convRule: rule13
  }, {
      start: 9985,
      length: 103,
      convRule: rule13
  }, {
      start: 10088,
      length: 1,
      convRule: rule4
  }, {
      start: 10089,
      length: 1,
      convRule: rule5
  }, {
      start: 10090,
      length: 1,
      convRule: rule4
  }, {
      start: 10091,
      length: 1,
      convRule: rule5
  }, {
      start: 10092,
      length: 1,
      convRule: rule4
  }, {
      start: 10093,
      length: 1,
      convRule: rule5
  }, {
      start: 10094,
      length: 1,
      convRule: rule4
  }, {
      start: 10095,
      length: 1,
      convRule: rule5
  }, {
      start: 10096,
      length: 1,
      convRule: rule4
  }, {
      start: 10097,
      length: 1,
      convRule: rule5
  }, {
      start: 10098,
      length: 1,
      convRule: rule4
  }, {
      start: 10099,
      length: 1,
      convRule: rule5
  }, {
      start: 10100,
      length: 1,
      convRule: rule4
  }, {
      start: 10101,
      length: 1,
      convRule: rule5
  }, {
      start: 10102,
      length: 30,
      convRule: rule17
  }, {
      start: 10132,
      length: 44,
      convRule: rule13
  }, {
      start: 10176,
      length: 5,
      convRule: rule6
  }, {
      start: 10181,
      length: 1,
      convRule: rule4
  }, {
      start: 10182,
      length: 1,
      convRule: rule5
  }, {
      start: 10183,
      length: 4,
      convRule: rule6
  }, {
      start: 10188,
      length: 1,
      convRule: rule6
  }, {
      start: 10190,
      length: 24,
      convRule: rule6
  }, {
      start: 10214,
      length: 1,
      convRule: rule4
  }, {
      start: 10215,
      length: 1,
      convRule: rule5
  }, {
      start: 10216,
      length: 1,
      convRule: rule4
  }, {
      start: 10217,
      length: 1,
      convRule: rule5
  }, {
      start: 10218,
      length: 1,
      convRule: rule4
  }, {
      start: 10219,
      length: 1,
      convRule: rule5
  }, {
      start: 10220,
      length: 1,
      convRule: rule4
  }, {
      start: 10221,
      length: 1,
      convRule: rule5
  }, {
      start: 10222,
      length: 1,
      convRule: rule4
  }, {
      start: 10223,
      length: 1,
      convRule: rule5
  }, {
      start: 10224,
      length: 16,
      convRule: rule6
  }, {
      start: 10240,
      length: 256,
      convRule: rule13
  }, {
      start: 10496,
      length: 131,
      convRule: rule6
  }, {
      start: 10627,
      length: 1,
      convRule: rule4
  }, {
      start: 10628,
      length: 1,
      convRule: rule5
  }, {
      start: 10629,
      length: 1,
      convRule: rule4
  }, {
      start: 10630,
      length: 1,
      convRule: rule5
  }, {
      start: 10631,
      length: 1,
      convRule: rule4
  }, {
      start: 10632,
      length: 1,
      convRule: rule5
  }, {
      start: 10633,
      length: 1,
      convRule: rule4
  }, {
      start: 10634,
      length: 1,
      convRule: rule5
  }, {
      start: 10635,
      length: 1,
      convRule: rule4
  }, {
      start: 10636,
      length: 1,
      convRule: rule5
  }, {
      start: 10637,
      length: 1,
      convRule: rule4
  }, {
      start: 10638,
      length: 1,
      convRule: rule5
  }, {
      start: 10639,
      length: 1,
      convRule: rule4
  }, {
      start: 10640,
      length: 1,
      convRule: rule5
  }, {
      start: 10641,
      length: 1,
      convRule: rule4
  }, {
      start: 10642,
      length: 1,
      convRule: rule5
  }, {
      start: 10643,
      length: 1,
      convRule: rule4
  }, {
      start: 10644,
      length: 1,
      convRule: rule5
  }, {
      start: 10645,
      length: 1,
      convRule: rule4
  }, {
      start: 10646,
      length: 1,
      convRule: rule5
  }, {
      start: 10647,
      length: 1,
      convRule: rule4
  }, {
      start: 10648,
      length: 1,
      convRule: rule5
  }, {
      start: 10649,
      length: 63,
      convRule: rule6
  }, {
      start: 10712,
      length: 1,
      convRule: rule4
  }, {
      start: 10713,
      length: 1,
      convRule: rule5
  }, {
      start: 10714,
      length: 1,
      convRule: rule4
  }, {
      start: 10715,
      length: 1,
      convRule: rule5
  }, {
      start: 10716,
      length: 32,
      convRule: rule6
  }, {
      start: 10748,
      length: 1,
      convRule: rule4
  }, {
      start: 10749,
      length: 1,
      convRule: rule5
  }, {
      start: 10750,
      length: 258,
      convRule: rule6
  }, {
      start: 11008,
      length: 48,
      convRule: rule13
  }, {
      start: 11056,
      length: 21,
      convRule: rule6
  }, {
      start: 11077,
      length: 2,
      convRule: rule13
  }, {
      start: 11079,
      length: 6,
      convRule: rule6
  }, {
      start: 11088,
      length: 10,
      convRule: rule13
  }, {
      start: 11264,
      length: 47,
      convRule: rule112
  }, {
      start: 11312,
      length: 47,
      convRule: rule113
  }, {
      start: 11360,
      length: 1,
      convRule: rule21
  }, {
      start: 11361,
      length: 1,
      convRule: rule22
  }, {
      start: 11362,
      length: 1,
      convRule: rule150
  }, {
      start: 11363,
      length: 1,
      convRule: rule151
  }, {
      start: 11364,
      length: 1,
      convRule: rule152
  }, {
      start: 11365,
      length: 1,
      convRule: rule153
  }, {
      start: 11366,
      length: 1,
      convRule: rule154
  }, {
      start: 11367,
      length: 1,
      convRule: rule21
  }, {
      start: 11368,
      length: 1,
      convRule: rule22
  }, {
      start: 11369,
      length: 1,
      convRule: rule21
  }, {
      start: 11370,
      length: 1,
      convRule: rule22
  }, {
      start: 11371,
      length: 1,
      convRule: rule21
  }, {
      start: 11372,
      length: 1,
      convRule: rule22
  }, {
      start: 11373,
      length: 1,
      convRule: rule155
  }, {
      start: 11374,
      length: 1,
      convRule: rule156
  }, {
      start: 11375,
      length: 1,
      convRule: rule157
  }, {
      start: 11376,
      length: 1,
      convRule: rule158
  }, {
      start: 11377,
      length: 1,
      convRule: rule14
  }, {
      start: 11378,
      length: 1,
      convRule: rule21
  }, {
      start: 11379,
      length: 1,
      convRule: rule22
  }, {
      start: 11380,
      length: 1,
      convRule: rule14
  }, {
      start: 11381,
      length: 1,
      convRule: rule21
  }, {
      start: 11382,
      length: 1,
      convRule: rule22
  }, {
      start: 11383,
      length: 6,
      convRule: rule14
  }, {
      start: 11389,
      length: 1,
      convRule: rule83
  }, {
      start: 11390,
      length: 2,
      convRule: rule159
  }, {
      start: 11392,
      length: 1,
      convRule: rule21
  }, {
      start: 11393,
      length: 1,
      convRule: rule22
  }, {
      start: 11394,
      length: 1,
      convRule: rule21
  }, {
      start: 11395,
      length: 1,
      convRule: rule22
  }, {
      start: 11396,
      length: 1,
      convRule: rule21
  }, {
      start: 11397,
      length: 1,
      convRule: rule22
  }, {
      start: 11398,
      length: 1,
      convRule: rule21
  }, {
      start: 11399,
      length: 1,
      convRule: rule22
  }, {
      start: 11400,
      length: 1,
      convRule: rule21
  }, {
      start: 11401,
      length: 1,
      convRule: rule22
  }, {
      start: 11402,
      length: 1,
      convRule: rule21
  }, {
      start: 11403,
      length: 1,
      convRule: rule22
  }, {
      start: 11404,
      length: 1,
      convRule: rule21
  }, {
      start: 11405,
      length: 1,
      convRule: rule22
  }, {
      start: 11406,
      length: 1,
      convRule: rule21
  }, {
      start: 11407,
      length: 1,
      convRule: rule22
  }, {
      start: 11408,
      length: 1,
      convRule: rule21
  }, {
      start: 11409,
      length: 1,
      convRule: rule22
  }, {
      start: 11410,
      length: 1,
      convRule: rule21
  }, {
      start: 11411,
      length: 1,
      convRule: rule22
  }, {
      start: 11412,
      length: 1,
      convRule: rule21
  }, {
      start: 11413,
      length: 1,
      convRule: rule22
  }, {
      start: 11414,
      length: 1,
      convRule: rule21
  }, {
      start: 11415,
      length: 1,
      convRule: rule22
  }, {
      start: 11416,
      length: 1,
      convRule: rule21
  }, {
      start: 11417,
      length: 1,
      convRule: rule22
  }, {
      start: 11418,
      length: 1,
      convRule: rule21
  }, {
      start: 11419,
      length: 1,
      convRule: rule22
  }, {
      start: 11420,
      length: 1,
      convRule: rule21
  }, {
      start: 11421,
      length: 1,
      convRule: rule22
  }, {
      start: 11422,
      length: 1,
      convRule: rule21
  }, {
      start: 11423,
      length: 1,
      convRule: rule22
  }, {
      start: 11424,
      length: 1,
      convRule: rule21
  }, {
      start: 11425,
      length: 1,
      convRule: rule22
  }, {
      start: 11426,
      length: 1,
      convRule: rule21
  }, {
      start: 11427,
      length: 1,
      convRule: rule22
  }, {
      start: 11428,
      length: 1,
      convRule: rule21
  }, {
      start: 11429,
      length: 1,
      convRule: rule22
  }, {
      start: 11430,
      length: 1,
      convRule: rule21
  }, {
      start: 11431,
      length: 1,
      convRule: rule22
  }, {
      start: 11432,
      length: 1,
      convRule: rule21
  }, {
      start: 11433,
      length: 1,
      convRule: rule22
  }, {
      start: 11434,
      length: 1,
      convRule: rule21
  }, {
      start: 11435,
      length: 1,
      convRule: rule22
  }, {
      start: 11436,
      length: 1,
      convRule: rule21
  }, {
      start: 11437,
      length: 1,
      convRule: rule22
  }, {
      start: 11438,
      length: 1,
      convRule: rule21
  }, {
      start: 11439,
      length: 1,
      convRule: rule22
  }, {
      start: 11440,
      length: 1,
      convRule: rule21
  }, {
      start: 11441,
      length: 1,
      convRule: rule22
  }, {
      start: 11442,
      length: 1,
      convRule: rule21
  }, {
      start: 11443,
      length: 1,
      convRule: rule22
  }, {
      start: 11444,
      length: 1,
      convRule: rule21
  }, {
      start: 11445,
      length: 1,
      convRule: rule22
  }, {
      start: 11446,
      length: 1,
      convRule: rule21
  }, {
      start: 11447,
      length: 1,
      convRule: rule22
  }, {
      start: 11448,
      length: 1,
      convRule: rule21
  }, {
      start: 11449,
      length: 1,
      convRule: rule22
  }, {
      start: 11450,
      length: 1,
      convRule: rule21
  }, {
      start: 11451,
      length: 1,
      convRule: rule22
  }, {
      start: 11452,
      length: 1,
      convRule: rule21
  }, {
      start: 11453,
      length: 1,
      convRule: rule22
  }, {
      start: 11454,
      length: 1,
      convRule: rule21
  }, {
      start: 11455,
      length: 1,
      convRule: rule22
  }, {
      start: 11456,
      length: 1,
      convRule: rule21
  }, {
      start: 11457,
      length: 1,
      convRule: rule22
  }, {
      start: 11458,
      length: 1,
      convRule: rule21
  }, {
      start: 11459,
      length: 1,
      convRule: rule22
  }, {
      start: 11460,
      length: 1,
      convRule: rule21
  }, {
      start: 11461,
      length: 1,
      convRule: rule22
  }, {
      start: 11462,
      length: 1,
      convRule: rule21
  }, {
      start: 11463,
      length: 1,
      convRule: rule22
  }, {
      start: 11464,
      length: 1,
      convRule: rule21
  }, {
      start: 11465,
      length: 1,
      convRule: rule22
  }, {
      start: 11466,
      length: 1,
      convRule: rule21
  }, {
      start: 11467,
      length: 1,
      convRule: rule22
  }, {
      start: 11468,
      length: 1,
      convRule: rule21
  }, {
      start: 11469,
      length: 1,
      convRule: rule22
  }, {
      start: 11470,
      length: 1,
      convRule: rule21
  }, {
      start: 11471,
      length: 1,
      convRule: rule22
  }, {
      start: 11472,
      length: 1,
      convRule: rule21
  }, {
      start: 11473,
      length: 1,
      convRule: rule22
  }, {
      start: 11474,
      length: 1,
      convRule: rule21
  }, {
      start: 11475,
      length: 1,
      convRule: rule22
  }, {
      start: 11476,
      length: 1,
      convRule: rule21
  }, {
      start: 11477,
      length: 1,
      convRule: rule22
  }, {
      start: 11478,
      length: 1,
      convRule: rule21
  }, {
      start: 11479,
      length: 1,
      convRule: rule22
  }, {
      start: 11480,
      length: 1,
      convRule: rule21
  }, {
      start: 11481,
      length: 1,
      convRule: rule22
  }, {
      start: 11482,
      length: 1,
      convRule: rule21
  }, {
      start: 11483,
      length: 1,
      convRule: rule22
  }, {
      start: 11484,
      length: 1,
      convRule: rule21
  }, {
      start: 11485,
      length: 1,
      convRule: rule22
  }, {
      start: 11486,
      length: 1,
      convRule: rule21
  }, {
      start: 11487,
      length: 1,
      convRule: rule22
  }, {
      start: 11488,
      length: 1,
      convRule: rule21
  }, {
      start: 11489,
      length: 1,
      convRule: rule22
  }, {
      start: 11490,
      length: 1,
      convRule: rule21
  }, {
      start: 11491,
      length: 1,
      convRule: rule22
  }, {
      start: 11492,
      length: 1,
      convRule: rule14
  }, {
      start: 11493,
      length: 6,
      convRule: rule13
  }, {
      start: 11499,
      length: 1,
      convRule: rule21
  }, {
      start: 11500,
      length: 1,
      convRule: rule22
  }, {
      start: 11501,
      length: 1,
      convRule: rule21
  }, {
      start: 11502,
      length: 1,
      convRule: rule22
  }, {
      start: 11503,
      length: 3,
      convRule: rule84
  }, {
      start: 11513,
      length: 4,
      convRule: rule2
  }, {
      start: 11517,
      length: 1,
      convRule: rule17
  }, {
      start: 11518,
      length: 2,
      convRule: rule2
  }, {
      start: 11520,
      length: 38,
      convRule: rule160
  }, {
      start: 11568,
      length: 54,
      convRule: rule45
  }, {
      start: 11631,
      length: 1,
      convRule: rule83
  }, {
      start: 11632,
      length: 1,
      convRule: rule2
  }, {
      start: 11647,
      length: 1,
      convRule: rule84
  }, {
      start: 11648,
      length: 23,
      convRule: rule45
  }, {
      start: 11680,
      length: 7,
      convRule: rule45
  }, {
      start: 11688,
      length: 7,
      convRule: rule45
  }, {
      start: 11696,
      length: 7,
      convRule: rule45
  }, {
      start: 11704,
      length: 7,
      convRule: rule45
  }, {
      start: 11712,
      length: 7,
      convRule: rule45
  }, {
      start: 11720,
      length: 7,
      convRule: rule45
  }, {
      start: 11728,
      length: 7,
      convRule: rule45
  }, {
      start: 11736,
      length: 7,
      convRule: rule45
  }, {
      start: 11744,
      length: 32,
      convRule: rule84
  }, {
      start: 11776,
      length: 2,
      convRule: rule2
  }, {
      start: 11778,
      length: 1,
      convRule: rule15
  }, {
      start: 11779,
      length: 1,
      convRule: rule19
  }, {
      start: 11780,
      length: 1,
      convRule: rule15
  }, {
      start: 11781,
      length: 1,
      convRule: rule19
  }, {
      start: 11782,
      length: 3,
      convRule: rule2
  }, {
      start: 11785,
      length: 1,
      convRule: rule15
  }, {
      start: 11786,
      length: 1,
      convRule: rule19
  }, {
      start: 11787,
      length: 1,
      convRule: rule2
  }, {
      start: 11788,
      length: 1,
      convRule: rule15
  }, {
      start: 11789,
      length: 1,
      convRule: rule19
  }, {
      start: 11790,
      length: 9,
      convRule: rule2
  }, {
      start: 11799,
      length: 1,
      convRule: rule7
  }, {
      start: 11800,
      length: 2,
      convRule: rule2
  }, {
      start: 11802,
      length: 1,
      convRule: rule7
  }, {
      start: 11803,
      length: 1,
      convRule: rule2
  }, {
      start: 11804,
      length: 1,
      convRule: rule15
  }, {
      start: 11805,
      length: 1,
      convRule: rule19
  }, {
      start: 11806,
      length: 2,
      convRule: rule2
  }, {
      start: 11808,
      length: 1,
      convRule: rule15
  }, {
      start: 11809,
      length: 1,
      convRule: rule19
  }, {
      start: 11810,
      length: 1,
      convRule: rule4
  }, {
      start: 11811,
      length: 1,
      convRule: rule5
  }, {
      start: 11812,
      length: 1,
      convRule: rule4
  }, {
      start: 11813,
      length: 1,
      convRule: rule5
  }, {
      start: 11814,
      length: 1,
      convRule: rule4
  }, {
      start: 11815,
      length: 1,
      convRule: rule5
  }, {
      start: 11816,
      length: 1,
      convRule: rule4
  }, {
      start: 11817,
      length: 1,
      convRule: rule5
  }, {
      start: 11818,
      length: 5,
      convRule: rule2
  }, {
      start: 11823,
      length: 1,
      convRule: rule83
  }, {
      start: 11824,
      length: 2,
      convRule: rule2
  }, {
      start: 11904,
      length: 26,
      convRule: rule13
  }, {
      start: 11931,
      length: 89,
      convRule: rule13
  }, {
      start: 12032,
      length: 214,
      convRule: rule13
  }, {
      start: 12272,
      length: 12,
      convRule: rule13
  }, {
      start: 12288,
      length: 1,
      convRule: rule1
  }, {
      start: 12289,
      length: 3,
      convRule: rule2
  }, {
      start: 12292,
      length: 1,
      convRule: rule13
  }, {
      start: 12293,
      length: 1,
      convRule: rule83
  }, {
      start: 12294,
      length: 1,
      convRule: rule45
  }, {
      start: 12295,
      length: 1,
      convRule: rule116
  }, {
      start: 12296,
      length: 1,
      convRule: rule4
  }, {
      start: 12297,
      length: 1,
      convRule: rule5
  }, {
      start: 12298,
      length: 1,
      convRule: rule4
  }, {
      start: 12299,
      length: 1,
      convRule: rule5
  }, {
      start: 12300,
      length: 1,
      convRule: rule4
  }, {
      start: 12301,
      length: 1,
      convRule: rule5
  }, {
      start: 12302,
      length: 1,
      convRule: rule4
  }, {
      start: 12303,
      length: 1,
      convRule: rule5
  }, {
      start: 12304,
      length: 1,
      convRule: rule4
  }, {
      start: 12305,
      length: 1,
      convRule: rule5
  }, {
      start: 12306,
      length: 2,
      convRule: rule13
  }, {
      start: 12308,
      length: 1,
      convRule: rule4
  }, {
      start: 12309,
      length: 1,
      convRule: rule5
  }, {
      start: 12310,
      length: 1,
      convRule: rule4
  }, {
      start: 12311,
      length: 1,
      convRule: rule5
  }, {
      start: 12312,
      length: 1,
      convRule: rule4
  }, {
      start: 12313,
      length: 1,
      convRule: rule5
  }, {
      start: 12314,
      length: 1,
      convRule: rule4
  }, {
      start: 12315,
      length: 1,
      convRule: rule5
  }, {
      start: 12316,
      length: 1,
      convRule: rule7
  }, {
      start: 12317,
      length: 1,
      convRule: rule4
  }, {
      start: 12318,
      length: 2,
      convRule: rule5
  }, {
      start: 12320,
      length: 1,
      convRule: rule13
  }, {
      start: 12321,
      length: 9,
      convRule: rule116
  }, {
      start: 12330,
      length: 6,
      convRule: rule84
  }, {
      start: 12336,
      length: 1,
      convRule: rule7
  }, {
      start: 12337,
      length: 5,
      convRule: rule83
  }, {
      start: 12342,
      length: 2,
      convRule: rule13
  }, {
      start: 12344,
      length: 3,
      convRule: rule116
  }, {
      start: 12347,
      length: 1,
      convRule: rule83
  }, {
      start: 12348,
      length: 1,
      convRule: rule45
  }, {
      start: 12349,
      length: 1,
      convRule: rule2
  }, {
      start: 12350,
      length: 2,
      convRule: rule13
  }, {
      start: 12353,
      length: 86,
      convRule: rule45
  }, {
      start: 12441,
      length: 2,
      convRule: rule84
  }, {
      start: 12443,
      length: 2,
      convRule: rule10
  }, {
      start: 12445,
      length: 2,
      convRule: rule83
  }, {
      start: 12447,
      length: 1,
      convRule: rule45
  }, {
      start: 12448,
      length: 1,
      convRule: rule7
  }, {
      start: 12449,
      length: 90,
      convRule: rule45
  }, {
      start: 12539,
      length: 1,
      convRule: rule2
  }, {
      start: 12540,
      length: 3,
      convRule: rule83
  }, {
      start: 12543,
      length: 1,
      convRule: rule45
  }, {
      start: 12549,
      length: 41,
      convRule: rule45
  }, {
      start: 12593,
      length: 94,
      convRule: rule45
  }, {
      start: 12688,
      length: 2,
      convRule: rule13
  }, {
      start: 12690,
      length: 4,
      convRule: rule17
  }, {
      start: 12694,
      length: 10,
      convRule: rule13
  }, {
      start: 12704,
      length: 27,
      convRule: rule45
  }, {
      start: 12736,
      length: 36,
      convRule: rule13
  }, {
      start: 12784,
      length: 16,
      convRule: rule45
  }, {
      start: 12800,
      length: 31,
      convRule: rule13
  }, {
      start: 12832,
      length: 10,
      convRule: rule17
  }, {
      start: 12842,
      length: 39,
      convRule: rule13
  }, {
      start: 12881,
      length: 15,
      convRule: rule17
  }, {
      start: 12896,
      length: 32,
      convRule: rule13
  }, {
      start: 12928,
      length: 10,
      convRule: rule17
  }, {
      start: 12938,
      length: 39,
      convRule: rule13
  }, {
      start: 12977,
      length: 15,
      convRule: rule17
  }, {
      start: 12992,
      length: 63,
      convRule: rule13
  }, {
      start: 13056,
      length: 256,
      convRule: rule13
  }, {
      start: 13312,
      length: 6582,
      convRule: rule45
  }, {
      start: 19904,
      length: 64,
      convRule: rule13
  }, {
      start: 19968,
      length: 20940,
      convRule: rule45
  }, {
      start: 40960,
      length: 21,
      convRule: rule45
  }, {
      start: 40981,
      length: 1,
      convRule: rule83
  }, {
      start: 40982,
      length: 1143,
      convRule: rule45
  }, {
      start: 42128,
      length: 55,
      convRule: rule13
  }, {
      start: 42192,
      length: 40,
      convRule: rule45
  }, {
      start: 42232,
      length: 6,
      convRule: rule83
  }, {
      start: 42238,
      length: 2,
      convRule: rule2
  }, {
      start: 42240,
      length: 268,
      convRule: rule45
  }, {
      start: 42508,
      length: 1,
      convRule: rule83
  }, {
      start: 42509,
      length: 3,
      convRule: rule2
  }, {
      start: 42512,
      length: 16,
      convRule: rule45
  }, {
      start: 42528,
      length: 10,
      convRule: rule8
  }, {
      start: 42538,
      length: 2,
      convRule: rule45
  }, {
      start: 42560,
      length: 1,
      convRule: rule21
  }, {
      start: 42561,
      length: 1,
      convRule: rule22
  }, {
      start: 42562,
      length: 1,
      convRule: rule21
  }, {
      start: 42563,
      length: 1,
      convRule: rule22
  }, {
      start: 42564,
      length: 1,
      convRule: rule21
  }, {
      start: 42565,
      length: 1,
      convRule: rule22
  }, {
      start: 42566,
      length: 1,
      convRule: rule21
  }, {
      start: 42567,
      length: 1,
      convRule: rule22
  }, {
      start: 42568,
      length: 1,
      convRule: rule21
  }, {
      start: 42569,
      length: 1,
      convRule: rule22
  }, {
      start: 42570,
      length: 1,
      convRule: rule21
  }, {
      start: 42571,
      length: 1,
      convRule: rule22
  }, {
      start: 42572,
      length: 1,
      convRule: rule21
  }, {
      start: 42573,
      length: 1,
      convRule: rule22
  }, {
      start: 42574,
      length: 1,
      convRule: rule21
  }, {
      start: 42575,
      length: 1,
      convRule: rule22
  }, {
      start: 42576,
      length: 1,
      convRule: rule21
  }, {
      start: 42577,
      length: 1,
      convRule: rule22
  }, {
      start: 42578,
      length: 1,
      convRule: rule21
  }, {
      start: 42579,
      length: 1,
      convRule: rule22
  }, {
      start: 42580,
      length: 1,
      convRule: rule21
  }, {
      start: 42581,
      length: 1,
      convRule: rule22
  }, {
      start: 42582,
      length: 1,
      convRule: rule21
  }, {
      start: 42583,
      length: 1,
      convRule: rule22
  }, {
      start: 42584,
      length: 1,
      convRule: rule21
  }, {
      start: 42585,
      length: 1,
      convRule: rule22
  }, {
      start: 42586,
      length: 1,
      convRule: rule21
  }, {
      start: 42587,
      length: 1,
      convRule: rule22
  }, {
      start: 42588,
      length: 1,
      convRule: rule21
  }, {
      start: 42589,
      length: 1,
      convRule: rule22
  }, {
      start: 42590,
      length: 1,
      convRule: rule21
  }, {
      start: 42591,
      length: 1,
      convRule: rule22
  }, {
      start: 42592,
      length: 1,
      convRule: rule21
  }, {
      start: 42593,
      length: 1,
      convRule: rule22
  }, {
      start: 42594,
      length: 1,
      convRule: rule21
  }, {
      start: 42595,
      length: 1,
      convRule: rule22
  }, {
      start: 42596,
      length: 1,
      convRule: rule21
  }, {
      start: 42597,
      length: 1,
      convRule: rule22
  }, {
      start: 42598,
      length: 1,
      convRule: rule21
  }, {
      start: 42599,
      length: 1,
      convRule: rule22
  }, {
      start: 42600,
      length: 1,
      convRule: rule21
  }, {
      start: 42601,
      length: 1,
      convRule: rule22
  }, {
      start: 42602,
      length: 1,
      convRule: rule21
  }, {
      start: 42603,
      length: 1,
      convRule: rule22
  }, {
      start: 42604,
      length: 1,
      convRule: rule21
  }, {
      start: 42605,
      length: 1,
      convRule: rule22
  }, {
      start: 42606,
      length: 1,
      convRule: rule45
  }, {
      start: 42607,
      length: 1,
      convRule: rule84
  }, {
      start: 42608,
      length: 3,
      convRule: rule109
  }, {
      start: 42611,
      length: 1,
      convRule: rule2
  }, {
      start: 42620,
      length: 2,
      convRule: rule84
  }, {
      start: 42622,
      length: 1,
      convRule: rule2
  }, {
      start: 42623,
      length: 1,
      convRule: rule83
  }, {
      start: 42624,
      length: 1,
      convRule: rule21
  }, {
      start: 42625,
      length: 1,
      convRule: rule22
  }, {
      start: 42626,
      length: 1,
      convRule: rule21
  }, {
      start: 42627,
      length: 1,
      convRule: rule22
  }, {
      start: 42628,
      length: 1,
      convRule: rule21
  }, {
      start: 42629,
      length: 1,
      convRule: rule22
  }, {
      start: 42630,
      length: 1,
      convRule: rule21
  }, {
      start: 42631,
      length: 1,
      convRule: rule22
  }, {
      start: 42632,
      length: 1,
      convRule: rule21
  }, {
      start: 42633,
      length: 1,
      convRule: rule22
  }, {
      start: 42634,
      length: 1,
      convRule: rule21
  }, {
      start: 42635,
      length: 1,
      convRule: rule22
  }, {
      start: 42636,
      length: 1,
      convRule: rule21
  }, {
      start: 42637,
      length: 1,
      convRule: rule22
  }, {
      start: 42638,
      length: 1,
      convRule: rule21
  }, {
      start: 42639,
      length: 1,
      convRule: rule22
  }, {
      start: 42640,
      length: 1,
      convRule: rule21
  }, {
      start: 42641,
      length: 1,
      convRule: rule22
  }, {
      start: 42642,
      length: 1,
      convRule: rule21
  }, {
      start: 42643,
      length: 1,
      convRule: rule22
  }, {
      start: 42644,
      length: 1,
      convRule: rule21
  }, {
      start: 42645,
      length: 1,
      convRule: rule22
  }, {
      start: 42646,
      length: 1,
      convRule: rule21
  }, {
      start: 42647,
      length: 1,
      convRule: rule22
  }, {
      start: 42656,
      length: 70,
      convRule: rule45
  }, {
      start: 42726,
      length: 10,
      convRule: rule116
  }, {
      start: 42736,
      length: 2,
      convRule: rule84
  }, {
      start: 42738,
      length: 6,
      convRule: rule2
  }, {
      start: 42752,
      length: 23,
      convRule: rule10
  }, {
      start: 42775,
      length: 9,
      convRule: rule83
  }, {
      start: 42784,
      length: 2,
      convRule: rule10
  }, {
      start: 42786,
      length: 1,
      convRule: rule21
  }, {
      start: 42787,
      length: 1,
      convRule: rule22
  }, {
      start: 42788,
      length: 1,
      convRule: rule21
  }, {
      start: 42789,
      length: 1,
      convRule: rule22
  }, {
      start: 42790,
      length: 1,
      convRule: rule21
  }, {
      start: 42791,
      length: 1,
      convRule: rule22
  }, {
      start: 42792,
      length: 1,
      convRule: rule21
  }, {
      start: 42793,
      length: 1,
      convRule: rule22
  }, {
      start: 42794,
      length: 1,
      convRule: rule21
  }, {
      start: 42795,
      length: 1,
      convRule: rule22
  }, {
      start: 42796,
      length: 1,
      convRule: rule21
  }, {
      start: 42797,
      length: 1,
      convRule: rule22
  }, {
      start: 42798,
      length: 1,
      convRule: rule21
  }, {
      start: 42799,
      length: 1,
      convRule: rule22
  }, {
      start: 42800,
      length: 2,
      convRule: rule14
  }, {
      start: 42802,
      length: 1,
      convRule: rule21
  }, {
      start: 42803,
      length: 1,
      convRule: rule22
  }, {
      start: 42804,
      length: 1,
      convRule: rule21
  }, {
      start: 42805,
      length: 1,
      convRule: rule22
  }, {
      start: 42806,
      length: 1,
      convRule: rule21
  }, {
      start: 42807,
      length: 1,
      convRule: rule22
  }, {
      start: 42808,
      length: 1,
      convRule: rule21
  }, {
      start: 42809,
      length: 1,
      convRule: rule22
  }, {
      start: 42810,
      length: 1,
      convRule: rule21
  }, {
      start: 42811,
      length: 1,
      convRule: rule22
  }, {
      start: 42812,
      length: 1,
      convRule: rule21
  }, {
      start: 42813,
      length: 1,
      convRule: rule22
  }, {
      start: 42814,
      length: 1,
      convRule: rule21
  }, {
      start: 42815,
      length: 1,
      convRule: rule22
  }, {
      start: 42816,
      length: 1,
      convRule: rule21
  }, {
      start: 42817,
      length: 1,
      convRule: rule22
  }, {
      start: 42818,
      length: 1,
      convRule: rule21
  }, {
      start: 42819,
      length: 1,
      convRule: rule22
  }, {
      start: 42820,
      length: 1,
      convRule: rule21
  }, {
      start: 42821,
      length: 1,
      convRule: rule22
  }, {
      start: 42822,
      length: 1,
      convRule: rule21
  }, {
      start: 42823,
      length: 1,
      convRule: rule22
  }, {
      start: 42824,
      length: 1,
      convRule: rule21
  }, {
      start: 42825,
      length: 1,
      convRule: rule22
  }, {
      start: 42826,
      length: 1,
      convRule: rule21
  }, {
      start: 42827,
      length: 1,
      convRule: rule22
  }, {
      start: 42828,
      length: 1,
      convRule: rule21
  }, {
      start: 42829,
      length: 1,
      convRule: rule22
  }, {
      start: 42830,
      length: 1,
      convRule: rule21
  }, {
      start: 42831,
      length: 1,
      convRule: rule22
  }, {
      start: 42832,
      length: 1,
      convRule: rule21
  }, {
      start: 42833,
      length: 1,
      convRule: rule22
  }, {
      start: 42834,
      length: 1,
      convRule: rule21
  }, {
      start: 42835,
      length: 1,
      convRule: rule22
  }, {
      start: 42836,
      length: 1,
      convRule: rule21
  }, {
      start: 42837,
      length: 1,
      convRule: rule22
  }, {
      start: 42838,
      length: 1,
      convRule: rule21
  }, {
      start: 42839,
      length: 1,
      convRule: rule22
  }, {
      start: 42840,
      length: 1,
      convRule: rule21
  }, {
      start: 42841,
      length: 1,
      convRule: rule22
  }, {
      start: 42842,
      length: 1,
      convRule: rule21
  }, {
      start: 42843,
      length: 1,
      convRule: rule22
  }, {
      start: 42844,
      length: 1,
      convRule: rule21
  }, {
      start: 42845,
      length: 1,
      convRule: rule22
  }, {
      start: 42846,
      length: 1,
      convRule: rule21
  }, {
      start: 42847,
      length: 1,
      convRule: rule22
  }, {
      start: 42848,
      length: 1,
      convRule: rule21
  }, {
      start: 42849,
      length: 1,
      convRule: rule22
  }, {
      start: 42850,
      length: 1,
      convRule: rule21
  }, {
      start: 42851,
      length: 1,
      convRule: rule22
  }, {
      start: 42852,
      length: 1,
      convRule: rule21
  }, {
      start: 42853,
      length: 1,
      convRule: rule22
  }, {
      start: 42854,
      length: 1,
      convRule: rule21
  }, {
      start: 42855,
      length: 1,
      convRule: rule22
  }, {
      start: 42856,
      length: 1,
      convRule: rule21
  }, {
      start: 42857,
      length: 1,
      convRule: rule22
  }, {
      start: 42858,
      length: 1,
      convRule: rule21
  }, {
      start: 42859,
      length: 1,
      convRule: rule22
  }, {
      start: 42860,
      length: 1,
      convRule: rule21
  }, {
      start: 42861,
      length: 1,
      convRule: rule22
  }, {
      start: 42862,
      length: 1,
      convRule: rule21
  }, {
      start: 42863,
      length: 1,
      convRule: rule22
  }, {
      start: 42864,
      length: 1,
      convRule: rule83
  }, {
      start: 42865,
      length: 8,
      convRule: rule14
  }, {
      start: 42873,
      length: 1,
      convRule: rule21
  }, {
      start: 42874,
      length: 1,
      convRule: rule22
  }, {
      start: 42875,
      length: 1,
      convRule: rule21
  }, {
      start: 42876,
      length: 1,
      convRule: rule22
  }, {
      start: 42877,
      length: 1,
      convRule: rule161
  }, {
      start: 42878,
      length: 1,
      convRule: rule21
  }, {
      start: 42879,
      length: 1,
      convRule: rule22
  }, {
      start: 42880,
      length: 1,
      convRule: rule21
  }, {
      start: 42881,
      length: 1,
      convRule: rule22
  }, {
      start: 42882,
      length: 1,
      convRule: rule21
  }, {
      start: 42883,
      length: 1,
      convRule: rule22
  }, {
      start: 42884,
      length: 1,
      convRule: rule21
  }, {
      start: 42885,
      length: 1,
      convRule: rule22
  }, {
      start: 42886,
      length: 1,
      convRule: rule21
  }, {
      start: 42887,
      length: 1,
      convRule: rule22
  }, {
      start: 42888,
      length: 1,
      convRule: rule83
  }, {
      start: 42889,
      length: 2,
      convRule: rule10
  }, {
      start: 42891,
      length: 1,
      convRule: rule21
  }, {
      start: 42892,
      length: 1,
      convRule: rule22
  }, {
      start: 42893,
      length: 1,
      convRule: rule162
  }, {
      start: 42894,
      length: 1,
      convRule: rule14
  }, {
      start: 42896,
      length: 1,
      convRule: rule21
  }, {
      start: 42897,
      length: 1,
      convRule: rule22
  }, {
      start: 42912,
      length: 1,
      convRule: rule21
  }, {
      start: 42913,
      length: 1,
      convRule: rule22
  }, {
      start: 42914,
      length: 1,
      convRule: rule21
  }, {
      start: 42915,
      length: 1,
      convRule: rule22
  }, {
      start: 42916,
      length: 1,
      convRule: rule21
  }, {
      start: 42917,
      length: 1,
      convRule: rule22
  }, {
      start: 42918,
      length: 1,
      convRule: rule21
  }, {
      start: 42919,
      length: 1,
      convRule: rule22
  }, {
      start: 42920,
      length: 1,
      convRule: rule21
  }, {
      start: 42921,
      length: 1,
      convRule: rule22
  }, {
      start: 43002,
      length: 1,
      convRule: rule14
  }, {
      start: 43003,
      length: 7,
      convRule: rule45
  }, {
      start: 43010,
      length: 1,
      convRule: rule84
  }, {
      start: 43011,
      length: 3,
      convRule: rule45
  }, {
      start: 43014,
      length: 1,
      convRule: rule84
  }, {
      start: 43015,
      length: 4,
      convRule: rule45
  }, {
      start: 43019,
      length: 1,
      convRule: rule84
  }, {
      start: 43020,
      length: 23,
      convRule: rule45
  }, {
      start: 43043,
      length: 2,
      convRule: rule114
  }, {
      start: 43045,
      length: 2,
      convRule: rule84
  }, {
      start: 43047,
      length: 1,
      convRule: rule114
  }, {
      start: 43048,
      length: 4,
      convRule: rule13
  }, {
      start: 43056,
      length: 6,
      convRule: rule17
  }, {
      start: 43062,
      length: 2,
      convRule: rule13
  }, {
      start: 43064,
      length: 1,
      convRule: rule3
  }, {
      start: 43065,
      length: 1,
      convRule: rule13
  }, {
      start: 43072,
      length: 52,
      convRule: rule45
  }, {
      start: 43124,
      length: 4,
      convRule: rule2
  }, {
      start: 43136,
      length: 2,
      convRule: rule114
  }, {
      start: 43138,
      length: 50,
      convRule: rule45
  }, {
      start: 43188,
      length: 16,
      convRule: rule114
  }, {
      start: 43204,
      length: 1,
      convRule: rule84
  }, {
      start: 43214,
      length: 2,
      convRule: rule2
  }, {
      start: 43216,
      length: 10,
      convRule: rule8
  }, {
      start: 43232,
      length: 18,
      convRule: rule84
  }, {
      start: 43250,
      length: 6,
      convRule: rule45
  }, {
      start: 43256,
      length: 3,
      convRule: rule2
  }, {
      start: 43259,
      length: 1,
      convRule: rule45
  }, {
      start: 43264,
      length: 10,
      convRule: rule8
  }, {
      start: 43274,
      length: 28,
      convRule: rule45
  }, {
      start: 43302,
      length: 8,
      convRule: rule84
  }, {
      start: 43310,
      length: 2,
      convRule: rule2
  }, {
      start: 43312,
      length: 23,
      convRule: rule45
  }, {
      start: 43335,
      length: 11,
      convRule: rule84
  }, {
      start: 43346,
      length: 2,
      convRule: rule114
  }, {
      start: 43359,
      length: 1,
      convRule: rule2
  }, {
      start: 43360,
      length: 29,
      convRule: rule45
  }, {
      start: 43392,
      length: 3,
      convRule: rule84
  }, {
      start: 43395,
      length: 1,
      convRule: rule114
  }, {
      start: 43396,
      length: 47,
      convRule: rule45
  }, {
      start: 43443,
      length: 1,
      convRule: rule84
  }, {
      start: 43444,
      length: 2,
      convRule: rule114
  }, {
      start: 43446,
      length: 4,
      convRule: rule84
  }, {
      start: 43450,
      length: 2,
      convRule: rule114
  }, {
      start: 43452,
      length: 1,
      convRule: rule84
  }, {
      start: 43453,
      length: 4,
      convRule: rule114
  }, {
      start: 43457,
      length: 13,
      convRule: rule2
  }, {
      start: 43471,
      length: 1,
      convRule: rule83
  }, {
      start: 43472,
      length: 10,
      convRule: rule8
  }, {
      start: 43486,
      length: 2,
      convRule: rule2
  }, {
      start: 43520,
      length: 41,
      convRule: rule45
  }, {
      start: 43561,
      length: 6,
      convRule: rule84
  }, {
      start: 43567,
      length: 2,
      convRule: rule114
  }, {
      start: 43569,
      length: 2,
      convRule: rule84
  }, {
      start: 43571,
      length: 2,
      convRule: rule114
  }, {
      start: 43573,
      length: 2,
      convRule: rule84
  }, {
      start: 43584,
      length: 3,
      convRule: rule45
  }, {
      start: 43587,
      length: 1,
      convRule: rule84
  }, {
      start: 43588,
      length: 8,
      convRule: rule45
  }, {
      start: 43596,
      length: 1,
      convRule: rule84
  }, {
      start: 43597,
      length: 1,
      convRule: rule114
  }, {
      start: 43600,
      length: 10,
      convRule: rule8
  }, {
      start: 43612,
      length: 4,
      convRule: rule2
  }, {
      start: 43616,
      length: 16,
      convRule: rule45
  }, {
      start: 43632,
      length: 1,
      convRule: rule83
  }, {
      start: 43633,
      length: 6,
      convRule: rule45
  }, {
      start: 43639,
      length: 3,
      convRule: rule13
  }, {
      start: 43642,
      length: 1,
      convRule: rule45
  }, {
      start: 43643,
      length: 1,
      convRule: rule114
  }, {
      start: 43648,
      length: 48,
      convRule: rule45
  }, {
      start: 43696,
      length: 1,
      convRule: rule84
  }, {
      start: 43697,
      length: 1,
      convRule: rule45
  }, {
      start: 43698,
      length: 3,
      convRule: rule84
  }, {
      start: 43701,
      length: 2,
      convRule: rule45
  }, {
      start: 43703,
      length: 2,
      convRule: rule84
  }, {
      start: 43705,
      length: 5,
      convRule: rule45
  }, {
      start: 43710,
      length: 2,
      convRule: rule84
  }, {
      start: 43712,
      length: 1,
      convRule: rule45
  }, {
      start: 43713,
      length: 1,
      convRule: rule84
  }, {
      start: 43714,
      length: 1,
      convRule: rule45
  }, {
      start: 43739,
      length: 2,
      convRule: rule45
  }, {
      start: 43741,
      length: 1,
      convRule: rule83
  }, {
      start: 43742,
      length: 2,
      convRule: rule2
  }, {
      start: 43777,
      length: 6,
      convRule: rule45
  }, {
      start: 43785,
      length: 6,
      convRule: rule45
  }, {
      start: 43793,
      length: 6,
      convRule: rule45
  }, {
      start: 43808,
      length: 7,
      convRule: rule45
  }, {
      start: 43816,
      length: 7,
      convRule: rule45
  }, {
      start: 43968,
      length: 35,
      convRule: rule45
  }, {
      start: 44003,
      length: 2,
      convRule: rule114
  }, {
      start: 44005,
      length: 1,
      convRule: rule84
  }, {
      start: 44006,
      length: 2,
      convRule: rule114
  }, {
      start: 44008,
      length: 1,
      convRule: rule84
  }, {
      start: 44009,
      length: 2,
      convRule: rule114
  }, {
      start: 44011,
      length: 1,
      convRule: rule2
  }, {
      start: 44012,
      length: 1,
      convRule: rule114
  }, {
      start: 44013,
      length: 1,
      convRule: rule84
  }, {
      start: 44016,
      length: 10,
      convRule: rule8
  }, {
      start: 44032,
      length: 11172,
      convRule: rule45
  }, {
      start: 55216,
      length: 23,
      convRule: rule45
  }, {
      start: 55243,
      length: 49,
      convRule: rule45
  }, {
      start: 55296,
      length: 896,
      convRule: rule163
  }, {
      start: 56192,
      length: 128,
      convRule: rule163
  }, {
      start: 56320,
      length: 1024,
      convRule: rule163
  }, {
      start: 57344,
      length: 6400,
      convRule: rule164
  }, {
      start: 63744,
      length: 302,
      convRule: rule45
  }, {
      start: 64048,
      length: 62,
      convRule: rule45
  }, {
      start: 64112,
      length: 106,
      convRule: rule45
  }, {
      start: 64256,
      length: 7,
      convRule: rule14
  }, {
      start: 64275,
      length: 5,
      convRule: rule14
  }, {
      start: 64285,
      length: 1,
      convRule: rule45
  }, {
      start: 64286,
      length: 1,
      convRule: rule84
  }, {
      start: 64287,
      length: 10,
      convRule: rule45
  }, {
      start: 64297,
      length: 1,
      convRule: rule6
  }, {
      start: 64298,
      length: 13,
      convRule: rule45
  }, {
      start: 64312,
      length: 5,
      convRule: rule45
  }, {
      start: 64318,
      length: 1,
      convRule: rule45
  }, {
      start: 64320,
      length: 2,
      convRule: rule45
  }, {
      start: 64323,
      length: 2,
      convRule: rule45
  }, {
      start: 64326,
      length: 108,
      convRule: rule45
  }, {
      start: 64434,
      length: 16,
      convRule: rule10
  }, {
      start: 64467,
      length: 363,
      convRule: rule45
  }, {
      start: 64830,
      length: 1,
      convRule: rule4
  }, {
      start: 64831,
      length: 1,
      convRule: rule5
  }, {
      start: 64848,
      length: 64,
      convRule: rule45
  }, {
      start: 64914,
      length: 54,
      convRule: rule45
  }, {
      start: 65008,
      length: 12,
      convRule: rule45
  }, {
      start: 65020,
      length: 1,
      convRule: rule3
  }, {
      start: 65021,
      length: 1,
      convRule: rule13
  }, {
      start: 65024,
      length: 16,
      convRule: rule84
  }, {
      start: 65040,
      length: 7,
      convRule: rule2
  }, {
      start: 65047,
      length: 1,
      convRule: rule4
  }, {
      start: 65048,
      length: 1,
      convRule: rule5
  }, {
      start: 65049,
      length: 1,
      convRule: rule2
  }, {
      start: 65056,
      length: 7,
      convRule: rule84
  }, {
      start: 65072,
      length: 1,
      convRule: rule2
  }, {
      start: 65073,
      length: 2,
      convRule: rule7
  }, {
      start: 65075,
      length: 2,
      convRule: rule11
  }, {
      start: 65077,
      length: 1,
      convRule: rule4
  }, {
      start: 65078,
      length: 1,
      convRule: rule5
  }, {
      start: 65079,
      length: 1,
      convRule: rule4
  }, {
      start: 65080,
      length: 1,
      convRule: rule5
  }, {
      start: 65081,
      length: 1,
      convRule: rule4
  }, {
      start: 65082,
      length: 1,
      convRule: rule5
  }, {
      start: 65083,
      length: 1,
      convRule: rule4
  }, {
      start: 65084,
      length: 1,
      convRule: rule5
  }, {
      start: 65085,
      length: 1,
      convRule: rule4
  }, {
      start: 65086,
      length: 1,
      convRule: rule5
  }, {
      start: 65087,
      length: 1,
      convRule: rule4
  }, {
      start: 65088,
      length: 1,
      convRule: rule5
  }, {
      start: 65089,
      length: 1,
      convRule: rule4
  }, {
      start: 65090,
      length: 1,
      convRule: rule5
  }, {
      start: 65091,
      length: 1,
      convRule: rule4
  }, {
      start: 65092,
      length: 1,
      convRule: rule5
  }, {
      start: 65093,
      length: 2,
      convRule: rule2
  }, {
      start: 65095,
      length: 1,
      convRule: rule4
  }, {
      start: 65096,
      length: 1,
      convRule: rule5
  }, {
      start: 65097,
      length: 4,
      convRule: rule2
  }, {
      start: 65101,
      length: 3,
      convRule: rule11
  }, {
      start: 65104,
      length: 3,
      convRule: rule2
  }, {
      start: 65108,
      length: 4,
      convRule: rule2
  }, {
      start: 65112,
      length: 1,
      convRule: rule7
  }, {
      start: 65113,
      length: 1,
      convRule: rule4
  }, {
      start: 65114,
      length: 1,
      convRule: rule5
  }, {
      start: 65115,
      length: 1,
      convRule: rule4
  }, {
      start: 65116,
      length: 1,
      convRule: rule5
  }, {
      start: 65117,
      length: 1,
      convRule: rule4
  }, {
      start: 65118,
      length: 1,
      convRule: rule5
  }, {
      start: 65119,
      length: 3,
      convRule: rule2
  }, {
      start: 65122,
      length: 1,
      convRule: rule6
  }, {
      start: 65123,
      length: 1,
      convRule: rule7
  }, {
      start: 65124,
      length: 3,
      convRule: rule6
  }, {
      start: 65128,
      length: 1,
      convRule: rule2
  }, {
      start: 65129,
      length: 1,
      convRule: rule3
  }, {
      start: 65130,
      length: 2,
      convRule: rule2
  }, {
      start: 65136,
      length: 5,
      convRule: rule45
  }, {
      start: 65142,
      length: 135,
      convRule: rule45
  }, {
      start: 65279,
      length: 1,
      convRule: rule16
  }, {
      start: 65281,
      length: 3,
      convRule: rule2
  }, {
      start: 65284,
      length: 1,
      convRule: rule3
  }, {
      start: 65285,
      length: 3,
      convRule: rule2
  }, {
      start: 65288,
      length: 1,
      convRule: rule4
  }, {
      start: 65289,
      length: 1,
      convRule: rule5
  }, {
      start: 65290,
      length: 1,
      convRule: rule2
  }, {
      start: 65291,
      length: 1,
      convRule: rule6
  }, {
      start: 65292,
      length: 1,
      convRule: rule2
  }, {
      start: 65293,
      length: 1,
      convRule: rule7
  }, {
      start: 65294,
      length: 2,
      convRule: rule2
  }, {
      start: 65296,
      length: 10,
      convRule: rule8
  }, {
      start: 65306,
      length: 2,
      convRule: rule2
  }, {
      start: 65308,
      length: 3,
      convRule: rule6
  }, {
      start: 65311,
      length: 2,
      convRule: rule2
  }, {
      start: 65313,
      length: 26,
      convRule: rule9
  }, {
      start: 65339,
      length: 1,
      convRule: rule4
  }, {
      start: 65340,
      length: 1,
      convRule: rule2
  }, {
      start: 65341,
      length: 1,
      convRule: rule5
  }, {
      start: 65342,
      length: 1,
      convRule: rule10
  }, {
      start: 65343,
      length: 1,
      convRule: rule11
  }, {
      start: 65344,
      length: 1,
      convRule: rule10
  }, {
      start: 65345,
      length: 26,
      convRule: rule12
  }, {
      start: 65371,
      length: 1,
      convRule: rule4
  }, {
      start: 65372,
      length: 1,
      convRule: rule6
  }, {
      start: 65373,
      length: 1,
      convRule: rule5
  }, {
      start: 65374,
      length: 1,
      convRule: rule6
  }, {
      start: 65375,
      length: 1,
      convRule: rule4
  }, {
      start: 65376,
      length: 1,
      convRule: rule5
  }, {
      start: 65377,
      length: 1,
      convRule: rule2
  }, {
      start: 65378,
      length: 1,
      convRule: rule4
  }, {
      start: 65379,
      length: 1,
      convRule: rule5
  }, {
      start: 65380,
      length: 2,
      convRule: rule2
  }, {
      start: 65382,
      length: 10,
      convRule: rule45
  }, {
      start: 65392,
      length: 1,
      convRule: rule83
  }, {
      start: 65393,
      length: 45,
      convRule: rule45
  }, {
      start: 65438,
      length: 2,
      convRule: rule83
  }, {
      start: 65440,
      length: 31,
      convRule: rule45
  }, {
      start: 65474,
      length: 6,
      convRule: rule45
  }, {
      start: 65482,
      length: 6,
      convRule: rule45
  }, {
      start: 65490,
      length: 6,
      convRule: rule45
  }, {
      start: 65498,
      length: 3,
      convRule: rule45
  }, {
      start: 65504,
      length: 2,
      convRule: rule3
  }, {
      start: 65506,
      length: 1,
      convRule: rule6
  }, {
      start: 65507,
      length: 1,
      convRule: rule10
  }, {
      start: 65508,
      length: 1,
      convRule: rule13
  }, {
      start: 65509,
      length: 2,
      convRule: rule3
  }, {
      start: 65512,
      length: 1,
      convRule: rule13
  }, {
      start: 65513,
      length: 4,
      convRule: rule6
  }, {
      start: 65517,
      length: 2,
      convRule: rule13
  }, {
      start: 65529,
      length: 3,
      convRule: rule16
  }, {
      start: 65532,
      length: 2,
      convRule: rule13
  }, {
      start: 65536,
      length: 12,
      convRule: rule45
  }, {
      start: 65549,
      length: 26,
      convRule: rule45
  }, {
      start: 65576,
      length: 19,
      convRule: rule45
  }, {
      start: 65596,
      length: 2,
      convRule: rule45
  }, {
      start: 65599,
      length: 15,
      convRule: rule45
  }, {
      start: 65616,
      length: 14,
      convRule: rule45
  }, {
      start: 65664,
      length: 123,
      convRule: rule45
  }, {
      start: 65792,
      length: 2,
      convRule: rule2
  }, {
      start: 65794,
      length: 1,
      convRule: rule13
  }, {
      start: 65799,
      length: 45,
      convRule: rule17
  }, {
      start: 65847,
      length: 9,
      convRule: rule13
  }, {
      start: 65856,
      length: 53,
      convRule: rule116
  }, {
      start: 65909,
      length: 4,
      convRule: rule17
  }, {
      start: 65913,
      length: 17,
      convRule: rule13
  }, {
      start: 65930,
      length: 1,
      convRule: rule17
  }, {
      start: 65936,
      length: 12,
      convRule: rule13
  }, {
      start: 66000,
      length: 45,
      convRule: rule13
  }, {
      start: 66045,
      length: 1,
      convRule: rule84
  }, {
      start: 66176,
      length: 29,
      convRule: rule45
  }, {
      start: 66208,
      length: 49,
      convRule: rule45
  }, {
      start: 66304,
      length: 31,
      convRule: rule45
  }, {
      start: 66336,
      length: 4,
      convRule: rule17
  }, {
      start: 66352,
      length: 17,
      convRule: rule45
  }, {
      start: 66369,
      length: 1,
      convRule: rule116
  }, {
      start: 66370,
      length: 8,
      convRule: rule45
  }, {
      start: 66378,
      length: 1,
      convRule: rule116
  }, {
      start: 66432,
      length: 30,
      convRule: rule45
  }, {
      start: 66463,
      length: 1,
      convRule: rule2
  }, {
      start: 66464,
      length: 36,
      convRule: rule45
  }, {
      start: 66504,
      length: 8,
      convRule: rule45
  }, {
      start: 66512,
      length: 1,
      convRule: rule2
  }, {
      start: 66513,
      length: 5,
      convRule: rule116
  }, {
      start: 66560,
      length: 40,
      convRule: rule165
  }, {
      start: 66600,
      length: 40,
      convRule: rule166
  }, {
      start: 66640,
      length: 78,
      convRule: rule45
  }, {
      start: 66720,
      length: 10,
      convRule: rule8
  }, {
      start: 67584,
      length: 6,
      convRule: rule45
  }, {
      start: 67592,
      length: 1,
      convRule: rule45
  }, {
      start: 67594,
      length: 44,
      convRule: rule45
  }, {
      start: 67639,
      length: 2,
      convRule: rule45
  }, {
      start: 67644,
      length: 1,
      convRule: rule45
  }, {
      start: 67647,
      length: 23,
      convRule: rule45
  }, {
      start: 67671,
      length: 1,
      convRule: rule2
  }, {
      start: 67672,
      length: 8,
      convRule: rule17
  }, {
      start: 67840,
      length: 22,
      convRule: rule45
  }, {
      start: 67862,
      length: 6,
      convRule: rule17
  }, {
      start: 67871,
      length: 1,
      convRule: rule2
  }, {
      start: 67872,
      length: 26,
      convRule: rule45
  }, {
      start: 67903,
      length: 1,
      convRule: rule2
  }, {
      start: 68096,
      length: 1,
      convRule: rule45
  }, {
      start: 68097,
      length: 3,
      convRule: rule84
  }, {
      start: 68101,
      length: 2,
      convRule: rule84
  }, {
      start: 68108,
      length: 4,
      convRule: rule84
  }, {
      start: 68112,
      length: 4,
      convRule: rule45
  }, {
      start: 68117,
      length: 3,
      convRule: rule45
  }, {
      start: 68121,
      length: 27,
      convRule: rule45
  }, {
      start: 68152,
      length: 3,
      convRule: rule84
  }, {
      start: 68159,
      length: 1,
      convRule: rule84
  }, {
      start: 68160,
      length: 8,
      convRule: rule17
  }, {
      start: 68176,
      length: 9,
      convRule: rule2
  }, {
      start: 68192,
      length: 29,
      convRule: rule45
  }, {
      start: 68221,
      length: 2,
      convRule: rule17
  }, {
      start: 68223,
      length: 1,
      convRule: rule2
  }, {
      start: 68352,
      length: 54,
      convRule: rule45
  }, {
      start: 68409,
      length: 7,
      convRule: rule2
  }, {
      start: 68416,
      length: 22,
      convRule: rule45
  }, {
      start: 68440,
      length: 8,
      convRule: rule17
  }, {
      start: 68448,
      length: 19,
      convRule: rule45
  }, {
      start: 68472,
      length: 8,
      convRule: rule17
  }, {
      start: 68608,
      length: 73,
      convRule: rule45
  }, {
      start: 69216,
      length: 31,
      convRule: rule17
  }, {
      start: 69632,
      length: 1,
      convRule: rule114
  }, {
      start: 69633,
      length: 1,
      convRule: rule84
  }, {
      start: 69634,
      length: 1,
      convRule: rule114
  }, {
      start: 69635,
      length: 53,
      convRule: rule45
  }, {
      start: 69688,
      length: 15,
      convRule: rule84
  }, {
      start: 69703,
      length: 7,
      convRule: rule2
  }, {
      start: 69714,
      length: 20,
      convRule: rule17
  }, {
      start: 69734,
      length: 10,
      convRule: rule8
  }, {
      start: 69760,
      length: 2,
      convRule: rule84
  }, {
      start: 69762,
      length: 1,
      convRule: rule114
  }, {
      start: 69763,
      length: 45,
      convRule: rule45
  }, {
      start: 69808,
      length: 3,
      convRule: rule114
  }, {
      start: 69811,
      length: 4,
      convRule: rule84
  }, {
      start: 69815,
      length: 2,
      convRule: rule114
  }, {
      start: 69817,
      length: 2,
      convRule: rule84
  }, {
      start: 69819,
      length: 2,
      convRule: rule2
  }, {
      start: 69821,
      length: 1,
      convRule: rule16
  }, {
      start: 69822,
      length: 4,
      convRule: rule2
  }, {
      start: 73728,
      length: 879,
      convRule: rule45
  }, {
      start: 74752,
      length: 99,
      convRule: rule116
  }, {
      start: 74864,
      length: 4,
      convRule: rule2
  }, {
      start: 77824,
      length: 1071,
      convRule: rule45
  }, {
      start: 92160,
      length: 569,
      convRule: rule45
  }, {
      start: 110592,
      length: 2,
      convRule: rule45
  }, {
      start: 118784,
      length: 246,
      convRule: rule13
  }, {
      start: 119040,
      length: 39,
      convRule: rule13
  }, {
      start: 119081,
      length: 60,
      convRule: rule13
  }, {
      start: 119141,
      length: 2,
      convRule: rule114
  }, {
      start: 119143,
      length: 3,
      convRule: rule84
  }, {
      start: 119146,
      length: 3,
      convRule: rule13
  }, {
      start: 119149,
      length: 6,
      convRule: rule114
  }, {
      start: 119155,
      length: 8,
      convRule: rule16
  }, {
      start: 119163,
      length: 8,
      convRule: rule84
  }, {
      start: 119171,
      length: 2,
      convRule: rule13
  }, {
      start: 119173,
      length: 7,
      convRule: rule84
  }, {
      start: 119180,
      length: 30,
      convRule: rule13
  }, {
      start: 119210,
      length: 4,
      convRule: rule84
  }, {
      start: 119214,
      length: 48,
      convRule: rule13
  }, {
      start: 119296,
      length: 66,
      convRule: rule13
  }, {
      start: 119362,
      length: 3,
      convRule: rule84
  }, {
      start: 119365,
      length: 1,
      convRule: rule13
  }, {
      start: 119552,
      length: 87,
      convRule: rule13
  }, {
      start: 119648,
      length: 18,
      convRule: rule17
  }, {
      start: 119808,
      length: 26,
      convRule: rule98
  }, {
      start: 119834,
      length: 26,
      convRule: rule14
  }, {
      start: 119860,
      length: 26,
      convRule: rule98
  }, {
      start: 119886,
      length: 7,
      convRule: rule14
  }, {
      start: 119894,
      length: 18,
      convRule: rule14
  }, {
      start: 119912,
      length: 26,
      convRule: rule98
  }, {
      start: 119938,
      length: 26,
      convRule: rule14
  }, {
      start: 119964,
      length: 1,
      convRule: rule98
  }, {
      start: 119966,
      length: 2,
      convRule: rule98
  }, {
      start: 119970,
      length: 1,
      convRule: rule98
  }, {
      start: 119973,
      length: 2,
      convRule: rule98
  }, {
      start: 119977,
      length: 4,
      convRule: rule98
  }, {
      start: 119982,
      length: 8,
      convRule: rule98
  }, {
      start: 119990,
      length: 4,
      convRule: rule14
  }, {
      start: 119995,
      length: 1,
      convRule: rule14
  }, {
      start: 119997,
      length: 7,
      convRule: rule14
  }, {
      start: 120005,
      length: 11,
      convRule: rule14
  }, {
      start: 120016,
      length: 26,
      convRule: rule98
  }, {
      start: 120042,
      length: 26,
      convRule: rule14
  }, {
      start: 120068,
      length: 2,
      convRule: rule98
  }, {
      start: 120071,
      length: 4,
      convRule: rule98
  }, {
      start: 120077,
      length: 8,
      convRule: rule98
  }, {
      start: 120086,
      length: 7,
      convRule: rule98
  }, {
      start: 120094,
      length: 26,
      convRule: rule14
  }, {
      start: 120120,
      length: 2,
      convRule: rule98
  }, {
      start: 120123,
      length: 4,
      convRule: rule98
  }, {
      start: 120128,
      length: 5,
      convRule: rule98
  }, {
      start: 120134,
      length: 1,
      convRule: rule98
  }, {
      start: 120138,
      length: 7,
      convRule: rule98
  }, {
      start: 120146,
      length: 26,
      convRule: rule14
  }, {
      start: 120172,
      length: 26,
      convRule: rule98
  }, {
      start: 120198,
      length: 26,
      convRule: rule14
  }, {
      start: 120224,
      length: 26,
      convRule: rule98
  }, {
      start: 120250,
      length: 26,
      convRule: rule14
  }, {
      start: 120276,
      length: 26,
      convRule: rule98
  }, {
      start: 120302,
      length: 26,
      convRule: rule14
  }, {
      start: 120328,
      length: 26,
      convRule: rule98
  }, {
      start: 120354,
      length: 26,
      convRule: rule14
  }, {
      start: 120380,
      length: 26,
      convRule: rule98
  }, {
      start: 120406,
      length: 26,
      convRule: rule14
  }, {
      start: 120432,
      length: 26,
      convRule: rule98
  }, {
      start: 120458,
      length: 28,
      convRule: rule14
  }, {
      start: 120488,
      length: 25,
      convRule: rule98
  }, {
      start: 120513,
      length: 1,
      convRule: rule6
  }, {
      start: 120514,
      length: 25,
      convRule: rule14
  }, {
      start: 120539,
      length: 1,
      convRule: rule6
  }, {
      start: 120540,
      length: 6,
      convRule: rule14
  }, {
      start: 120546,
      length: 25,
      convRule: rule98
  }, {
      start: 120571,
      length: 1,
      convRule: rule6
  }, {
      start: 120572,
      length: 25,
      convRule: rule14
  }, {
      start: 120597,
      length: 1,
      convRule: rule6
  }, {
      start: 120598,
      length: 6,
      convRule: rule14
  }, {
      start: 120604,
      length: 25,
      convRule: rule98
  }, {
      start: 120629,
      length: 1,
      convRule: rule6
  }, {
      start: 120630,
      length: 25,
      convRule: rule14
  }, {
      start: 120655,
      length: 1,
      convRule: rule6
  }, {
      start: 120656,
      length: 6,
      convRule: rule14
  }, {
      start: 120662,
      length: 25,
      convRule: rule98
  }, {
      start: 120687,
      length: 1,
      convRule: rule6
  }, {
      start: 120688,
      length: 25,
      convRule: rule14
  }, {
      start: 120713,
      length: 1,
      convRule: rule6
  }, {
      start: 120714,
      length: 6,
      convRule: rule14
  }, {
      start: 120720,
      length: 25,
      convRule: rule98
  }, {
      start: 120745,
      length: 1,
      convRule: rule6
  }, {
      start: 120746,
      length: 25,
      convRule: rule14
  }, {
      start: 120771,
      length: 1,
      convRule: rule6
  }, {
      start: 120772,
      length: 6,
      convRule: rule14
  }, {
      start: 120778,
      length: 1,
      convRule: rule98
  }, {
      start: 120779,
      length: 1,
      convRule: rule14
  }, {
      start: 120782,
      length: 50,
      convRule: rule8
  }, {
      start: 126976,
      length: 44,
      convRule: rule13
  }, {
      start: 127024,
      length: 100,
      convRule: rule13
  }, {
      start: 127136,
      length: 15,
      convRule: rule13
  }, {
      start: 127153,
      length: 14,
      convRule: rule13
  }, {
      start: 127169,
      length: 15,
      convRule: rule13
  }, {
      start: 127185,
      length: 15,
      convRule: rule13
  }, {
      start: 127232,
      length: 11,
      convRule: rule17
  }, {
      start: 127248,
      length: 31,
      convRule: rule13
  }, {
      start: 127280,
      length: 58,
      convRule: rule13
  }, {
      start: 127344,
      length: 43,
      convRule: rule13
  }, {
      start: 127462,
      length: 29,
      convRule: rule13
  }, {
      start: 127504,
      length: 43,
      convRule: rule13
  }, {
      start: 127552,
      length: 9,
      convRule: rule13
  }, {
      start: 127568,
      length: 2,
      convRule: rule13
  }, {
      start: 127744,
      length: 33,
      convRule: rule13
  }, {
      start: 127792,
      length: 6,
      convRule: rule13
  }, {
      start: 127799,
      length: 70,
      convRule: rule13
  }, {
      start: 127872,
      length: 20,
      convRule: rule13
  }, {
      start: 127904,
      length: 37,
      convRule: rule13
  }, {
      start: 127942,
      length: 5,
      convRule: rule13
  }, {
      start: 127968,
      length: 17,
      convRule: rule13
  }, {
      start: 128000,
      length: 63,
      convRule: rule13
  }, {
      start: 128064,
      length: 1,
      convRule: rule13
  }, {
      start: 128066,
      length: 182,
      convRule: rule13
  }, {
      start: 128249,
      length: 4,
      convRule: rule13
  }, {
      start: 128256,
      length: 62,
      convRule: rule13
  }, {
      start: 128336,
      length: 24,
      convRule: rule13
  }, {
      start: 128507,
      length: 5,
      convRule: rule13
  }, {
      start: 128513,
      length: 16,
      convRule: rule13
  }, {
      start: 128530,
      length: 3,
      convRule: rule13
  }, {
      start: 128534,
      length: 1,
      convRule: rule13
  }, {
      start: 128536,
      length: 1,
      convRule: rule13
  }, {
      start: 128538,
      length: 1,
      convRule: rule13
  }, {
      start: 128540,
      length: 3,
      convRule: rule13
  }, {
      start: 128544,
      length: 6,
      convRule: rule13
  }, {
      start: 128552,
      length: 4,
      convRule: rule13
  }, {
      start: 128557,
      length: 1,
      convRule: rule13
  }, {
      start: 128560,
      length: 4,
      convRule: rule13
  }, {
      start: 128565,
      length: 12,
      convRule: rule13
  }, {
      start: 128581,
      length: 11,
      convRule: rule13
  }, {
      start: 128640,
      length: 70,
      convRule: rule13
  }, {
      start: 128768,
      length: 116,
      convRule: rule13
  }, {
      start: 131072,
      length: 42711,
      convRule: rule45
  }, {
      start: 173824,
      length: 4149,
      convRule: rule45
  }, {
      start: 177984,
      length: 222,
      convRule: rule45
  }, {
      start: 194560,
      length: 542,
      convRule: rule45
  }, {
      start: 917505,
      length: 1,
      convRule: rule16
  }, {
      start: 917536,
      length: 96,
      convRule: rule16
  }, {
      start: 917760,
      length: 240,
      convRule: rule84
  }, {
      start: 983040,
      length: 65534,
      convRule: rule164
  }, {
      start: 1048576,
      length: 65534,
      convRule: rule164
  } ];
  var checkAttr = function (categories) {
      return function ($$char) {
          var numOfBlocks = (function () {
              var $28 = $$char < 256;
              if ($28) {
                  return numLat1Blocks;
              };
              return numBlocks;
          })();
          var maybeConversionRule = getRule(allchars)($$char)(numOfBlocks);
          if (maybeConversionRule instanceof Data_Maybe.Nothing) {
              return false;
          };
          if (maybeConversionRule instanceof Data_Maybe.Just) {
              return Data_Maybe.isJust(Data_Array.elemIndex(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories));
          };
          throw new Error("Failed pattern match at Data.Char.Unicode.Internal line 4800, column 8 - line 4802, column 92: " + [ maybeConversionRule.constructor.name ]);
      };
  };                                      
  var uIswlower = checkAttr([ gencatLL ]);                                                                                                                                                                                                                            
  var uIswupper = checkAttr([ gencatLU, gencatLT ]);
  exports["NUMCAT_LU"] = NUMCAT_LU;
  exports["NUMCAT_LL"] = NUMCAT_LL;
  exports["NUMCAT_LT"] = NUMCAT_LT;
  exports["NUMCAT_LM"] = NUMCAT_LM;
  exports["NUMCAT_LO"] = NUMCAT_LO;
  exports["NUMCAT_MN"] = NUMCAT_MN;
  exports["NUMCAT_MC"] = NUMCAT_MC;
  exports["NUMCAT_ME"] = NUMCAT_ME;
  exports["NUMCAT_ND"] = NUMCAT_ND;
  exports["NUMCAT_NL"] = NUMCAT_NL;
  exports["NUMCAT_NO"] = NUMCAT_NO;
  exports["NUMCAT_PC"] = NUMCAT_PC;
  exports["NUMCAT_PD"] = NUMCAT_PD;
  exports["NUMCAT_PS"] = NUMCAT_PS;
  exports["NUMCAT_PE"] = NUMCAT_PE;
  exports["NUMCAT_PI"] = NUMCAT_PI;
  exports["NUMCAT_PF"] = NUMCAT_PF;
  exports["NUMCAT_PO"] = NUMCAT_PO;
  exports["NUMCAT_SM"] = NUMCAT_SM;
  exports["NUMCAT_SC"] = NUMCAT_SC;
  exports["NUMCAT_SK"] = NUMCAT_SK;
  exports["NUMCAT_SO"] = NUMCAT_SO;
  exports["NUMCAT_ZS"] = NUMCAT_ZS;
  exports["NUMCAT_ZL"] = NUMCAT_ZL;
  exports["NUMCAT_ZP"] = NUMCAT_ZP;
  exports["NUMCAT_CC"] = NUMCAT_CC;
  exports["NUMCAT_CF"] = NUMCAT_CF;
  exports["NUMCAT_CS"] = NUMCAT_CS;
  exports["NUMCAT_CO"] = NUMCAT_CO;
  exports["NUMCAT_CN"] = NUMCAT_CN;
  exports["gencatPF"] = gencatPF;
  exports["gencatSM"] = gencatSM;
  exports["gencatSO"] = gencatSO;
  exports["gencatPI"] = gencatPI;
  exports["gencatMC"] = gencatMC;
  exports["gencatCO"] = gencatCO;
  exports["gencatME"] = gencatME;
  exports["gencatPO"] = gencatPO;
  exports["gencatCS"] = gencatCS;
  exports["gencatPS"] = gencatPS;
  exports["gencatMN"] = gencatMN;
  exports["gencatZL"] = gencatZL;
  exports["gencatZP"] = gencatZP;
  exports["gencatZS"] = gencatZS;
  exports["gencatLL"] = gencatLL;
  exports["gencatLM"] = gencatLM;
  exports["gencatLO"] = gencatLO;
  exports["gencatND"] = gencatND;
  exports["gencatLT"] = gencatLT;
  exports["gencatSC"] = gencatSC;
  exports["gencatLU"] = gencatLU;
  exports["gencatNL"] = gencatNL;
  exports["gencatCC"] = gencatCC;
  exports["gencatNO"] = gencatNO;
  exports["gencatCF"] = gencatCF;
  exports["gencatPC"] = gencatPC;
  exports["gencatSK"] = gencatSK;
  exports["gencatPD"] = gencatPD;
  exports["gencatPE"] = gencatPE;
  exports["numBlocks"] = numBlocks;
  exports["numLat1Blocks"] = numLat1Blocks;
  exports["rule165"] = rule165;
  exports["rule63"] = rule63;
  exports["rule126"] = rule126;
  exports["rule162"] = rule162;
  exports["rule71"] = rule71;
  exports["rule21"] = rule21;
  exports["rule128"] = rule128;
  exports["rule44"] = rule44;
  exports["rule161"] = rule161;
  exports["rule105"] = rule105;
  exports["rule101"] = rule101;
  exports["rule43"] = rule43;
  exports["rule77"] = rule77;
  exports["rule143"] = rule143;
  exports["rule39"] = rule39;
  exports["rule41"] = rule41;
  exports["rule72"] = rule72;
  exports["rule28"] = rule28;
  exports["rule31"] = rule31;
  exports["rule36"] = rule36;
  exports["rule102"] = rule102;
  exports["rule80"] = rule80;
  exports["rule5"] = rule5;
  exports["rule113"] = rule113;
  exports["rule142"] = rule142;
  exports["rule145"] = rule145;
  exports["rule104"] = rule104;
  exports["rule61"] = rule61;
  exports["rule93"] = rule93;
  exports["rule62"] = rule62;
  exports["rule103"] = rule103;
  exports["rule60"] = rule60;
  exports["rule96"] = rule96;
  exports["rule51"] = rule51;
  exports["rule87"] = rule87;
  exports["rule86"] = rule86;
  exports["rule123"] = rule123;
  exports["rule164"] = rule164;
  exports["rule166"] = rule166;
  exports["rule27"] = rule27;
  exports["rule158"] = rule158;
  exports["rule157"] = rule157;
  exports["rule9"] = rule9;
  exports["rule159"] = rule159;
  exports["rule138"] = rule138;
  exports["rule4"] = rule4;
  exports["rule133"] = rule133;
  exports["rule155"] = rule155;
  exports["rule132"] = rule132;
  exports["rule153"] = rule153;
  exports["rule24"] = rule24;
  exports["rule26"] = rule26;
  exports["rule16"] = rule16;
  exports["rule74"] = rule74;
  exports["rule122"] = rule122;
  exports["rule25"] = rule25;
  exports["rule127"] = rule127;
  exports["rule40"] = rule40;
  exports["rule30"] = rule30;
  exports["rule29"] = rule29;
  exports["rule69"] = rule69;
  exports["rule3"] = rule3;
  exports["rule135"] = rule135;
  exports["rule23"] = rule23;
  exports["rule32"] = rule32;
  exports["rule33"] = rule33;
  exports["rule50"] = rule50;
  exports["rule154"] = rule154;
  exports["rule58"] = rule58;
  exports["rule67"] = rule67;
  exports["rule76"] = rule76;
  exports["rule119"] = rule119;
  exports["rule57"] = rule57;
  exports["rule97"] = rule97;
  exports["rule108"] = rule108;
  exports["rule100"] = rule100;
  exports["rule70"] = rule70;
  exports["rule141"] = rule141;
  exports["rule139"] = rule139;
  exports["rule45"] = rule45;
  exports["rule91"] = rule91;
  exports["rule121"] = rule121;
  exports["rule117"] = rule117;
  exports["rule12"] = rule12;
  exports["rule85"] = rule85;
  exports["rule163"] = rule163;
  exports["rule17"] = rule17;
  exports["rule134"] = rule134;
  exports["rule147"] = rule147;
  exports["rule64"] = rule64;
  exports["rule2"] = rule2;
  exports["rule84"] = rule84;
  exports["rule38"] = rule38;
  exports["rule42"] = rule42;
  exports["rule53"] = rule53;
  exports["rule83"] = rule83;
  exports["rule98"] = rule98;
  exports["rule136"] = rule136;
  exports["rule120"] = rule120;
  exports["rule20"] = rule20;
  exports["rule115"] = rule115;
  exports["rule109"] = rule109;
  exports["rule13"] = rule13;
  exports["rule19"] = rule19;
  exports["rule125"] = rule125;
  exports["rule49"] = rule49;
  exports["rule79"] = rule79;
  exports["rule14"] = rule14;
  exports["rule148"] = rule148;
  exports["rule66"] = rule66;
  exports["rule99"] = rule99;
  exports["rule140"] = rule140;
  exports["rule116"] = rule116;
  exports["rule8"] = rule8;
  exports["rule94"] = rule94;
  exports["rule114"] = rule114;
  exports["rule6"] = rule6;
  exports["rule7"] = rule7;
  exports["rule55"] = rule55;
  exports["rule54"] = rule54;
  exports["rule124"] = rule124;
  exports["rule65"] = rule65;
  exports["rule78"] = rule78;
  exports["rule56"] = rule56;
  exports["rule137"] = rule137;
  exports["rule131"] = rule131;
  exports["rule130"] = rule130;
  exports["rule110"] = rule110;
  exports["rule48"] = rule48;
  exports["rule52"] = rule52;
  exports["rule156"] = rule156;
  exports["rule75"] = rule75;
  exports["rule11"] = rule11;
  exports["rule129"] = rule129;
  exports["rule37"] = rule37;
  exports["rule18"] = rule18;
  exports["rule152"] = rule152;
  exports["rule35"] = rule35;
  exports["rule46"] = rule46;
  exports["rule82"] = rule82;
  exports["rule10"] = rule10;
  exports["rule34"] = rule34;
  exports["rule150"] = rule150;
  exports["rule107"] = rule107;
  exports["rule47"] = rule47;
  exports["rule160"] = rule160;
  exports["rule73"] = rule73;
  exports["rule59"] = rule59;
  exports["rule106"] = rule106;
  exports["rule151"] = rule151;
  exports["rule15"] = rule15;
  exports["rule112"] = rule112;
  exports["rule90"] = rule90;
  exports["rule146"] = rule146;
  exports["rule89"] = rule89;
  exports["rule81"] = rule81;
  exports["rule88"] = rule88;
  exports["rule149"] = rule149;
  exports["rule111"] = rule111;
  exports["rule144"] = rule144;
  exports["rule92"] = rule92;
  exports["rule118"] = rule118;
  exports["rule22"] = rule22;
  exports["rule68"] = rule68;
  exports["rule95"] = rule95;
  exports["rule0"] = rule0;
  exports["rule1"] = rule1;
  exports["allchars"] = allchars;
  exports["nullrule"] = nullrule;
  exports["blkCmp"] = blkCmp;
  exports["getRule"] = getRule;
  exports["bsearch"] = bsearch;
  exports["checkAttr"] = checkAttr;
  exports["uIswupper"] = uIswupper;
  exports["uIswlower"] = uIswlower;
})(PS["Data.Char.Unicode.Internal"] = PS["Data.Char.Unicode.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Char.Unicode"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Char = PS["Data.Char"];
  var Data_Char_Unicode_Internal = PS["Data.Char.Unicode.Internal"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var isUpper = function ($50) {
      return Data_Char_Unicode_Internal.uIswupper(Data_Char.toCharCode($50));
  };
  var isLower = function ($52) {
      return Data_Char_Unicode_Internal.uIswlower(Data_Char.toCharCode($52));
  };
  exports["isLower"] = isLower;
  exports["isUpper"] = isUpper;
})(PS["Data.Char.Unicode"] = PS["Data.Char.Unicode"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["foldableNonEmpty"] = foldableNonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($174) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($174));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 81, column 12 - line 83, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($175) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($175));
          };
      };
  });
  var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 127, column 1 - line 127, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 134, column 1 - line 134, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["applyList"] = applyList;
  exports["bindList"] = bindList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                                                   
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 259, column 1 - line 259, column 66: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List line 245, column 1 - line 245, column 43: " + [ v.constructor.name ]);
  };
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 3 - line 368, column 19: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, v1, acc) {
                              if (v instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v.value1;
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List line 718, column 3 - line 718, column 21: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
              };
              return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Data_Boolean.otherwise) {
              var go = function ($copy_s) {
                  return function ($copy_e) {
                      return function ($copy_step) {
                          return function ($copy_rest) {
                              var $tco_var_s = $copy_s;
                              var $tco_var_e = $copy_e;
                              var $tco_var_step = $copy_step;
                              var $tco_done = false;
                              var $tco_result;
                              function $tco_loop(s, e, step, rest) {
                                  if (s === e) {
                                      $tco_done = true;
                                      return new Data_List_Types.Cons(s, rest);
                                  };
                                  if (Data_Boolean.otherwise) {
                                      $tco_var_s = s + step | 0;
                                      $tco_var_e = e;
                                      $tco_var_step = step;
                                      $copy_rest = new Data_List_Types.Cons(s, rest);
                                      return;
                                  };
                                  throw new Error("Failed pattern match at Data.List line 148, column 3 - line 149, column 65: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                              while (!$tco_done) {
                                  $tco_result = $tco_loop($tco_var_s, $tco_var_e, $tco_var_step, $copy_rest);
                              };
                              return $tco_result;
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $223 = start > end;
                  if ($223) {
                      return 1;
                  };
                  return -1 | 0;
              })())(Data_List_Types.Nil.value);
          };
          throw new Error("Failed pattern match at Data.List line 144, column 1 - line 144, column 32: " + [ start.constructor.name, end.constructor.name ]);
      };
  };                                                                                          
  var mapMaybe = function (f) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      var v1 = f(v.value0);
                      if (v1 instanceof Data_Maybe.Nothing) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List line 419, column 5 - line 421, column 32: " + [ v1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.List line 417, column 3 - line 417, column 27: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 230, column 1 - line 230, column 22: " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  var filter = function (p) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (p(v.value0)) {
                          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 390, column 3 - line 390, column 27: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };                                                                              
  var concat = function (v) {
      return Control_Bind.bind(Data_List_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["range"] = range;
  exports["length"] = length;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
  exports["reverse"] = reverse;
  exports["concat"] = concat;
  exports["filter"] = filter;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["zipWith"] = zipWith;
  exports["zip"] = zip;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var uncons = function (v) {
      return {
          head: v.value0,
          tail: v.value1
      };
  };
  var toList = function (v) {
      return new Data_List_Types.Cons(v.value0, v.value1);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function ($163) {
          return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
                  return new Data_Tuple.Tuple(rec.head, rec.tail);
              })(Data_List.uncons(xs));
          })(toList($163));
      };
  };
  var tail = function (v) {
      return v.value1;
  };                                                                                                  
  var lift = function (f) {
      return function (v) {
          return f(new Data_List_Types.Cons(v.value0, v.value1));
      };
  };
  var head = function (v) {
      return v.value0;
  };
  var fromList = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(v.value0, v.value1));
      };
      throw new Error("Failed pattern match at Data.List.NonEmpty line 120, column 1 - line 120, column 57: " + [ v.constructor.name ]);
  };
  var filter = function ($178) {
      return lift(Data_List.filter($178));
  };
  var cons = function (y) {
      return function (v) {
          return new Data_NonEmpty.NonEmpty(y, new Data_List_Types.Cons(v.value0, v.value1));
      };
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromList"] = fromList;
  exports["toList"] = toList;
  exports["cons"] = cons;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
  exports["filter"] = filter;
})(PS["Data.List.NonEmpty"] = PS["Data.List.NonEmpty"] || {});
(function(exports) {
    "use strict";        

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                                          
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                 
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
  exports["foreachE"] = $foreign.foreachE;
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var $$Math = PS["Math"];
  var pointPlusVec = function (p) {
      return function (v) {
          return {
              x: p.x + v.x,
              y: p.y + v.y
          };
      };
  };
  var multiplyByScalar = function (v) {
      return function (s) {
          return {
              x: v.x * s,
              y: v.y * s
          };
      };
  };
  var magnitude = function (v) {
      return $$Math.sqrt($$Math.pow(v.x)(2.0) + $$Math.pow(v.y)(2.0));
  };
  var normalize = function (v) {
      var mag = magnitude(v);
      return {
          x: v.x / mag,
          y: v.y / mag
      };
  };
  var dot = function (v) {
      return function (v$prime) {
          return v.x * v$prime.x + v.y * v$prime.y;
      };
  };
  var distance = function (p) {
      return function (q) {
          return $$Math.sqrt($$Math.pow(p.x - q.x)(2.0) + $$Math.pow(p.y - q.y)(2.0));
      };
  };
  var pointToSegEnds = function (point) {
      return function (seg) {
          return distance(seg.p)(point) + distance(seg.q)(point);
      };
  };
  var circlesTouchingPoint = function (circle) {
      return function (circle$prime) {
          var radiusesSum = circle$prime.radius + circle.radius;
          var point = {
              x: circle.radius / radiusesSum,
              y: circle.radius / radiusesSum
          };
          var centersDiff = Data_Ring.sub(Data_Ring.ringRecord()(Data_Ring.ringRecordCons(new Data_Symbol.IsSymbol(function () {
              return "x";
          }))()(Data_Ring.ringRecordCons(new Data_Symbol.IsSymbol(function () {
              return "y";
          }))()(Data_Ring.ringRecordNil)(Data_Ring.ringNumber))(Data_Ring.ringNumber)))(circle$prime.center)(circle.center);
          return Data_Semiring.add(Data_Semiring.semiringRecord()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
              return "x";
          }))()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
              return "y";
          }))()(Data_Semiring.semiringRecordNil)(Data_Semiring.semiringNumber))(Data_Semiring.semiringNumber)))(circle.center)(Data_Semiring.mul(Data_Semiring.semiringRecord()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
              return "x";
          }))()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
              return "y";
          }))()(Data_Semiring.semiringRecordNil)(Data_Semiring.semiringNumber))(Data_Semiring.semiringNumber)))(centersDiff)(point));
      };
  };
  var almostEqualTo = function (x) {
      return function (y) {
          return Data_Ord.abs(Data_Ord.ordNumber)(Data_Ring.ringNumber)(x - y) < 1.0e-6;
      };
  };
  var almostLessThanOrEqualTo = function (x) {
      return function (y) {
          return almostEqualTo(x)(y) || x < y;
      };
  };
  var circlesIntersect = function (circleA) {
      return function (circleB) {
          var sumRadiuses = circleA.radius + circleB.radius;
          var distBetweenCenters = distance(circleA.center)(circleB.center);
          return almostLessThanOrEqualTo(distBetweenCenters)(sumRadiuses);
      };
  };
  var pointOnSeg = function (point) {
      return function (seg) {
          var segLength = distance(seg.p)(seg.q);
          var pointToQ = distance(point)(seg.q);
          var pointToP = distance(point)(seg.p);
          return almostEqualTo(pointToP + pointToQ)(segLength);
      };
  };
  var projectPointOnSeg = function (c) {
      return function (seg) {
          var pq = Data_Ring.sub(Data_Ring.ringRecord()(Data_Ring.ringRecordCons(new Data_Symbol.IsSymbol(function () {
              return "x";
          }))()(Data_Ring.ringRecordCons(new Data_Symbol.IsSymbol(function () {
              return "y";
          }))()(Data_Ring.ringRecordNil)(Data_Ring.ringNumber))(Data_Ring.ringNumber)))(seg.q)(seg.p);
          var pc = Data_Ring.sub(Data_Ring.ringRecord()(Data_Ring.ringRecordCons(new Data_Symbol.IsSymbol(function () {
              return "x";
          }))()(Data_Ring.ringRecordCons(new Data_Symbol.IsSymbol(function () {
              return "y";
          }))()(Data_Ring.ringRecordNil)(Data_Ring.ringNumber))(Data_Ring.ringNumber)))(c)(seg.p);
          var p = pointPlusVec(seg.p)(multiplyByScalar(pq)(dot(pq)(pc) / dot(pq)(pq)));
          var $1 = pointOnSeg(p)(seg);
          if ($1) {
              return new Data_Maybe.Just(p);
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var closestPointOnSeg = function (point) {
      return function (seg) {
          var closestEndOnSeg = (function () {
              var $2 = distance(seg.p)(point) < distance(seg.q)(point);
              if ($2) {
                  return seg.p;
              };
              return seg.q;
          })();
          var v = projectPointOnSeg(point)(seg);
          if (v instanceof Data_Maybe.Just) {
              return v.value0;
          };
          if (v instanceof Data_Maybe.Nothing) {
              return closestEndOnSeg;
          };
          throw new Error("Failed pattern match at Geometry line 120, column 7 - line 122, column 35: " + [ v.constructor.name ]);
      };
  };
  var circleIntersectSeg = function (circle) {
      return function (seg) {
          var closestPoint = closestPointOnSeg(circle.center)(seg);
          return almostLessThanOrEqualTo(distance(circle.center)(closestPoint))(circle.radius);
      };
  };
  exports["normalize"] = normalize;
  exports["dot"] = dot;
  exports["pointToSegEnds"] = pointToSegEnds;
  exports["circleIntersectSeg"] = circleIntersectSeg;
  exports["circlesIntersect"] = circlesIntersect;
  exports["multiplyByScalar"] = multiplyByScalar;
  exports["circlesTouchingPoint"] = circlesTouchingPoint;
})(PS["Geometry"] = PS["Geometry"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Geometry = PS["Geometry"];
  var Prelude = PS["Prelude"];
  var Playing = (function () {
      function Playing() {

      };
      Playing.value = new Playing();
      return Playing;
  })();
  var Won = (function () {
      function Won() {

      };
      Won.value = new Won();
      return Won;
  })();
  var Lost = (function () {
      function Lost() {

      };
      Lost.value = new Lost();
      return Lost;
  })();
  var White = (function () {
      function White() {

      };
      White.value = new White();
      return White;
  })();
  var Red = (function () {
      function Red() {

      };
      Red.value = new Red();
      return Red;
  })();
  var Blue = (function () {
      function Blue() {

      };
      Blue.value = new Blue();
      return Blue;
  })();
  var Green = (function () {
      function Green() {

      };
      Green.value = new Green();
      return Green;
  })();
  var Yellow = (function () {
      function Yellow() {

      };
      Yellow.value = new Yellow();
      return Yellow;
  })();
  var Gray = (function () {
      function Gray() {

      };
      Gray.value = new Gray();
      return Gray;
  })();
  var Black = (function () {
      function Black() {

      };
      Black.value = new Black();
      return Black;
  })();
  var DarkGray = (function () {
      function DarkGray() {

      };
      DarkGray.value = new DarkGray();
      return DarkGray;
  })();
  var TopSide = (function () {
      function TopSide() {

      };
      TopSide.value = new TopSide();
      return TopSide;
  })();
  var BottomSide = (function () {
      function BottomSide() {

      };
      BottomSide.value = new BottomSide();
      return BottomSide;
  })();
  var RightSide = (function () {
      function RightSide() {

      };
      RightSide.value = new RightSide();
      return RightSide;
  })();
  var LeftSide = (function () {
      function LeftSide() {

      };
      LeftSide.value = new LeftSide();
      return LeftSide;
  })();
  var sinkSide = 64.0;
  var sinkHoleRadius = 24.0;
  var showColor = new Data_Show.Show(function (v) {
      if (v instanceof White) {
          return "White";
      };
      if (v instanceof Red) {
          return "Red";
      };
      if (v instanceof Blue) {
          return "Blue";
      };
      if (v instanceof Green) {
          return "Green";
      };
      if (v instanceof Yellow) {
          return "Yellow";
      };
      if (v instanceof Gray) {
          return "Gray";
      };
      if (v instanceof Black) {
          return "Black";
      };
      if (v instanceof DarkGray) {
          return "DarkGray";
      };
      throw new Error("Failed pattern match at GameObjects line 40, column 1 - line 40, column 33: " + [ v.constructor.name ]);
  });
  var inkRadius = 6.0;
  var mkInkDot = function (xy) {
      return {
          center: {
              x: Data_Int.toNumber(xy.x),
              y: Data_Int.toNumber(xy.y)
          },
          radius: inkRadius
      };
  };
  var eqGameStatus = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Playing && y instanceof Playing) {
              return true;
          };
          if (x instanceof Won && y instanceof Won) {
              return true;
          };
          if (x instanceof Lost && y instanceof Lost) {
              return true;
          };
          return false;
      };
  });
  var eqColor = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof White && y instanceof White) {
              return true;
          };
          if (x instanceof Red && y instanceof Red) {
              return true;
          };
          if (x instanceof Blue && y instanceof Blue) {
              return true;
          };
          if (x instanceof Green && y instanceof Green) {
              return true;
          };
          if (x instanceof Yellow && y instanceof Yellow) {
              return true;
          };
          if (x instanceof Gray && y instanceof Gray) {
              return true;
          };
          if (x instanceof Black && y instanceof Black) {
              return true;
          };
          if (x instanceof DarkGray && y instanceof DarkGray) {
              return true;
          };
          return false;
      };
  });
  var blockSide = 32.0;
  var betweenCells = 3.0;
  var mkBlock = function (coor) {
      return function (color) {
          return {
              square: {
                  topLeft: {
                      x: betweenCells + (blockSide + betweenCells) * Data_Int.toNumber(coor.col),
                      y: betweenCells + (blockSide + betweenCells) * Data_Int.toNumber(coor.row)
                  },
                  side: blockSide
              },
              color: color
          };
      };
  };
  var mkSink = function (coor) {
      return function (color) {
          var topLeft = {
              x: (blockSide + betweenCells) * Data_Int.toNumber(coor.col),
              y: (blockSide + betweenCells) * Data_Int.toNumber(coor.row)
          };
          return {
              square: {
                  topLeft: topLeft,
                  side: sinkSide
              },
              circle: {
                  center: {
                      x: topLeft.x + sinkSide / 2.0,
                      y: topLeft.y + sinkSide / 2.0
                  },
                  radius: sinkHoleRadius
              },
              color: color
          };
      };
  };
  exports["White"] = White;
  exports["Red"] = Red;
  exports["Blue"] = Blue;
  exports["Green"] = Green;
  exports["Yellow"] = Yellow;
  exports["Gray"] = Gray;
  exports["Black"] = Black;
  exports["DarkGray"] = DarkGray;
  exports["TopSide"] = TopSide;
  exports["BottomSide"] = BottomSide;
  exports["RightSide"] = RightSide;
  exports["LeftSide"] = LeftSide;
  exports["Playing"] = Playing;
  exports["Won"] = Won;
  exports["Lost"] = Lost;
  exports["mkBlock"] = mkBlock;
  exports["mkSink"] = mkSink;
  exports["mkInkDot"] = mkInkDot;
  exports["blockSide"] = blockSide;
  exports["betweenCells"] = betweenCells;
  exports["eqColor"] = eqColor;
  exports["showColor"] = showColor;
  exports["eqGameStatus"] = eqGameStatus;
})(PS["GameObjects"] = PS["GameObjects"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setCanvasWidth = function(canvas) {
      return function(width) {
          return function() {
              canvas.width = width;
          };
      };
  };

  exports.setCanvasHeight = function(canvas) {
      return function(height) {
          return function() {
              canvas.height = height;
          };
      };
  };

  exports.setFillStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.fillStyle = style;
          };
      };
  };

  exports.setShadowColor = function(ctx) {
      return function(color) {
          return function() {
              ctx.shadowColor = color;
          };
      };
  };

  exports.setShadowBlur = function(ctx) {
      return function(blur) {
          return function() {
              ctx.shadowBlur = blur;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
              };
          };
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.radius, a.start, a.end);
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.setTextAlignImpl = function(ctx) {
      return function(textAlign) {
          return function() {
              ctx.textAlign = textAlign;
          }
      }
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(ctx) {
      return function(fontspec) {
          return function() {
              ctx.font = fontspec;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                  };
              };
          };
      };
  };

  exports.quadraticCurveTo = function(ctx) {
      return function(qCurve) {
          return function() {
              ctx.quadraticCurveTo(qCurve.cpx, qCurve.cpy, qCurve.x, qCurve.y);
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Effect_Exception_Unsafe = PS["Effect.Exception.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var AlignLeft = (function () {
      function AlignLeft() {

      };
      AlignLeft.value = new AlignLeft();
      return AlignLeft;
  })();
  var AlignRight = (function () {
      function AlignRight() {

      };
      AlignRight.value = new AlignRight();
      return AlignRight;
  })();
  var AlignCenter = (function () {
      function AlignCenter() {

      };
      AlignCenter.value = new AlignCenter();
      return AlignCenter;
  })();
  var AlignStart = (function () {
      function AlignStart() {

      };
      AlignStart.value = new AlignStart();
      return AlignStart;
  })();
  var AlignEnd = (function () {
      function AlignEnd() {

      };
      AlignEnd.value = new AlignEnd();
      return AlignEnd;
  })();
  var setTextAlign = function (ctx) {
      return function (textalign) {
          var toString = function (v) {
              if (v instanceof AlignLeft) {
                  return "left";
              };
              if (v instanceof AlignRight) {
                  return "right";
              };
              if (v instanceof AlignCenter) {
                  return "center";
              };
              if (v instanceof AlignStart) {
                  return "start";
              };
              if (v instanceof AlignEnd) {
                  return "end";
              };
              throw new Error("Failed pattern match at Graphics.Canvas line 518, column 5 - line 519, column 5: " + [ v.constructor.name ]);
          };
          return $foreign.setTextAlignImpl(ctx)(toString(textalign));
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["AlignLeft"] = AlignLeft;
  exports["AlignRight"] = AlignRight;
  exports["AlignCenter"] = AlignCenter;
  exports["AlignStart"] = AlignStart;
  exports["AlignEnd"] = AlignEnd;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["setTextAlign"] = setTextAlign;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["setCanvasWidth"] = $foreign.setCanvasWidth;
  exports["setCanvasHeight"] = $foreign.setCanvasHeight;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setShadowBlur"] = $foreign.setShadowBlur;
  exports["setShadowColor"] = $foreign.setShadowColor;
  exports["beginPath"] = $foreign.beginPath;
  exports["stroke"] = $foreign.stroke;
  exports["fill"] = $foreign.fill;
  exports["lineTo"] = $foreign.lineTo;
  exports["moveTo"] = $foreign.moveTo;
  exports["arc"] = $foreign.arc;
  exports["fillRect"] = $foreign.fillRect;
  exports["clearRect"] = $foreign.clearRect;
  exports["setFont"] = $foreign.setFont;
  exports["fillText"] = $foreign.fillText;
  exports["quadraticCurveTo"] = $foreign.quadraticCurveTo;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect = PS["Effect"];
  var GameObjects = PS["GameObjects"];
  var Geometry = PS["Geometry"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];                 
  var drawSquare = function (ctx) {
      return function (square) {
          return function (color) {
              var clr = Data_Show.show(GameObjects.showColor)(color);
              return function __do() {
                  Graphics_Canvas.setShadowBlur(ctx)(2.0)();
                  Graphics_Canvas.setShadowColor(ctx)("black")();
                  Graphics_Canvas.setFillStyle(ctx)(clr)();
                  return Graphics_Canvas.fillRect(ctx)({
                      x: square.topLeft.x,
                      y: square.topLeft.y,
                      width: square.side,
                      height: square.side
                  })();
              };
          };
      };
  };
  var drawInkLine = function (ctx) {
      return function (inkLine) {
          var inkDotToPoint = function (v) {
              return v.center;
          };
          var f = function (v) {
              return {
                  cpx: v.value0.x,
                  cpy: v.value0.y,
                  x: v.value1.x,
                  y: v.value1.y
              };
          };
          var len = Data_Array.length(inkLine);
          if (len === 1) {
              var uselessPoint = GameObjects.mkInkDot({
                  x: 500,
                  y: 500
              });
              var firstPoint = inkDotToPoint(Data_Maybe.fromMaybe(uselessPoint)(Data_Array.head(inkLine)));
              return function __do() {
                  Graphics_Canvas.setFillStyle(ctx)("black")();
                  return Graphics_Canvas.fillRect(ctx)({
                      x: firstPoint.x,
                      y: firstPoint.y,
                      width: 2.0,
                      height: 2.0
                  })();
              };
          };
          if (len === 2) {
              var uselessPoint = GameObjects.mkInkDot({
                  x: 500,
                  y: 500
              });
              var lastPoint = inkDotToPoint(Data_Maybe.fromMaybe(uselessPoint)(Data_Array.last(inkLine)));
              var firstPoint = inkDotToPoint(Data_Maybe.fromMaybe(uselessPoint)(Data_Array.head(inkLine)));
              return function __do() {
                  Graphics_Canvas.beginPath(ctx)();
                  Graphics_Canvas.moveTo(ctx)(firstPoint.x)(firstPoint.y)();
                  Graphics_Canvas.lineTo(ctx)(firstPoint.x)(firstPoint.y)();
                  return Graphics_Canvas.stroke(ctx)();
              };
          };
          var uselessPoint = GameObjects.mkInkDot({
              x: 500,
              y: 500
          });
          var middle = Data_Functor.map(Data_Functor.functorArray)(inkDotToPoint)(Data_Array.slice(1)(Data_Array.length(inkLine) - 3 | 0)(inkLine));
          var midPoints = Data_Array.zipWith(function (p) {
              return function (q) {
                  return Data_Semiring.mul(Data_Semiring.semiringRecord()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
                      return "x";
                  }))()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
                      return "y";
                  }))()(Data_Semiring.semiringRecordNil)(Data_Semiring.semiringNumber))(Data_Semiring.semiringNumber)))(Data_Semiring.add(Data_Semiring.semiringRecord()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
                      return "x";
                  }))()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
                      return "y";
                  }))()(Data_Semiring.semiringRecordNil)(Data_Semiring.semiringNumber))(Data_Semiring.semiringNumber)))(p)(q))({
                      x: 0.5,
                      y: 0.5
                  });
              };
          })(middle)(Data_Maybe.fromMaybe([  ])(Data_Array.tail(middle)));
          var lastPoint = inkDotToPoint(Data_Maybe.fromMaybe(uselessPoint)(Data_Array.last(inkLine)));
          var firstPoint = inkDotToPoint(Data_Maybe.fromMaybe(uselessPoint)(Data_Array.head(inkLine)));
          var beforeLastPoint = inkDotToPoint(Data_Maybe.fromMaybe(uselessPoint)(Data_Array.last(Data_Maybe.fromMaybe([  ])(Data_Array.init(inkLine)))));
          return function __do() {
              Graphics_Canvas.beginPath(ctx)();
              Graphics_Canvas.moveTo(ctx)(firstPoint.x)(firstPoint.y)();
              Effect.foreachE(Data_Array.zip(middle)(midPoints))(function ($10) {
                  return Graphics_Canvas.quadraticCurveTo(ctx)(f($10));
              })();
              Graphics_Canvas.quadraticCurveTo(ctx)({
                  cpx: beforeLastPoint.x,
                  cpy: beforeLastPoint.y,
                  x: lastPoint.x,
                  y: lastPoint.y
              })();
              return Graphics_Canvas.stroke(ctx)();
          };
      };
  };
  var drawCircle = function (ctx) {
      return function (circle) {
          return function (color) {
              var clr = Data_Show.show(GameObjects.showColor)(color);
              return function __do() {
                  Graphics_Canvas.setFillStyle(ctx)(clr)();
                  Graphics_Canvas.beginPath(ctx)();
                  Graphics_Canvas.arc(ctx)({
                      x: circle.center.x,
                      y: circle.center.y,
                      radius: circle.radius,
                      start: 0.0,
                      end: 2.0 * $$Math.pi
                  })();
                  return Graphics_Canvas.fill(ctx)();
              };
          };
      };
  };
  var drawSink = function (ctx) {
      return function (sink) {
          return function __do() {
              drawSquare(ctx)(sink.square)(sink.color)();
              return drawCircle(ctx)(sink.circle)(GameObjects.Black.value)();
          };
      };
  };
  var drawBlock = function (ctx) {
      return function (block) {
          return drawSquare(ctx)(block.square)(block.color);
      };
  };
  var drawBall = function (ctx) {
      return function (ball) {
          return drawCircle(ctx)(ball.circle)(ball.color);
      };
  };
  exports["drawBlock"] = drawBlock;
  exports["drawBall"] = drawBall;
  exports["drawSink"] = drawSink;
  exports["drawInkLine"] = drawInkLine;
})(PS["Graphics"] = PS["Graphics"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var GameObjects = PS["GameObjects"];
  var Geometry = PS["Geometry"];
  var Prelude = PS["Prelude"];                 
  var moveBall = function (ball) {
      return {
          circle: {
              center: {
                  x: ball.circle.center.x + ball.velocity.x,
                  y: ball.circle.center.y + ball.velocity.y
              },
              radius: ball.circle.radius
          },
          velocity: ball.velocity,
          color: ball.color
      };
  };
  var fallInSink = function (sink) {
      return function (ball) {
          return Geometry.circlesIntersect(sink.circle)(ball.circle);
      };
  };
  var changeDirection = function (ball) {
      return function (v) {
          if (v instanceof GameObjects.TopSide) {
              return {
                  circle: ball.circle,
                  velocity: {
                      x: ball.velocity.x,
                      y: -Data_Ord.abs(Data_Ord.ordNumber)(Data_Ring.ringNumber)(ball.velocity.y)
                  },
                  color: ball.color
              };
          };
          if (v instanceof GameObjects.BottomSide) {
              return {
                  circle: ball.circle,
                  velocity: {
                      x: ball.velocity.x,
                      y: Data_Ord.abs(Data_Ord.ordNumber)(Data_Ring.ringNumber)(ball.velocity.y)
                  },
                  color: ball.color
              };
          };
          if (v instanceof GameObjects.LeftSide) {
              return {
                  circle: ball.circle,
                  velocity: {
                      x: -Data_Ord.abs(Data_Ord.ordNumber)(Data_Ring.ringNumber)(ball.velocity.x),
                      y: ball.velocity.y
                  },
                  color: ball.color
              };
          };
          if (v instanceof GameObjects.RightSide) {
              return {
                  circle: ball.circle,
                  velocity: {
                      x: Data_Ord.abs(Data_Ord.ordNumber)(Data_Ring.ringNumber)(ball.velocity.x),
                      y: ball.velocity.y
                  },
                  color: ball.color
              };
          };
          throw new Error("Failed pattern match at Physics line 74, column 1 - line 74, column 45: " + [ ball.constructor.name, v.constructor.name ]);
      };
  };
  var collide = function (ball) {
      return function (block) {
          var newBallColor = (function () {
              var $12 = Data_Eq.eq(GameObjects.eqColor)(block.color)(GameObjects.White.value);
              if ($12) {
                  return ball.color;
              };
              return block.color;
          })();
          var topLeft = {
              x: block.square.topLeft.x,
              y: block.square.topLeft.y
          };
          var topRight = {
              x: block.square.topLeft.x + GameObjects.blockSide,
              y: block.square.topLeft.y
          };
          var topSeg = {
              p: topLeft,
              q: topRight
          };
          var topIntersect = Geometry.circleIntersectSeg(ball.circle)(topSeg);
          var bottomRight = {
              x: block.square.topLeft.x + GameObjects.blockSide,
              y: block.square.topLeft.y + GameObjects.blockSide
          };
          var rightSeg = {
              p: topRight,
              q: bottomRight
          };
          var rightIntersect = Geometry.circleIntersectSeg(ball.circle)(rightSeg);
          var bottomLeft = {
              x: block.square.topLeft.x,
              y: block.square.topLeft.y + GameObjects.blockSide
          };
          var bottomSeg = {
              p: bottomLeft,
              q: bottomRight
          };
          var leftSeg = {
              p: topLeft,
              q: bottomLeft
          };
          var leftIntersect = Geometry.circleIntersectSeg(ball.circle)(leftSeg);
          var bottomIntersect = Geometry.circleIntersectSeg(ball.circle)(bottomSeg);
          var detectSide = (function () {
              if (topIntersect && leftIntersect) {
                  var $13 = Geometry.pointToSegEnds(ball.circle.center)(topSeg) < Geometry.pointToSegEnds(ball.circle.center)(leftSeg);
                  if ($13) {
                      return new Data_Maybe.Just(GameObjects.TopSide.value);
                  };
                  return new Data_Maybe.Just(GameObjects.LeftSide.value);
              };
              if (topIntersect && rightIntersect) {
                  var $14 = Geometry.pointToSegEnds(ball.circle.center)(topSeg) < Geometry.pointToSegEnds(ball.circle.center)(rightSeg);
                  if ($14) {
                      return new Data_Maybe.Just(GameObjects.TopSide.value);
                  };
                  return new Data_Maybe.Just(GameObjects.RightSide.value);
              };
              if (bottomIntersect && leftIntersect) {
                  var $15 = Geometry.pointToSegEnds(ball.circle.center)(bottomSeg) < Geometry.pointToSegEnds(ball.circle.center)(leftSeg);
                  if ($15) {
                      return new Data_Maybe.Just(GameObjects.BottomSide.value);
                  };
                  return new Data_Maybe.Just(GameObjects.LeftSide.value);
              };
              if (bottomIntersect && rightIntersect) {
                  var $16 = Geometry.pointToSegEnds(ball.circle.center)(bottomSeg) < Geometry.pointToSegEnds(ball.circle.center)(rightSeg);
                  if ($16) {
                      return new Data_Maybe.Just(GameObjects.BottomSide.value);
                  };
                  return new Data_Maybe.Just(GameObjects.RightSide.value);
              };
              if (topIntersect) {
                  return new Data_Maybe.Just(GameObjects.TopSide.value);
              };
              if (bottomIntersect) {
                  return new Data_Maybe.Just(GameObjects.BottomSide.value);
              };
              if (leftIntersect) {
                  return new Data_Maybe.Just(GameObjects.LeftSide.value);
              };
              if (rightIntersect) {
                  return new Data_Maybe.Just(GameObjects.RightSide.value);
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Physics line 37, column 5 - line 37, column 34: " + [  ]);
          })();
          if (detectSide instanceof Data_Maybe.Just) {
              return Data_Maybe.Just.create(changeDirection({
                  circle: ball.circle,
                  velocity: ball.velocity,
                  color: newBallColor
              })(detectSide.value0));
          };
          if (detectSide instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Physics line 33, column 3 - line 35, column 25: " + [ detectSide.constructor.name ]);
      };
  };
  var ballCollideWithInkDot = function (ball) {
      return function (v) {
          var touchPoint = Geometry.circlesTouchingPoint(ball.circle)(v);
          var n = Geometry.normalize(Data_Ring.sub(Data_Ring.ringRecord()(Data_Ring.ringRecordCons(new Data_Symbol.IsSymbol(function () {
              return "x";
          }))()(Data_Ring.ringRecordCons(new Data_Symbol.IsSymbol(function () {
              return "y";
          }))()(Data_Ring.ringRecordNil)(Data_Ring.ringNumber))(Data_Ring.ringNumber)))(touchPoint)(v.center));
          var v1 = Data_Ring.sub(Data_Ring.ringRecord()(Data_Ring.ringRecordCons(new Data_Symbol.IsSymbol(function () {
              return "x";
          }))()(Data_Ring.ringRecordCons(new Data_Symbol.IsSymbol(function () {
              return "y";
          }))()(Data_Ring.ringRecordNil)(Data_Ring.ringNumber))(Data_Ring.ringNumber)))(ball.velocity)(Geometry.multiplyByScalar(n)(2.0 * Geometry.dot(ball.velocity)(n)));
          var $21 = Geometry.circlesIntersect(ball.circle)(v);
          if ($21) {
              return new Data_Maybe.Just({
                  velocity: v1,
                  circle: ball.circle,
                  color: ball.color
              });
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var ballCollideWithInkLine = function (ball) {
      return function (inkLine) {
          return Data_List.head(Data_List.catMaybes(Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(ballCollideWithInkDot(ball))(inkLine))));
      };
  };
  var ballCollideWithBall = function (ball) {
      return function (ball$prime) {
          var ballsCollide = Geometry.circlesIntersect(ball.circle)(ball$prime.circle);
          var $22 = Data_Eq.notEq(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
              return "radius";
          }))(Data_Eq.eqNumber))()(new Data_Symbol.IsSymbol(function () {
              return "center";
          }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
              return "y";
          }))(Data_Eq.eqNumber))()(new Data_Symbol.IsSymbol(function () {
              return "x";
          }))(Data_Eq.eqNumber)))))(ball.circle)(ball$prime.circle) && ballsCollide;
          if ($22) {
              return Data_Maybe.Just.create({
                  velocity: ball$prime.velocity,
                  circle: ball.circle,
                  color: ball.color
              });
          };
          return Data_Maybe.Nothing.value;
      };
  };
  exports["moveBall"] = moveBall;
  exports["collide"] = collide;
  exports["fallInSink"] = fallInSink;
  exports["ballCollideWithBall"] = ballCollideWithBall;
  exports["ballCollideWithInkLine"] = ballCollideWithInkLine;
})(PS["Physics"] = PS["Physics"] || {});
(function(exports) {// module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };

  exports.merge = function(sig1) {
    return function(sig2) {
      var out = make(sig1.get());
      sig2.subscribe(out.set);
      sig1.subscribe(out.set);
      return out;
    };
  };

  exports.foldp = function(fun) {
    return function(seed) {
      return function(sig) {
        var acc = seed;
        var out = make(acc);
        sig.subscribe(function(val) {
          acc = fun(val)(acc);
          out.set(acc);
        });
        return out;
      };
    };
  };

  exports.sampleOn = function(sig1) {
    return function(sig2) {
      var out = make(sig2.get());
      sig1.subscribe(function() {
        out.set(sig2.get());
      });
      return out;
    };
  };

  exports.dropRepeats = function(eq) {
    return function(sig) {
      var val = sig.get();
      var out = make(val);
      sig.subscribe(function(newval) {
        if (!eq["eq"](val)(newval)) {
          val = newval;
          out.set(val);
        }
      });
      return out;
    };
  };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };

  exports.get = function(sig) {
    return function() {
      return sig.get();
    };
  };
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var semigroupSignal = new Data_Semigroup.Semigroup($foreign.merge);
  var functorSignal = new Data_Functor.Functor($foreign.mapSig);
  var flippedMap = function (dictFunctor) {
      return Data_Function.flip(Data_Functor.map(dictFunctor));
  };
  exports["flippedMap"] = flippedMap;
  exports["functorSignal"] = functorSignal;
  exports["semigroupSignal"] = semigroupSignal;
  exports["constant"] = $foreign.constant;
  exports["foldp"] = $foreign.foldp;
  exports["sampleOn"] = $foreign.sampleOn;
  exports["dropRepeats"] = $foreign.dropRepeats;
  exports["runSignal"] = $foreign.runSignal;
  exports["get"] = $foreign.get;
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {// module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];                 
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["channel"] = channel;
  exports["send"] = send;
  exports["subscribe"] = $foreign.subscribe;
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {

  exports.mouseButtonP =
    function mouseButtonP(constant) {
      return function(button) {
        return function() {
          var out = constant(false);
          window.addEventListener("mousedown", function(e) {
            if (e.button === button) out.set(true);
          });
          window.addEventListener("mouseup", function(e) {
            if (e.button === button) out.set(false);
          });
          return out;
        };
      };
    };

  exports.mousePosP =
    function mousePosP(constant) {
      var out = constant({x:0,y:0});
      window.addEventListener('mousemove', function(e) {
        if (e.pageX !== undefined && e.pageY !== undefined) {
          out.set({x: e.pageX, y: e.pageY});
        } else if (e.clientX !== undefined && e.clientY !== undefined) {
          out.set({
            x: e.clientX + document.body.scrollLeft +
               document.documentElement.scrollLeft,
            y: e.clientY + document.body.scrollTop +
               document.documentElement.scrollTop
          });
        } else {
          throw new Error('Mouse event has no coordinates I recognise!');
        }
      });
      return function() {
        return out;
      };
    };

  exports.animationFrameP =
    function animationFrameP(constant) {
      return function(now) {
        return function() {
          var requestAnimFrame, cancelAnimFrame;
          if (window.requestAnimationFrame) {
            requestAnimFrame = window.requestAnimationFrame;
            cancelAnimFrame = window.cancelAnimationFrame;
          } else if (window.mozRequestAnimationFrame) {
            requestAnimFrame = window.mozRequestAnimationFrame;
            cancelAnimFrame = window.mozCancelAnimationFrame;
          } else if (window.webkitRequestAnimationFrame) {
            requestAnimFrame = window.webkitRequestAnimationFrame;
            cancelAnimFrame = window.webkitCancelAnimationFrame;
          } else if (window.msRequestAnimationFrame) {
            requestAnimFrame = window.msRequestAnimationFrame;
            cancelAnimFrame = window.msCancelAnimationFrame;
          } else if (window.oRequestAnimationFrame) {
            requestAnimFrame = window.oRequestAnimationFrame;
            cancelAnimFrame = window.oCancelAnimationFrame;
          } else {
            requestAnimFrame = function(cb) {setTimeout(function() {cb(now())}, 1000/60)};
            cancelAnimFrame = window.clearTimeout;
          }
          var out = constant(now());
          requestAnimFrame(function tick(t) {
            out.set(t); requestAnimFrame(tick);
          });
          return out;
        };
      };
    };
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {// module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Signal.Time"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  exports["now"] = $foreign.now;
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Signal.DOM"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];                 
  var MouseLeftButton = (function () {
      function MouseLeftButton() {

      };
      MouseLeftButton.value = new MouseLeftButton();
      return MouseLeftButton;
  })();
  var MouseMiddleButton = (function () {
      function MouseMiddleButton() {

      };
      MouseMiddleButton.value = new MouseMiddleButton();
      return MouseMiddleButton;
  })();
  var MouseIE8MiddleButton = (function () {
      function MouseIE8MiddleButton() {

      };
      MouseIE8MiddleButton.value = new MouseIE8MiddleButton();
      return MouseIE8MiddleButton;
  })();
  var MouseRightButton = (function () {
      function MouseRightButton() {

      };
      MouseRightButton.value = new MouseRightButton();
      return MouseRightButton;
  })();
  var mousePos = $foreign.mousePosP(Signal.constant);
  var mouseButton = $foreign.mouseButtonP(Signal.constant);
  var mouseButtonPressed = function (btn) {
      var buttonNumber = (function () {
          if (btn instanceof MouseLeftButton) {
              return 0;
          };
          if (btn instanceof MouseRightButton) {
              return 2;
          };
          if (btn instanceof MouseMiddleButton) {
              return 1;
          };
          if (btn instanceof MouseIE8MiddleButton) {
              return 4;
          };
          throw new Error("Failed pattern match at Signal.DOM line 48, column 20 - line 54, column 1: " + [ btn.constructor.name ]);
      })();
      return mouseButton(buttonNumber);
  };                                                     
  var animationFrame = $foreign.animationFrameP(Signal.constant)(Signal_Time.now);
  exports["animationFrame"] = animationFrame;
  exports["mouseButton"] = mouseButton;
  exports["mouseButtonPressed"] = mouseButtonPressed;
  exports["mousePos"] = mousePos;
  exports["MouseLeftButton"] = MouseLeftButton;
  exports["MouseMiddleButton"] = MouseMiddleButton;
  exports["MouseIE8MiddleButton"] = MouseIE8MiddleButton;
  exports["MouseRightButton"] = MouseRightButton;
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
    "use strict";

  exports._getElementById = function (id) {
    return function (node) {
      return function () {
        return node.getElementById(id);
      };
    };
  };
})(PS["Web.DOM.NonElementParentNode"] = PS["Web.DOM.NonElementParentNode"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.DOM.NonElementParentNode"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Web_DOM_Element = PS["Web.DOM.Element"];                 
  var getElementById = function (eid) {
      return function ($0) {
          return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign._getElementById(eid)($0));
      };
  };
  exports["getElementById"] = getElementById;
})(PS["Web.DOM.NonElementParentNode"] = PS["Web.DOM.NonElementParentNode"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.DOM.Document"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Web_DOM_Comment = PS["Web.DOM.Comment"];
  var Web_DOM_DocumentFragment = PS["Web.DOM.DocumentFragment"];
  var Web_DOM_DocumentType = PS["Web.DOM.DocumentType"];
  var Web_DOM_Element = PS["Web.DOM.Element"];
  var Web_DOM_HTMLCollection = PS["Web.DOM.HTMLCollection"];
  var Web_DOM_Internal_Types = PS["Web.DOM.Internal.Types"];
  var Web_DOM_NonElementParentNode = PS["Web.DOM.NonElementParentNode"];
  var Web_DOM_ParentNode = PS["Web.DOM.ParentNode"];
  var Web_DOM_ProcessingInstruction = PS["Web.DOM.ProcessingInstruction"];
  var Web_DOM_Text = PS["Web.DOM.Text"];
  var Web_Event_EventTarget = PS["Web.Event.EventTarget"];
  var Web_Internal_FFI = PS["Web.Internal.FFI"];
  var toNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
  exports["toNonElementParentNode"] = toNonElementParentNode;
})(PS["Web.DOM.Document"] = PS["Web.DOM.Document"] || {});
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function(exports) {
    "use strict";

  exports._read = function (nothing, just, value) {
    var tag = Object.prototype.toString.call(value);
    if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
      return just(value);
    } else {
      return nothing;
    }
  };

  exports.offsetTop = function (el) {
    return function () {
      return el.offsetTop;
    };
  };

  exports.offsetLeft = function (el) {
    return function () {
      return el.offsetLeft;
    };
  };
})(PS["Web.HTML.HTMLElement"] = PS["Web.HTML.HTMLElement"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.HTML.HTMLElement"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Web_DOM = PS["Web.DOM"];
  var Web_DOM_DOMTokenList = PS["Web.DOM.DOMTokenList"];
  var Web_DOM_Element = PS["Web.DOM.Element"];
  var Web_DOM_Internal_Types = PS["Web.DOM.Internal.Types"];
  var Web_DOM_NonDocumentTypeChildNode = PS["Web.DOM.NonDocumentTypeChildNode"];
  var Web_DOM_ParentNode = PS["Web.DOM.ParentNode"];
  var Web_Event_EventTarget = PS["Web.Event.EventTarget"];
  var fromElement = function (x) {
      return $foreign._read(Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
  };
  exports["fromElement"] = fromElement;
  exports["offsetTop"] = $foreign.offsetTop;
  exports["offsetLeft"] = $foreign.offsetLeft;
})(PS["Web.HTML.HTMLElement"] = PS["Web.HTML.HTMLElement"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.HTML.HTMLDocument"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Web_DOM_Document = PS["Web.DOM.Document"];
  var Web_DOM_Internal_Types = PS["Web.DOM.Internal.Types"];
  var Web_DOM_NonElementParentNode = PS["Web.DOM.NonElementParentNode"];
  var Web_DOM_ParentNode = PS["Web.DOM.ParentNode"];
  var Web_Event_EventTarget = PS["Web.Event.EventTarget"];
  var Web_HTML_HTMLDocument_ReadyState = PS["Web.HTML.HTMLDocument.ReadyState"];
  var Web_HTML_HTMLElement = PS["Web.HTML.HTMLElement"];
  var Web_HTML_HTMLScriptElement = PS["Web.HTML.HTMLScriptElement"];
  var Web_Internal_FFI = PS["Web.Internal.FFI"]; 
  var toDocument = Unsafe_Coerce.unsafeCoerce;
  exports["toDocument"] = toDocument;
})(PS["Web.HTML.HTMLDocument"] = PS["Web.HTML.HTMLDocument"] || {});
(function(exports) {
    "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.HTML.Window"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Web_Event_EventTarget = PS["Web.Event.EventTarget"];
  var Web_HTML_HTMLDocument = PS["Web.HTML.HTMLDocument"];
  var Web_HTML_History = PS["Web.HTML.History"];
  var Web_HTML_Location = PS["Web.HTML.Location"];
  var Web_HTML_Navigator = PS["Web.HTML.Navigator"];
  var Web_Storage_Storage = PS["Web.Storage.Storage"];
  exports["document"] = $foreign.document;
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.HTML"];
  var Effect = PS["Effect"];
  var Web_HTML_HTMLAnchorElement = PS["Web.HTML.HTMLAnchorElement"];
  var Web_HTML_HTMLAreaElement = PS["Web.HTML.HTMLAreaElement"];
  var Web_HTML_HTMLAudioElement = PS["Web.HTML.HTMLAudioElement"];
  var Web_HTML_HTMLBRElement = PS["Web.HTML.HTMLBRElement"];
  var Web_HTML_HTMLBaseElement = PS["Web.HTML.HTMLBaseElement"];
  var Web_HTML_HTMLBodyElement = PS["Web.HTML.HTMLBodyElement"];
  var Web_HTML_HTMLButtonElement = PS["Web.HTML.HTMLButtonElement"];
  var Web_HTML_HTMLCanvasElement = PS["Web.HTML.HTMLCanvasElement"];
  var Web_HTML_HTMLDListElement = PS["Web.HTML.HTMLDListElement"];
  var Web_HTML_HTMLDataElement = PS["Web.HTML.HTMLDataElement"];
  var Web_HTML_HTMLDataListElement = PS["Web.HTML.HTMLDataListElement"];
  var Web_HTML_HTMLDivElement = PS["Web.HTML.HTMLDivElement"];
  var Web_HTML_HTMLDocument = PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = PS["Web.HTML.HTMLElement"];
  var Web_HTML_HTMLEmbedElement = PS["Web.HTML.HTMLEmbedElement"];
  var Web_HTML_HTMLFieldSetElement = PS["Web.HTML.HTMLFieldSetElement"];
  var Web_HTML_HTMLFormElement = PS["Web.HTML.HTMLFormElement"];
  var Web_HTML_HTMLHRElement = PS["Web.HTML.HTMLHRElement"];
  var Web_HTML_HTMLHeadElement = PS["Web.HTML.HTMLHeadElement"];
  var Web_HTML_HTMLHeadingElement = PS["Web.HTML.HTMLHeadingElement"];
  var Web_HTML_HTMLIFrameElement = PS["Web.HTML.HTMLIFrameElement"];
  var Web_HTML_HTMLImageElement = PS["Web.HTML.HTMLImageElement"];
  var Web_HTML_HTMLInputElement = PS["Web.HTML.HTMLInputElement"];
  var Web_HTML_HTMLKeygenElement = PS["Web.HTML.HTMLKeygenElement"];
  var Web_HTML_HTMLLIElement = PS["Web.HTML.HTMLLIElement"];
  var Web_HTML_HTMLLabelElement = PS["Web.HTML.HTMLLabelElement"];
  var Web_HTML_HTMLLegendElement = PS["Web.HTML.HTMLLegendElement"];
  var Web_HTML_HTMLLinkElement = PS["Web.HTML.HTMLLinkElement"];
  var Web_HTML_HTMLMapElement = PS["Web.HTML.HTMLMapElement"];
  var Web_HTML_HTMLMediaElement = PS["Web.HTML.HTMLMediaElement"];
  var Web_HTML_HTMLMetaElement = PS["Web.HTML.HTMLMetaElement"];
  var Web_HTML_HTMLMeterElement = PS["Web.HTML.HTMLMeterElement"];
  var Web_HTML_HTMLModElement = PS["Web.HTML.HTMLModElement"];
  var Web_HTML_HTMLOListElement = PS["Web.HTML.HTMLOListElement"];
  var Web_HTML_HTMLObjectElement = PS["Web.HTML.HTMLObjectElement"];
  var Web_HTML_HTMLOptGroupElement = PS["Web.HTML.HTMLOptGroupElement"];
  var Web_HTML_HTMLOptionElement = PS["Web.HTML.HTMLOptionElement"];
  var Web_HTML_HTMLOutputElement = PS["Web.HTML.HTMLOutputElement"];
  var Web_HTML_HTMLParagraphElement = PS["Web.HTML.HTMLParagraphElement"];
  var Web_HTML_HTMLParamElement = PS["Web.HTML.HTMLParamElement"];
  var Web_HTML_HTMLPreElement = PS["Web.HTML.HTMLPreElement"];
  var Web_HTML_HTMLProgressElement = PS["Web.HTML.HTMLProgressElement"];
  var Web_HTML_HTMLQuoteElement = PS["Web.HTML.HTMLQuoteElement"];
  var Web_HTML_HTMLScriptElement = PS["Web.HTML.HTMLScriptElement"];
  var Web_HTML_HTMLSelectElement = PS["Web.HTML.HTMLSelectElement"];
  var Web_HTML_HTMLSourceElement = PS["Web.HTML.HTMLSourceElement"];
  var Web_HTML_HTMLSpanElement = PS["Web.HTML.HTMLSpanElement"];
  var Web_HTML_HTMLStyleElement = PS["Web.HTML.HTMLStyleElement"];
  var Web_HTML_HTMLTableCaptionElement = PS["Web.HTML.HTMLTableCaptionElement"];
  var Web_HTML_HTMLTableCellElement = PS["Web.HTML.HTMLTableCellElement"];
  var Web_HTML_HTMLTableColElement = PS["Web.HTML.HTMLTableColElement"];
  var Web_HTML_HTMLTableDataCellElement = PS["Web.HTML.HTMLTableDataCellElement"];
  var Web_HTML_HTMLTableElement = PS["Web.HTML.HTMLTableElement"];
  var Web_HTML_HTMLTableHeaderCellElement = PS["Web.HTML.HTMLTableHeaderCellElement"];
  var Web_HTML_HTMLTableRowElement = PS["Web.HTML.HTMLTableRowElement"];
  var Web_HTML_HTMLTableSectionElement = PS["Web.HTML.HTMLTableSectionElement"];
  var Web_HTML_HTMLTemplateElement = PS["Web.HTML.HTMLTemplateElement"];
  var Web_HTML_HTMLTextAreaElement = PS["Web.HTML.HTMLTextAreaElement"];
  var Web_HTML_HTMLTimeElement = PS["Web.HTML.HTMLTimeElement"];
  var Web_HTML_HTMLTitleElement = PS["Web.HTML.HTMLTitleElement"];
  var Web_HTML_HTMLTrackElement = PS["Web.HTML.HTMLTrackElement"];
  var Web_HTML_HTMLUListElement = PS["Web.HTML.HTMLUListElement"];
  var Web_HTML_HTMLVideoElement = PS["Web.HTML.HTMLVideoElement"];
  var Web_HTML_History = PS["Web.HTML.History"];
  var Web_HTML_Location = PS["Web.HTML.Location"];
  var Web_HTML_Navigator = PS["Web.HTML.Navigator"];
  var Web_HTML_Window = PS["Web.HTML.Window"];
  exports["window"] = $foreign.window;
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Char_Unicode = PS["Data.Char.Unicode"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var GameObjects = PS["GameObjects"];
  var Graphics = PS["Graphics"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Physics = PS["Physics"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];
  var Signal_DOM = PS["Signal.DOM"];
  var Signal_Time = PS["Signal.Time"];
  var Web_DOM_Document = PS["Web.DOM.Document"];
  var Web_DOM_NonElementParentNode = PS["Web.DOM.NonElementParentNode"];
  var Web_HTML = PS["Web.HTML"];
  var Web_HTML_HTMLDocument = PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = PS["Web.HTML.Window"];                 
  var initialBall$prime = {
      circle: {
          center: {
              x: 200.0,
              y: 300.0
          },
          radius: 10.0
      },
      velocity: {
          x: -2.0,
          y: 1.5
      },
      color: GameObjects.Green.value
  };
  var initialBall = {
      circle: {
          center: {
              x: 100.0,
              y: 100.0
          },
          radius: 10.0
      },
      velocity: {
          x: 2.0,
          y: 1.0
      },
      color: GameObjects.Red.value
  };
  var fallInWrongSink = function (ball) {
      return function (sink) {
          return Physics.fallInSink(ball)(sink) && Data_Eq.notEq(GameObjects.eqColor)(ball.color)(sink.color);
      };
  };
  var nextState = function (mCoor) {
      return function (gameState) {
          var notInSink = function (sink) {
              return Data_List.filter(function ($71) {
                  return !Physics.fallInSink(sink)($71);
              });
          };
          var notHitInkLine = function (ball) {
              return function (inkLines) {
                  var unhit = Data_List_NonEmpty.filter(function ($72) {
                      return Data_Maybe.isNothing(Physics.ballCollideWithInkLine(ball)($72));
                  })(inkLines);
                  var v = Data_List_NonEmpty.fromList(unhit);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Data_List_Types.NonEmptyList(Data_NonEmpty.singleton(Data_List_Types.plusList)([  ]));
                  };
                  throw new Error("Failed pattern match at Main line 117, column 11 - line 119, column 54: " + [ v.constructor.name ]);
              };
          };
          var afterCollisionWithInkLine = function (ball) {
              return Data_Maybe.fromMaybe(ball)(Data_Foldable.findMap(Data_List_Types.foldableNonEmptyList)(Physics.ballCollideWithInkLine(ball))(gameState.inkLines));
          };
          var afterCollisionWithBlock = function (ball) {
              return Data_Maybe.fromMaybe(ball)(Data_Foldable.findMap(Data_List_Types.foldableList)(Physics.collide(ball))(gameState.blocks));
          };
          var afterCollisionWithBall = function (ball) {
              return Data_Maybe.fromMaybe(ball)(Data_Foldable.findMap(Data_List_Types.foldableList)(Physics.ballCollideWithBall(ball))(gameState.balls));
          };
          var afterCollision = function ($73) {
              return afterCollisionWithBlock(afterCollisionWithBall(afterCollisionWithInkLine($73)));
          };
          var $27 = Data_Eq.eq(GameObjects.eqGameStatus)(gameState.status)(GameObjects.Playing.value);
          if ($27) {
              var newInkLines = (function () {
                  if (mCoor instanceof Data_Maybe.Just) {
                      var remainingLines = Data_List_NonEmpty.tail(gameState.inkLines);
                      var firstLine = Data_List_NonEmpty.head(gameState.inkLines);
                      var newFirstLine = Data_Semigroup.append(Data_Semigroup.semigroupArray)(firstLine)([ GameObjects.mkInkDot(mCoor.value0) ]);
                      return Data_List_Types.NonEmptyList(new Data_NonEmpty.NonEmpty(newFirstLine, remainingLines));
                  };
                  if (mCoor instanceof Data_Maybe.Nothing) {
                      return Data_List_NonEmpty.cons([  ])(gameState.inkLines);
                  };
                  throw new Error("Failed pattern match at Main line 80, column 13 - line 86, column 55: " + [ mCoor.constructor.name ]);
              })();
              var unhitNewInkLines = Data_Foldable.foldr(Data_List_Types.foldableList)(notHitInkLine)(newInkLines)(gameState.balls);
              var lost = Data_Foldable.any(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
                  return v === true;
              })(Control_Apply.apply(Data_List_Types.applyList)(Data_Functor.map(Data_List_Types.functorList)(fallInWrongSink)(gameState.sinks))(gameState.balls));
              var ballsNotInSinks = Data_Foldable.foldr(Data_List_Types.foldableList)(notInSink)(gameState.balls)(gameState.sinks);
              var newBalls = Data_Functor.map(Data_List_Types.functorList)(function ($74) {
                  return Physics.moveBall(afterCollision($74));
              })(ballsNotInSinks);
              var newStatus = (function () {
                  if (lost) {
                      return GameObjects.Lost.value;
                  };
                  var $31 = Data_Foldable["null"](Data_List_Types.foldableList)(newBalls);
                  if ($31) {
                      return GameObjects.Won.value;
                  };
                  return GameObjects.Playing.value;
              })();
              return {
                  balls: newBalls,
                  blocks: gameState.blocks,
                  sinks: gameState.sinks,
                  inkLines: unhitNewInkLines,
                  status: newStatus
              };
          };
          return gameState;
      };
  };
  var canvasSide = 598.0;
  var drawAll = function (ctx) {
      return function (gameState) {
          var showText = function (text) {
              return function (color) {
                  return function __do() {
                      Graphics_Canvas.setFont(ctx)("50px Comic Sans MS")();
                      Graphics_Canvas.setFillStyle(ctx)(Data_Show.show(GameObjects.showColor)(color))();
                      Graphics_Canvas.setTextAlign(ctx)(Graphics_Canvas.AlignCenter.value)();
                      return Graphics_Canvas.fillText(ctx)(text)(canvasSide / 2.0)(canvasSide / 2.0)();
                  };
              };
          };
          return function __do() {
              Graphics_Canvas.clearRect(ctx)({
                  x: 0.0,
                  y: 0.0,
                  width: canvasSide,
                  height: canvasSide
              })();
              if (gameState.status instanceof GameObjects.Playing) {
                  Effect.foreachE(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(gameState.inkLines))(Graphics.drawInkLine(ctx))();
                  return Effect.foreachE(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(gameState.balls))(Graphics.drawBall(ctx))();
              };
              if (gameState.status instanceof GameObjects.Won) {
                  return showText("You Won")(GameObjects.Green.value)();
              };
              if (gameState.status instanceof GameObjects.Lost) {
                  return showText("You Lost")(GameObjects.Red.value)();
              };
              throw new Error("Failed pattern match at Main line 127, column 3 - line 132, column 36: " + [ gameState.status.constructor.name ]);
          };
      };
  };
  var canvasOffset = function __do() {
      var v = Web_HTML.window();
      var v1 = Web_HTML_Window.document(v)();
      var v2 = Web_DOM_NonElementParentNode.getElementById("canvas-wrapper")(Web_DOM_Document.toNonElementParentNode(Web_HTML_HTMLDocument.toDocument(v1)))();
      var v3 = Data_Functor.map(Data_Maybe.functorMaybe)(Web_HTML_HTMLElement.fromElement)(v2);
      if (v3 instanceof Data_Maybe.Just && v3.value0 instanceof Data_Maybe.Just) {
          var v4 = Web_HTML_HTMLElement.offsetTop(v3.value0.value0)();
          var v5 = Web_HTML_HTMLElement.offsetLeft(v3.value0.value0)();
          return {
              x: Data_Int.round(v5),
              y: Data_Int.round(v4)
          };
      };
      return {
          x: 0,
          y: 0
      };
  };
  var mousePosWhenClicked = function (mousePressedSignal) {
      return function (chan) {
          return function (coor) {
              var validateCoordinates = function (coordinatePair) {
                  var validY = coordinatePair.y >= 0 && coordinatePair.y <= Data_Int.round(canvasSide);
                  var validX = coordinatePair.x >= 0 && coordinatePair.x <= Data_Int.round(canvasSide);
                  return validX && validY;
              };
              return function __do() {
                  var v = Signal.get(mousePressedSignal)();
                  if (v) {
                      var v1 = canvasOffset();
                      var coorInCanvas = Data_Ring.sub(Data_Ring.ringRecord()(Data_Ring.ringRecordCons(new Data_Symbol.IsSymbol(function () {
                          return "x";
                      }))()(Data_Ring.ringRecordCons(new Data_Symbol.IsSymbol(function () {
                          return "y";
                      }))()(Data_Ring.ringRecordNil)(Data_Ring.ringInt))(Data_Ring.ringInt)))(coor)(v1);
                      var $44 = validateCoordinates(coorInCanvas);
                      if ($44) {
                          return Signal_Channel.send(chan)(new Data_Maybe.Just(coorInCanvas))();
                      };
                      return Signal_Channel.send(chan)(Data_Maybe.Nothing.value)();
                  };
                  return Signal_Channel.send(chan)(Data_Maybe.Nothing.value)();
              };
          };
      };
  };
  var board = Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(Data_List.fromFoldable(Data_Foldable.foldableArray))([ [ "W", "W", "W", "W", "W", "W", "R", "R", "R", "R", "R", "W", "W", "W", "W", "W", "W" ], [ "W", ".", "W", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "W" ], [ "W", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "W" ], [ "W", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "W" ], [ "W", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "rg", ".", ".", ".", ".", ".", "W" ], [ "W", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "W" ], [ "W", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "W" ], [ "W", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "W" ], [ "W", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "W" ], [ "W", "G", "G", "G", "G", "G", "W", "W", "W", "W", "W", "W", "W", "W", "W", "W", "W" ] ]));
  var enumBoard = (function () {
      var enumerate = function (xs) {
          return Data_List.range(0)(Data_List.length(xs) - 1 | 0);
      };
      var rows = enumerate(board);
      var flatBoard = Data_List.concat(board);
      var cols = enumerate(Data_Maybe.fromMaybe(Data_List_Types.Nil.value)(Data_List.head(board)));
      var enumPairs = Control_Apply.apply(Data_List_Types.applyList)(Data_Functor.map(Data_List_Types.functorList)(function (r) {
          return function (c) {
              return {
                  row: r,
                  col: c
              };
          };
      })(rows))(cols);
      return Data_List.zip(flatBoard)(enumPairs);
  })();
  var generateBlocks = (function () {
      var charToColor = function (v) {
          if (v === "G") {
              return GameObjects.Green.value;
          };
          if (v === "R") {
              return GameObjects.Red.value;
          };
          if (v === "W") {
              return GameObjects.White.value;
          };
          if (v === "B") {
              return GameObjects.Blue.value;
          };
          if (v === "Y") {
              return GameObjects.Yellow.value;
          };
          return GameObjects.Gray.value;
      };
      var toBlock = function (v) {
          return GameObjects.mkBlock(v.value1)(charToColor(v.value0));
      };
      var blocksCells = Data_List.filter(function (v) {
          return Data_Char_Unicode.isUpper(v.value0);
      })(enumBoard);
      return Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Functor.map(Data_List_Types.functorList)(toBlock)(blocksCells));
  })();
  var generateSinks = (function () {
      var charToColor = function (v) {
          if (v === "g") {
              return GameObjects.Green.value;
          };
          if (v === "r") {
              return GameObjects.Red.value;
          };
          if (v === "w") {
              return GameObjects.White.value;
          };
          if (v === "b") {
              return GameObjects.Blue.value;
          };
          if (v === "y") {
              return GameObjects.Yellow.value;
          };
          return GameObjects.Gray.value;
      };
      var toSink = function (v) {
          return GameObjects.mkSink(v.value1)(charToColor(v.value0));
      };
      var sinksCells = Data_List.filter(function (v) {
          return Data_Char_Unicode.isLower(v.value0);
      })(enumBoard);
      return Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Functor.map(Data_List_Types.functorList)(toSink)(sinksCells));
  })();
  var drawBackground = function __do() {
      var v = Graphics_Canvas.getCanvasElementById("canvas-static")();
      if (v instanceof Data_Maybe.Just) {
          Graphics_Canvas.setCanvasWidth(v.value0)(canvasSide)();
          Graphics_Canvas.setCanvasHeight(v.value0)(canvasSide)();
          var v1 = Graphics_Canvas.getContext2D(v.value0)();
          Graphics_Canvas.setFillStyle(v1)(Data_Show.show(GameObjects.showColor)(GameObjects.DarkGray.value))();
          Graphics_Canvas.fillRect(v1)({
              x: 0.0,
              y: 0.0,
              width: canvasSide,
              height: canvasSide
          })();
          Effect.foreachE(generateBlocks)(Graphics.drawBlock(v1))();
          return Effect.foreachE(generateSinks)(Graphics.drawSink(v1))();
      };
      if (v instanceof Data_Maybe.Nothing) {
          return Data_Unit.unit;
      };
      throw new Error("Failed pattern match at Main line 144, column 3 - line 158, column 25: " + [ v.constructor.name ]);
  };
  var initialState = {
      balls: new Data_List_Types.Cons(initialBall, new Data_List_Types.Cons(initialBall$prime, Data_List_Types.Nil.value)),
      blocks: Data_List.fromFoldable(Data_Foldable.foldableArray)(generateBlocks),
      sinks: Data_List.fromFoldable(Data_Foldable.foldableArray)(generateSinks),
      inkLines: Data_NonEmpty.singleton(Data_List_Types.plusList)([  ]),
      status: GameObjects.Playing.value
  };
  var gameSignal = function (frames) {
      return function (coorSig) {
          return Signal.foldp(nextState)(initialState)(Signal.sampleOn(frames)(coorSig));
      };
  };
  var main = function __do() {
      drawBackground();
      var v = Graphics_Canvas.getCanvasElementById("canvas-dynamic")();
      if (v instanceof Data_Maybe.Just) {
          Graphics_Canvas.setCanvasWidth(v.value0)(canvasSide)();
          Graphics_Canvas.setCanvasHeight(v.value0)(canvasSide)();
          var v1 = Graphics_Canvas.getContext2D(v.value0)();
          var v2 = Signal_DOM.mousePos();
          var v3 = Signal_DOM.mouseButtonPressed(Signal_DOM.MouseLeftButton.value)();
          var v4 = Signal_Channel.channel(Data_Maybe.Nothing.value)();
          Signal.runSignal(Signal.flippedMap(Signal.functorSignal)(Data_Semigroup.append(Signal.semigroupSignal)(Signal.sampleOn(v3)(Signal.dropRepeats(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
              return "y";
          }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
              return "x";
          }))(Data_Eq.eqInt)))(v2)))(Signal.dropRepeats(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
              return "y";
          }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
              return "x";
          }))(Data_Eq.eqInt)))(v2)))(mousePosWhenClicked(v3)(v4)))();
          var v5 = Signal_DOM.animationFrame();
          Signal.runSignal(Signal.flippedMap(Signal.functorSignal)(gameSignal(v5)(Signal_Channel.subscribe(v4)))(drawAll(v1)))();
          return Data_Unit.unit;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return Data_Unit.unit;
      };
      throw new Error("Failed pattern match at Main line 258, column 3 - line 272, column 21: " + [ v.constructor.name ]);
  };
  exports["canvasSide"] = canvasSide;
  exports["initialBall"] = initialBall;
  exports["initialBall'"] = initialBall$prime;
  exports["initialState"] = initialState;
  exports["gameSignal"] = gameSignal;
  exports["nextState"] = nextState;
  exports["fallInWrongSink"] = fallInWrongSink;
  exports["drawAll"] = drawAll;
  exports["drawBackground"] = drawBackground;
  exports["board"] = board;
  exports["enumBoard"] = enumBoard;
  exports["generateBlocks"] = generateBlocks;
  exports["generateSinks"] = generateSinks;
  exports["mousePosWhenClicked"] = mousePosWhenClicked;
  exports["canvasOffset"] = canvasOffset;
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();